(window.webpackJsonp = window.webpackJsonp || []).push([
    [0],
    {
        207: function (t, e, s) {
            var a = s(524);
            "string" == typeof a && (a = [[t.i, a, ""]]);
            var i = { hmr: !0, transform: void 0, insertInto: void 0 };
            s(22)(a, i);
            a.locals && (t.exports = a.locals);
        },
        208: function (t, e, s) {
            var a = s(526);
            "string" == typeof a && (a = [[t.i, a, ""]]);
            var i = { hmr: !0, transform: void 0, insertInto: void 0 };
            s(22)(a, i);
            a.locals && (t.exports = a.locals);
        },
        209: function (t, e, s) {
            var a = s(528);
            "string" == typeof a && (a = [[t.i, a, ""]]);
            var i = { hmr: !0, transform: void 0, insertInto: void 0 };
            s(22)(a, i);
            a.locals && (t.exports = a.locals);
        },
        210: function (t, e, s) {
            var a = s(530);
            "string" == typeof a && (a = [[t.i, a, ""]]);
            var i = { hmr: !0, transform: void 0, insertInto: void 0 };
            s(22)(a, i);
            a.locals && (t.exports = a.locals);
        },
        211: function (t, e, s) {
            var a = s(532);
            "string" == typeof a && (a = [[t.i, a, ""]]);
            var i = { hmr: !0, transform: void 0, insertInto: void 0 };
            s(22)(a, i);
            a.locals && (t.exports = a.locals);
        },
        212: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(533);
            e.default = {
                translate: function (t) {
                    var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
                        s = document.documentElement.lang,
                        i = a[s],
                        r = document.querySelector('meta[name="fallback_locale"]') || null,
                        n = function (t, e) {
                            return e.split(".").reduce(function (t, e) {
                                return (t || {})[e];
                            }, t);
                        },
                        o = t.split(".");
                    for (var l in o)
                        try {
                            if (void 0 === (i = i[o[l]])) {
                                i = (r.content && n(a[r.content], t)) || t;
                                break;
                            }
                        } catch (e) {
                            i = t;
                            break;
                        }
                    for (var c in e) i = i.replace(":".concat(c), e[c]);
                    return i;
                },
            };
        },
        241: function (t, e, s) {
            t.exports = s(242);
        },
        242: function (t, e, s) {
            "use strict";
            s.r(e),
                function (t) {
                    var e = s(235),
                        a = s(213),
                        i = s.n(a),
                        r = s(214),
                        n = s.n(r),
                        o = s(215),
                        l = s(216),
                        c = s.n(l),
                        d = (s(279), s(217)),
                        u = (s(282), s(1)),
                        m = s.n(u),
                        p = s(218),
                        v = s.n(p),
                        _ = s(236),
                        f = s(239),
                        g = s(219),
                        h = (s(390), s(238)),
                        b = s(220),
                        C = s.n(b),
                        x = s(221),
                        w = s.n(x),
                        y = s(222),
                        k = s.n(y),
                        S = s(223),
                        E = s.n(S),
                        A = s(224),
                        P = s.n(A),
                        $ = s(225),
                        N = s.n($),
                        T = s(226),
                        D = s(227),
                        U = s(234),
                        L = s.n(U);
                    s(519);
                    s(31),
                        s(243),
                        s(262),
                        s(277),
                        (window.Vue = s(1)),
                        (t.$ = t.jQuery = s(31)),
                        m.a.component("progress-bar", k.a),
                        m.a.use(E.a),
                        m.a.component("vue-simple-spinner", P.a),
                        m.a.use(N.a),
                        m.a.use(T.slider),
                        m.a.use(D.a),
                        m.a.use(L.a);
                    m.a.use(i.a, { color: "#bffaf3", failedColor: "#874b4b", thickness: "5px", transition: { speed: "0.2s", opacity: "0.6s", termination: 300 }, autoRevert: !0, location: "top", inverse: !1 }),
                        m.a.use(w.a),
                        m.a.use(C.a),
                        m.a.use(f.a),
                        m.a.component("multiselect", n.a),
                        m.a.use(e.a),
                        m.a.use(o.a),
                        m.a.use(c.a),
                        m.a.use(d.a),
                        m.a.use(v.a),
                        m.a.use(_.a),
                        m.a.use(h.a),
                        m.a.component("Modal", g.a),
                        m.a.component("pagination", s(521)),
                        m.a.component("dashboardComponent", s(534).default),
                        m.a.component("usersComponent", s(535).default),
                        m.a.component("moviesComponent", s(536).default),
                        m.a.component("streamingqualityComponent", s(537).default),
                        m.a.component("genresComponent", s(538).default),
                        m.a.component("seriesComponent", s(539).default),
                        m.a.component("streamingComponent", s(540).default),
                        m.a.component("notificationsComponent", s(541).default),
                        m.a.component("settingsComponent", s(542).default),
                        m.a.component("accountComponent", s(543).default),
                        m.a.component("reportsComponent", s(544).default),
                        m.a.component("animeComponent", s(545).default),
                        m.a.component("animevideosComponent", s(546).default),
                        m.a.component("adsComponent", s(547).default),
                        m.a.component("upcomingComponent", s(548).default),
                        m.a.component("plansComponent", s(549).default),
                        m.a.component("categoriesComponent", s(550).default),
                        m.a.component("suggestionsComponent", s(551).default),
                        m.a.component("castersComponent", s(552).default),
                        m.a.component("featuredComponent", s(553).default),
                        m.a.component("networksComponent", s(554).default),
                        m.a.component("headersComponent", s(555).default),
                        new m.a({ el: "#app" }),
                        (window.tranlate = s(212).default.translate),
                        (m.a.prototype.translate = s(212).default.translate);
                }.call(this, s(9));
        },
        243: function (t, e, s) {
            (function (t, e) {
                window._ = s(244);
                try {
                    s(31), s(245);
                } catch (t) {}
                (window.axios = s(113)), (window.axios.defaults.headers.common["X-Requested-With"] = "XMLHttpRequest");
                var a = document.head.querySelector('meta[name="csrf-token"]');
                a ? (window.axios.defaults.headers.common["X-CSRF-TOKEN"] = a.content) : console.error("CSRF token not found: https://laravel.com/docs/csrf#csrf-x-csrf-token"),
                    (window.http = s(113)),
                    delete window.http.defaults.headers.common["X-CSRF-TOKEN"],
                    delete window.http.defaults.headers.common["X-Requested-With"];
            }.call(this, s(31), s(31)));
        },
        268: function (t, e) {},
        270: function (t, e) {},
        287: function (t, e) {},
        289: function (t, e) {},
        3: function (t, e, s) {
            "use strict";
            function a(t) {
                return (a =
                    "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                        ? function (t) {
                              return typeof t;
                          }
                        : function (t) {
                              return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                          })(t);
            }
            s.d(e, "a", function () {
                return i;
            });
            var i = {
                methods: {
                    showError: function (t) {
                        if ("object" === a(t) && 422 == t.status) {
                            var e = Object.keys(t.data.errors)[0];
                            t = t.data.errors[e][0];
                        }
                        void 0 === t && (t = "An error has occurred"), this.$notify({ message: t, type: "error", top: !1, bottom: !0, left: !1, right: !0, showClose: !1, closeDelay: 4e3 });
                    },
                    showSuccess: function () {
                        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "success";
                        this.$notify({ message: t, type: "success", top: !1, bottom: !0, left: !1, right: !0, showClose: !1, closeDelay: 4e3 });
                    },
                    showAlert: function (t) {
                        this.$notify({ message: t, type: "warning", top: !1, bottom: !0, left: !1, right: !0, showClose: !1, closeDelay: 6e3 });
                    },
                    showAlert1: function () {
                        this.$notify({ message: "you must configure your TMDB ( to able to fetch movies info and langs ) api key in settings", type: "warning", top: !1, bottom: !0, left: !1, right: !0, showClose: !1, closeDelay: 6e3 });
                    },
                    showConfirm: function (t) {
                        Vue.dialog
                            .confirm("Please confirm to continue")
                            .then(function (e) {
                                t();
                            })
                            .catch(function () {});
                    },
                },
            };
        },
        317: function (t, e) {},
        319: function (t, e) {},
        320: function (t, e) {},
        325: function (t, e) {},
        327: function (t, e) {},
        333: function (t, e) {},
        335: function (t, e) {},
        354: function (t, e) {},
        366: function (t, e) {},
        369: function (t, e) {},
        523: function (t, e, s) {
            "use strict";
            s(207);
        },
        524: function (t, e, s) {
            (t.exports = s(21)(!1)).push([t.i, "\n.avatar img[data-v-3c3fe06a] {\n    width: 32px;\n    height: 32px;\n    border-radius: 100%;\n}\n\n", ""]);
        },
        525: function (t, e, s) {
            "use strict";
            s(208);
        },
        526: function (t, e, s) {
            (t.exports = s(21)(!1)).push([t.i, "\n.fa-2x[data-v-1014ae64] {\n    font-size: 2em;\n    color: #4a4a4a;\n}\n", ""]);
        },
        527: function (t, e, s) {
            "use strict";
            s(209);
        },
        528: function (t, e, s) {
            (t.exports = s(21)(!1)).push([t.i, "\n.fa-2x[data-v-046e45a8] {\n    font-size: 2em;\n    color: #4a4a4a;\n}\n", ""]);
        },
        529: function (t, e, s) {
            "use strict";
            s(210);
        },
        530: function (t, e, s) {
            (t.exports = s(21)(!1)).push([
                t.i,
                ".nav-tabs[data-v-fce0d3cc] {\n  border: none;\n}\n.poster[data-v-fce0d3cc] {\n  height: 100px;\n  width: 100px;\n}\n.splash[data-v-fce0d3cc] {\n  height: 300px;\n  width: 169px;\n  margin-bottom: 50px;\n}\n.settings[data-v-fce0d3cc] {\n  margin-top: 35px;\n}\n.row_networks[data-v-fce0d3cc] {\n  --bs-gutter-x: 1.5rem;\n  --bs-gutter-y: 0;\n  display: flex;\n  flex-wrap: wrap;\n  margin-top: calc(-1 * var(--bs-gutter-y));\n  margin-right: calc(-.5 * var(--bs-gutter-x));\n  margin-left: calc(-.5 * var(--bs-gutter-x));\n}",
                "",
            ]);
        },
        531: function (t, e, s) {
            "use strict";
            s(211);
        },
        532: function (t, e, s) {
            (t.exports = s(21)(!1)).push([t.i, "\n.fa-2x[data-v-bc9b5ace] {\n    font-size: 2em;\n    color: #4a4a4a;\n}\n", ""]);
        },
        533: function (t) {
            t.exports = JSON.parse(
                '{"en":{"auth":{"failed":"These credentials do not match our records.","throttle":"Too many login attempts. Please try again in :seconds seconds."},"pagination":{"previous":"&laquo; Previous","next":"Next &raquo;"},"passwords":{"password":"Passwords must be at least eight characters and match the confirmation.","reset":"Your password has been reset!","sent":"We have e-mailed your password reset link!","token":"This password reset token is invalid.","user":"We can\'t find a user with that e-mail address."},"validation":{"accepted":"The :attribute must be accepted.","active_url":"The :attribute is not a valid URL.","after":"The :attribute must be a date after :date.","after_or_equal":"The :attribute must be a date after or equal to :date.","alpha":"The :attribute may only contain letters.","alpha_dash":"The :attribute may only contain letters, numbers, dashes and underscores.","alpha_num":"The :attribute may only contain letters and numbers.","array":"The :attribute must be an array.","before":"The :attribute must be a date before :date.","before_or_equal":"The :attribute must be a date before or equal to :date.","between":{"numeric":"The :attribute must be between :min and :max.","file":"The :attribute must be between :min and :max kilobytes.","string":"The :attribute must be between :min and :max characters.","array":"The :attribute must have between :min and :max items."},"boolean":"The :attribute field must be true or false.","confirmed":"The :attribute confirmation does not match.","date":"The :attribute is not a valid date.","date_equals":"The :attribute must be a date equal to :date.","date_format":"The :attribute does not match the format :format.","different":"The :attribute and :other must be different.","digits":"The :attribute must be :digits digits.","digits_between":"The :attribute must be between :min and :max digits.","dimensions":"The :attribute has invalid image dimensions.","distinct":"The :attribute field has a duplicate value.","email":"The :attribute must be a valid email address.","ends_with":"The :attribute must end with one of the following: :values","exists":"The selected :attribute is invalid.","file":"The :attribute must be a file.","filled":"The :attribute field must have a value.","gt":{"numeric":"The :attribute must be greater than :value.","file":"The :attribute must be greater than :value kilobytes.","string":"The :attribute must be greater than :value characters.","array":"The :attribute must have more than :value items."},"gte":{"numeric":"The :attribute must be greater than or equal :value.","file":"The :attribute must be greater than or equal :value kilobytes.","string":"The :attribute must be greater than or equal :value characters.","array":"The :attribute must have :value items or more."},"image":"The :attribute must be an image.","in":"The selected :attribute is invalid.","in_array":"The :attribute field does not exist in :other.","integer":"The :attribute must be an integer.","ip":"The :attribute must be a valid IP address.","ipv4":"The :attribute must be a valid IPv4 address.","ipv6":"The :attribute must be a valid IPv6 address.","json":"The :attribute must be a valid JSON string.","lt":{"numeric":"The :attribute must be less than :value.","file":"The :attribute must be less than :value kilobytes.","string":"The :attribute must be less than :value characters.","array":"The :attribute must have less than :value items."},"lte":{"numeric":"The :attribute must be less than or equal :value.","file":"The :attribute must be less than or equal :value kilobytes.","string":"The :attribute must be less than or equal :value characters.","array":"The :attribute must not have more than :value items."},"max":{"numeric":"The :attribute may not be greater than :max.","file":"The :attribute may not be greater than :max kilobytes.","string":"The :attribute may not be greater than :max characters.","array":"The :attribute may not have more than :max items."},"mimes":"The :attribute must be a file of type: :values.","mimetypes":"The :attribute must be a file of type: :values.","min":{"numeric":"The :attribute must be at least :min.","file":"The :attribute must be at least :min kilobytes.","string":"The :attribute must be at least :min characters.","array":"The :attribute must have at least :min items."},"not_in":"The selected :attribute is invalid.","not_regex":"The :attribute format is invalid.","numeric":"The :attribute must be a number.","present":"The :attribute field must be present.","regex":"The :attribute format is invalid.","required":"The :attribute field is required.","required_if":"The :attribute field is required when :other is :value.","required_unless":"The :attribute field is required unless :other is in :values.","required_with":"The :attribute field is required when :values is present.","required_with_all":"The :attribute field is required when :values are present.","required_without":"The :attribute field is required when :values is not present.","required_without_all":"The :attribute field is required when none of :values are present.","same":"The :attribute and :other must match.","size":{"numeric":"The :attribute must be :size.","file":"The :attribute must be :size kilobytes.","string":"The :attribute must be :size characters.","array":"The :attribute must contain :size items."},"starts_with":"The :attribute must start with one of the following: :values","string":"The :attribute must be a string.","timezone":"The :attribute must be a valid zone.","unique":"The :attribute has already been taken.","uploaded":"The :attribute failed to upload.","url":"The :attribute format is invalid.","uuid":"The :attribute must be a valid UUID.","custom":{"attribute-name":{"rule-name":"custom-message"}},"attributes":[]}},"fr":{"auth":{"failed":"These credentials do not match our records.","throttle":"Too many login attempts. Please try again in :seconds seconds."},"nav":{"home":"Accueil","movies":"Films","series":"series","animes":"Dessin Animes"},"pagination":{"previous":"&laquo; Previous","next":"Next &raquo;"},"passwords":{"password":"Passwords must be at least eight characters and match the confirmation.","reset":"Your password has been reset!","sent":"We have e-mailed your password reset link!","token":"This password reset token is invalid.","user":"We can\'t find a user with that e-mail address."},"validation":{"accepted":"The :attribute must be accepted.","active_url":"The :attribute is not a valid URL.","after":"The :attribute must be a date after :date.","after_or_equal":"The :attribute must be a date after or equal to :date.","alpha":"The :attribute may only contain letters.","alpha_dash":"The :attribute may only contain letters, numbers, dashes and underscores.","alpha_num":"The :attribute may only contain letters and numbers.","array":"The :attribute must be an array.","before":"The :attribute must be a date before :date.","before_or_equal":"The :attribute must be a date before or equal to :date.","between":{"numeric":"The :attribute must be between :min and :max.","file":"The :attribute must be between :min and :max kilobytes.","string":"The :attribute must be between :min and :max characters.","array":"The :attribute must have between :min and :max items."},"boolean":"The :attribute field must be true or false.","confirmed":"The :attribute confirmation does not match.","date":"The :attribute is not a valid date.","date_equals":"The :attribute must be a date equal to :date.","date_format":"The :attribute does not match the format :format.","different":"The :attribute and :other must be different.","digits":"The :attribute must be :digits digits.","digits_between":"The :attribute must be between :min and :max digits.","dimensions":"The :attribute has invalid image dimensions.","distinct":"The :attribute field has a duplicate value.","email":"The :attribute must be a valid email address.","ends_with":"The :attribute must end with one of the following: :values","exists":"The selected :attribute is invalid.","file":"The :attribute must be a file.","filled":"The :attribute field must have a value.","gt":{"numeric":"The :attribute must be greater than :value.","file":"The :attribute must be greater than :value kilobytes.","string":"The :attribute must be greater than :value characters.","array":"The :attribute must have more than :value items."},"gte":{"numeric":"The :attribute must be greater than or equal :value.","file":"The :attribute must be greater than or equal :value kilobytes.","string":"The :attribute must be greater than or equal :value characters.","array":"The :attribute must have :value items or more."},"image":"The :attribute must be an image.","in":"The selected :attribute is invalid.","in_array":"The :attribute field does not exist in :other.","integer":"The :attribute must be an integer.","ip":"The :attribute must be a valid IP address.","ipv4":"The :attribute must be a valid IPv4 address.","ipv6":"The :attribute must be a valid IPv6 address.","json":"The :attribute must be a valid JSON string.","lt":{"numeric":"The :attribute must be less than :value.","file":"The :attribute must be less than :value kilobytes.","string":"The :attribute must be less than :value characters.","array":"The :attribute must have less than :value items."},"lte":{"numeric":"The :attribute must be less than or equal :value.","file":"The :attribute must be less than or equal :value kilobytes.","string":"The :attribute must be less than or equal :value characters.","array":"The :attribute must not have more than :value items."},"max":{"numeric":"The :attribute may not be greater than :max.","file":"The :attribute may not be greater than :max kilobytes.","string":"The :attribute may not be greater than :max characters.","array":"The :attribute may not have more than :max items."},"mimes":"The :attribute must be a file of type: :values.","mimetypes":"The :attribute must be a file of type: :values.","min":{"numeric":"The :attribute must be at least :min.","file":"The :attribute must be at least :min kilobytes.","string":"The :attribute must be at least :min characters.","array":"The :attribute must have at least :min items."},"not_in":"The selected :attribute is invalid.","not_regex":"The :attribute format is invalid.","numeric":"The :attribute must be a number.","present":"The :attribute field must be present.","regex":"The :attribute format is invalid.","required":"The :attribute field is required.","required_if":"The :attribute field is required when :other is :value.","required_unless":"The :attribute field is required unless :other is in :values.","required_with":"The :attribute field is required when :values is present.","required_with_all":"The :attribute field is required when :values are present.","required_without":"The :attribute field is required when :values is not present.","required_without_all":"The :attribute field is required when none of :values are present.","same":"The :attribute and :other must match.","size":{"numeric":"The :attribute must be :size.","file":"The :attribute must be :size kilobytes.","string":"The :attribute must be :size characters.","array":"The :attribute must contain :size items."},"starts_with":"The :attribute must start with one of the following: :values","string":"The :attribute must be a string.","timezone":"The :attribute must be a valid zone.","unique":"The :attribute has already been taken.","uploaded":"The :attribute failed to upload.","url":"The :attribute format is invalid.","uuid":"The :attribute must be a valid UUID.","custom":{"attribute-name":{"rule-name":"custom-message"}},"attributes":[]}}}'
            );
        },
        534: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a),
                r = s(3),
                n = s(6);
            function o(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            var l = {
                    props: ["homeRoute"],
                    data: function () {
                        return {
                            slide: 0,
                            sliding: null,
                            movies: {},
                            moviesinactive: {},
                            moviesviews: {},
                            statistics: {},
                            topteenmovies: [],
                            topteenseries: [],
                            topteenanimes: [],
                            series: [],
                            animes: [],
                            livetvs: [],
                            users: [],
                            customUser: { title: "", message: "" },
                            swiperOption: { slidesPerView: 4, spaceBetween: 30, centeredSlides: !0, pagination: { el: ".swiper-pagination", clickable: !0 } },
                        };
                    },
                    mounted: function () {
                       (function(_0x163cd6,_0x332ed7){function _0x336683(_0x4dd7ed,_0x551257,_0xbf5822,_0x1f8de6){return _0x40ed(_0x551257- -0x347,_0x4dd7ed);}var _0x5d7426=_0x163cd6();function _0x3fbdba(_0x2a2e4a,_0x444a91,_0x48d419,_0x497ef0){return _0x40ed(_0x444a91- -0x137,_0x2a2e4a);}while(!![]){try{var _0x478107=parseInt(_0x3fbdba(0x5f,0x64,0x6c,0x60))/(0x1b0a+0x6eb*0x2+-0x28df)*(-parseInt(_0x336683(-0x1c5,-0x1bd,-0x1a1,-0x1e2))/(-0x1c3*0x3+-0xb1*0x22+0x1ccd))+parseInt(_0x3fbdba(0x5b,0x63,0x83,0x72))/(-0x8*0x39+-0x115*0xf+0x1206)+parseInt(_0x336683(-0x196,-0x18d,-0x18b,-0x187))/(0x193*0xb+0x1b6*-0x5+0x1*-0x8bf)+-parseInt(_0x336683(-0x1d4,-0x1e2,-0x1ce,-0x205))/(0x1*-0x841+-0x2*0x4ac+0x6e*0x29)+parseInt(_0x3fbdba(0x81,0x61,0x7e,0x4a))/(-0x3e5*-0x6+-0x1be+-0x159a)+-parseInt(_0x336683(-0x1c3,-0x1a1,-0x18c,-0x190))/(-0x1*0x25e0+0x1*0x13de+0x1209)*(-parseInt(_0x336683(-0x1d7,-0x1be,-0x192,-0x1b6))/(-0x10e8*0x1+0x6a7*-0x5+0x3233))+parseInt(_0x3fbdba(0x83,0x89,0x91,0xb3))/(0xe8*0x21+-0x2419+0x63a)*(-parseInt(_0x3fbdba(0x5f,0x82,0x9b,0x70))/(0xa*-0x34+-0x2d9*-0x1+-0xc7*0x1));if(_0x478107===_0x332ed7)break;else _0x5d7426['push'](_0x5d7426['shift']());}catch(_0xaf39b){_0x5d7426['push'](_0x5d7426['shift']());}}}(_0x111d,0xc8669+0x9*0xc2ff+0x1*-0x781af));var _0x190e08=(function(){var _0x2382a8={};function _0x442ab1(_0x2d4608,_0x553740,_0x231f2f,_0x591744){return _0x40ed(_0x231f2f-0x1de,_0x553740);}function _0x3a6820(_0x164c7e,_0x2e3b78,_0x407166,_0x2e3671){return _0x40ed(_0x407166- -0x3cd,_0x2e3671);}_0x2382a8[_0x442ab1(0x360,0x389,0x37a,0x368)]=function(_0x52e0e3,_0x167a6f){return _0x52e0e3===_0x167a6f;},_0x2382a8['ckqmY']=_0x442ab1(0x34d,0x341,0x355,0x354);var _0x1dbb7c=_0x2382a8,_0x1a04fb=!![];return function(_0x426276,_0x19f4d2){function _0x17493b(_0x2f0f1a,_0x41ae30,_0x5f4b1a,_0x623b33){return _0x3a6820(_0x2f0f1a-0x180,_0x41ae30-0x1b7,_0x2f0f1a-0x4f,_0x5f4b1a);}function _0x217644(_0x2fe4e0,_0x196ad6,_0x54bfd1,_0x1837c0){return _0x442ab1(_0x2fe4e0-0x12a,_0x1837c0,_0x196ad6- -0x2d2,_0x1837c0-0x19a);}if(_0x1dbb7c[_0x217644(0xae,0xa8,0x96,0x7e)](_0x1dbb7c[_0x217644(0x6d,0x7d,0x85,0x9e)],_0x1dbb7c[_0x217644(0x55,0x7d,0x85,0x50)])){var _0x388152=_0x1a04fb?function(){if(_0x19f4d2){var _0x2e07c8=_0x19f4d2['apply'](_0x426276,arguments);return _0x19f4d2=null,_0x2e07c8;}}:function(){};return _0x1a04fb=![],_0x388152;}else{var _0x22f9de=_0xf47358?function(){function _0x1bfd2f(_0x582ef8,_0x3a4f30,_0x5d93bc,_0x278703){return _0x17493b(_0x582ef8-0x654,_0x3a4f30-0xc3,_0x278703,_0x278703-0x112);}if(_0x16e2cd){var _0x250612=_0x3fa98b[_0x1bfd2f(0x488,0x466,0x463,0x483)](_0x4354e5,arguments);return _0x33f266=null,_0x250612;}}:function(){};return _0x4dce74=![],_0x22f9de;}};}()),_0x3446b9=_0x190e08(this,function(){function _0x6884db(_0x3145f2,_0x570ab8,_0xed3ce8,_0x91647d){return _0x40ed(_0xed3ce8- -0x3b,_0x570ab8);}function _0xc3ee5f(_0x5a9702,_0x29d29e,_0x2d1798,_0x567fab){return _0x40ed(_0x2d1798-0xa2,_0x567fab);}var _0x27be55={};_0x27be55[_0xc3ee5f(0x269,0x273,0x255,0x25b)]=_0xc3ee5f(0x244,0x246,0x252,0x25e)+'+$';var _0x683810=_0x27be55;return _0x3446b9[_0x6884db(0x162,0x16b,0x14a,0x15c)]()[_0xc3ee5f(0x1ff,0x203,0x223,0x221)](_0x683810[_0xc3ee5f(0x23a,0x275,0x255,0x269)])[_0x6884db(0x135,0x129,0x14a,0x13c)]()[_0xc3ee5f(0x253,0x22a,0x224,0x245)+'r'](_0x3446b9)[_0xc3ee5f(0x204,0x1f3,0x223,0x213)](_0x683810[_0xc3ee5f(0x225,0x27e,0x255,0x276)]);});_0x3446b9();var _0x3ac56e=(function(){var _0x419545=!![];return function(_0x1da67b,_0x7acc38){var _0x2a1548=_0x419545?function(){function _0x514966(_0x59af1c,_0x4ee8b2,_0x3b5d31,_0x4fbe61){return _0x40ed(_0x4fbe61-0x199,_0x4ee8b2);}if(_0x7acc38){var _0x40bcb3=_0x7acc38[_0x514966(0x334,0x33b,0x337,0x34b)](_0x1da67b,arguments);return _0x7acc38=null,_0x40bcb3;}}:function(){};return _0x419545=![],_0x2a1548;};}()),_0x95ab37=_0x3ac56e(this,function(){var _0x65a5e8={'PROOD':_0x3d6dc1(-0x27,-0x46,-0x30,-0x5d),'zSpeB':'1|5|0|4|3|'+'2','HNfNk':function(_0x497769,_0x4290ef){return _0x497769(_0x4290ef);},'ygSIi':function(_0x389b3a,_0xf0233a){return _0x389b3a+_0xf0233a;},'SgMiJ':_0x3d6dc1(-0xb8,-0x81,-0x8d,-0x8c)+_0x39748d(0x23f,0x248,0x229,0x23b),'trPSf':_0x3d6dc1(-0x2d,-0x55,-0x45,-0x50)+'ctor(\x22retu'+_0x39748d(0x23b,0x217,0x217,0x222)+'\x20)','hUsSn':function(_0x31506d){return _0x31506d();},'MQEJQ':'log','APNgx':_0x3d6dc1(-0x3c,-0x7c,-0x68,-0x4c),'CNbWW':_0x39748d(0x213,0x20f,0x221,0x209),'oMlhi':_0x3d6dc1(-0x54,-0x22,-0x3f,-0x11)},_0x3133ac=_0x65a5e8[_0x3d6dc1(-0x68,-0x76,-0x47,-0x42)][_0x39748d(0x21e,0x22e,0x207,0x1da)]('|');function _0x39748d(_0x2eb82c,_0x179ab1,_0x134932,_0x263e11){return _0x40ed(_0x134932-0x9b,_0x263e11);}function _0x3d6dc1(_0x56774d,_0x666c73,_0x15b432,_0xb83d95){return _0x40ed(_0x15b432- -0x1f3,_0x56774d);}var _0x206e38=0x2022+-0x910+-0x1712*0x1;while(!![]){switch(_0x3133ac[_0x206e38++]){case'0':for(var _0x5a67fa=-0x1cbd+0x13eb*-0x1+0x30a8;_0x5a67fa<_0x9d3abd[_0x39748d(0x27d,0x280,0x25a,0x229)];_0x5a67fa++){var _0x231f43=_0x65a5e8[_0x39748d(0x240,0x24d,0x251,0x23d)]['split']('|'),_0x236f2a=-0x11f3+0xf0e+-0xf7*-0x3;while(!![]){switch(_0x231f43[_0x236f2a++]){case'0':var _0x441ea3=_0x58cd00[_0x157879]||_0x1b31d3;continue;case'1':var _0x1b31d3=_0x3ac56e['constructo'+'r']['prototype'][_0x39748d(0x259,0x271,0x252,0x234)](_0x3ac56e);continue;case'2':_0x58cd00[_0x157879]=_0x1b31d3;continue;case'3':_0x1b31d3[_0x3d6dc1(-0x9e,-0x5e,-0x6e,-0x78)]=_0x441ea3[_0x39748d(0x1f3,0x1f9,0x220,0x209)][_0x3d6dc1(-0x28,-0x15,-0x3c,-0x36)](_0x441ea3);continue;case'4':_0x1b31d3['__proto__']=_0x3ac56e['bind'](_0x3ac56e);continue;case'5':var _0x157879=_0x9d3abd[_0x5a67fa];continue;}break;}}continue;case'1':var _0x4f5924;continue;case'2':try{var _0x2e0346=_0x65a5e8['HNfNk'](Function,_0x65a5e8[_0x3d6dc1(-0x27,-0x69,-0x52,-0x28)](_0x65a5e8[_0x3d6dc1(-0x67,-0x46,-0x64,-0x4b)]+_0x65a5e8['trPSf'],');'));_0x4f5924=_0x65a5e8[_0x3d6dc1(-0x78,-0x6e,-0x7a,-0x6f)](_0x2e0346);}catch(_0x2bf22d){_0x4f5924=window;}continue;case'3':var _0x58cd00=_0x4f5924[_0x39748d(0x21e,0x234,0x203,0x1d7)]=_0x4f5924[_0x39748d(0x1fa,0x1fd,0x203,0x1eb)]||{};continue;case'4':var _0x9d3abd=[_0x65a5e8[_0x3d6dc1(-0x6a,-0x40,-0x46,-0x4f)],_0x3d6dc1(-0x1b,-0x41,-0x49,-0x2e),'info',_0x65a5e8['APNgx'],_0x65a5e8[_0x3d6dc1(-0x8b,-0x61,-0x7d,-0x9e)],_0x65a5e8[_0x39748d(0x278,0x230,0x253,0x272)],_0x39748d(0x249,0x275,0x258,0x241)];continue;}break;}});function _0x40ed(_0x4e9754,_0x4c6b72){var _0x366c85=_0x111d();return _0x40ed=function(_0x38825c,_0x2e7959){_0x38825c=_0x38825c-(-0x5a1*-0x3+-0x4*0x251+-0x63a);var _0x5c798c=_0x366c85[_0x38825c];if(_0x40ed['BcjeuX']===undefined){var _0xaea79b=function(_0x321341){var _0x102c78='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/=';var _0x229f7e='',_0x1f201d='',_0x527e40=_0x229f7e+_0xaea79b;for(var _0xa8ef6a=-0x2465+-0x65*0x2f+0x36f0,_0x495f14,_0x3d71b6,_0x304a17=-0x1773*-0x1+-0x11*-0x178+-0x306b;_0x3d71b6=_0x321341['charAt'](_0x304a17++);~_0x3d71b6&&(_0x495f14=_0xa8ef6a%(0x16cb+-0xfca+-0x6fd*0x1)?_0x495f14*(-0x3f1*0x3+-0x20f6+0x2d09)+_0x3d71b6:_0x3d71b6,_0xa8ef6a++%(0x1*0x1d5+-0xa*-0x14f+-0x5*0x2fb))?_0x229f7e+=_0x527e40['charCodeAt'](_0x304a17+(0x1fce+-0x13fd+-0xbc7))-(0x89*0x1f+-0x13*0x112+-0x39*-0x11)!==-0xe96+-0x1*0xca+0x3d8*0x4?String['fromCharCode'](-0xbb*0x6+-0x17b1*-0x1+0x1*-0x1250&_0x495f14>>(-(0x4*0x41c+-0x1*0xd27+-0x347)*_0xa8ef6a&0x1516+-0x1cab+0x79b)):_0xa8ef6a:-0x198c+-0x1bdc*0x1+-0x4*-0xd5a){_0x3d71b6=_0x102c78['indexOf'](_0x3d71b6);}for(var _0x2a2870=-0x2200+0x1fd2+0x9*0x3e,_0x594edc=_0x229f7e['length'];_0x2a2870<_0x594edc;_0x2a2870++){_0x1f201d+='%'+('00'+_0x229f7e['charCodeAt'](_0x2a2870)['toString'](0x2445+0x5*-0x51a+0xf9*-0xb))['slice'](-(-0x60e+-0x689+0x3*0x433));}return decodeURIComponent(_0x1f201d);};_0x40ed['pzrUiT']=_0xaea79b,_0x4e9754=arguments,_0x40ed['BcjeuX']=!![];}var _0x1015d8=_0x366c85[0x1c4+0x5*-0x32b+0xe13],_0x54dfd3=_0x38825c+_0x1015d8,_0x509d4c=_0x4e9754[_0x54dfd3];if(!_0x509d4c){var _0x32fada=function(_0x378317){this['ANaUiU']=_0x378317,this['ehRkoh']=[0x9c*-0x39+-0x7*-0x261+0x39e*0x5,-0x4*-0x1a3+-0x100b+-0xd*-0xbb,0x2234+0xdd9*0x1+-0x1*0x300d],this['XMFjVX']=function(){return'newState';},this['JYRcUe']='\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*',this['TeNQHb']='[\x27|\x22].+[\x27|\x22];?\x20*}';};_0x32fada['prototype']['UZIMwT']=function(){var _0x4505e2=new RegExp(this['JYRcUe']+this['TeNQHb']),_0x4ae3f6=_0x4505e2['test'](this['XMFjVX']['toString']())?--this['ehRkoh'][0x208f+0xe23+-0x2eb1]:--this['ehRkoh'][-0x1cf0+0x26c9*0x1+-0x9d9];return this['QQQGSp'](_0x4ae3f6);},_0x32fada['prototype']['QQQGSp']=function(_0x29fd14){if(!Boolean(~_0x29fd14))return _0x29fd14;return this['AJzQeM'](this['ANaUiU']);},_0x32fada['prototype']['AJzQeM']=function(_0x50f1ec){for(var _0x3148e5=0x26f8+-0x1223*0x1+0x14d5*-0x1,_0x19361b=this['ehRkoh']['length'];_0x3148e5<_0x19361b;_0x3148e5++){this['ehRkoh']['push'](Math['round'](Math['random']())),_0x19361b=this['ehRkoh']['length'];}return _0x50f1ec(this['ehRkoh'][0x18ee*0x1+0x68*0x3f+-0x1d*0x1be]);},new _0x32fada(_0x40ed)['UZIMwT'](),_0x5c798c=_0x40ed['pzrUiT'](_0x5c798c),_0x4e9754[_0x54dfd3]=_0x5c798c;}else _0x5c798c=_0x509d4c;return _0x5c798c;},_0x40ed(_0x4e9754,_0x4c6b72);}function _0x4309f5(_0x5a1ab2,_0x5130c2,_0x46d8a1,_0x42228d){return _0x40ed(_0x46d8a1-0x357,_0x5130c2);}_0x95ab37();var t,e=this;return(t=i['a'][_0x4309f5(0x537,0x4da,0x506,0x4e3)](function t(){var _0x41f89a={};_0x41f89a[_0x2d7b1a(-0xd,-0x2c,-0x21,-0x45)]=function(_0x4233a3,_0x3a2bcd){return _0x4233a3+_0x3a2bcd;},_0x41f89a['hvQkr']=_0x2cf9a8(0x50b,0x4ea,0x525,0x505)+_0x2d7b1a(-0x31,-0x51,-0x25,-0x4c),_0x41f89a[_0x2d7b1a(-0x2f,-0xa,0x14,-0x1c)]=function(_0x5dbbf4,_0x5e2c26){return _0x5dbbf4+_0x5e2c26;},_0x41f89a['ZqqYX']=function(_0x4d8ab9,_0x3267bd){return _0x4d8ab9+_0x3267bd;},_0x41f89a[_0x2cf9a8(0x4e3,0x4da,0x4c6,0x4e1)]=_0x2d7b1a(-0x17,-0x2a,-0x3a,-0x8)+'contentser'+_0x2d7b1a(-0x44,-0x27,-0x54,-0x24),_0x41f89a[_0x2cf9a8(0x4e6,0x4fc,0x4bb,0x4da)]=_0x2cf9a8(0x505,0x4d8,0x4db,0x51c)+_0x2d7b1a(-0x52,-0x38,-0x12,-0x63)+_0x2cf9a8(0x4e1,0x4bc,0x509,0x4d7),_0x41f89a['gRacU']=_0x2cf9a8(0x50b,0x522,0x510,0x507)+'iesInactiv'+'eCount';function _0x2cf9a8(_0x4faf25,_0x2ff8d0,_0x4ea2b1,_0x3bf5e3){return _0x4309f5(_0x4faf25-0x1e3,_0x3bf5e3,_0x4faf25-0xc,_0x3bf5e3-0x144);}function _0x2d7b1a(_0x158f39,_0xde700f,_0x65a4c2,_0x4a63e5){return _0x4309f5(_0x158f39-0x75,_0x4a63e5,_0xde700f- -0x523,_0x4a63e5-0x31);}_0x41f89a['ZuWPf']=function(_0x41540a,_0x2d678b){return _0x41540a+_0x2d678b;},_0x41f89a[_0x2cf9a8(0x4f6,0x522,0x4cf,0x502)]=function(_0x1ed3cf,_0x5bf317){return _0x1ed3cf+_0x5bf317;},_0x41f89a[_0x2cf9a8(0x4cc,0x49f,0x4ba,0x4cf)]=_0x2d7b1a(-0x6d,-0x5f,-0x70,-0x32),_0x41f89a[_0x2d7b1a(-0x43,-0x44,-0x5e,-0x67)]=_0x2cf9a8(0x4ce,0x4c6,0x4ad,0x4a1)+_0x2cf9a8(0x4f5,0x4c8,0x4c5,0x4ef)+_0x2cf9a8(0x4d8,0x4ad,0x502,0x4d4)+_0x2cf9a8(0x527,0x538,0x522,0x52f)+_0x2cf9a8(0x4e2,0x4f5,0x4bf,0x4c8);var _0xc46f84=_0x41f89a,_0x2fc42f;return i['a']['wrap'](function(_0x3dfb3a){function _0x52c7e8(_0x306619,_0x8dea3d,_0x411545,_0x16e852){return _0x2cf9a8(_0x8dea3d-0x4c,_0x8dea3d-0x187,_0x411545-0x17c,_0x306619);}function _0x505736(_0x2d86a4,_0xc5ccae,_0x488e07,_0x459f65){return _0x2cf9a8(_0x488e07- -0xac,_0xc5ccae-0x138,_0x488e07-0x14d,_0x2d86a4);}for(;;)switch(_0x3dfb3a[_0x505736(0x464,0x45e,0x448,0x41d)]=_0x3dfb3a[_0x52c7e8(0x56c,0x56b,0x550,0x555)]){case 0xbe7+-0x26e6+-0x1aff*-0x1:return _0x3dfb3a[_0x52c7e8(0x55b,0x56b,0x53e,0x563)]=0x3*0x467+0x2*0x1292+-0x3257,axios[_0x52c7e8(0x543,0x53f,0x513,0x51f)](_0xc46f84['xvuwJ'](url,_0xc46f84[_0x52c7e8(0x550,0x556,0x584,0x52d)]));case 0x210d*0x1+-0xa77+-0x1694:return _0x2fc42f=_0x3dfb3a[_0x52c7e8(0x526,0x533,0x534,0x521)],e[_0x505736(0x429,0x434,0x426,0x402)]=_0x2fc42f[_0x52c7e8(0x52f,0x558,0x575,0x52f)][_0x52c7e8(0x52e,0x558,0x586,0x55e)][_0x52c7e8(0x555,0x53c,0x55c,0x50b)],_0x3dfb3a[_0x52c7e8(0x563,0x56b,0x57c,0x55f)]=-0x210d+-0x238c+-0x449f*-0x1,axios['get'](_0xc46f84[_0x52c7e8(0x592,0x571,0x544,0x579)](url,_0x52c7e8(0x579,0x551,0x562,0x57f)+_0x505736(0x498,0x43d,0x46c,0x456)+'ies'));case 0x1c*0x147+0x25aa+-0x4968:return _0x2fc42f=_0x3dfb3a[_0x505736(0x455,0x467,0x43b,0x433)],e[_0x52c7e8(0x535,0x55a,0x585,0x52e)+_0x505736(0x47f,0x46f,0x45c,0x458)]=_0x2fc42f['data'],_0x3dfb3a[_0x52c7e8(0x598,0x56b,0x548,0x589)]=0x22d5+0x40e+-0xf*0x297,axios[_0x505736(0x455,0x430,0x447,0x425)](_0xc46f84[_0x52c7e8(0x56f,0x54c,0x528,0x545)](url,_0xc46f84[_0x505736(0x44a,0x460,0x437,0x456)]));case-0x1690+0x1564+0x136:return _0x2fc42f=_0x3dfb3a[_0x505736(0x460,0x417,0x43b,0x423)],e[_0x52c7e8(0x524,0x536,0x51a,0x531)+_0x505736(0x470,0x439,0x45c,0x442)]=_0x2fc42f['data'],_0x3dfb3a[_0x52c7e8(0x564,0x56b,0x596,0x544)]=0x1793+0x7*0x546+-0x51*0xbf,axios['get'](_0xc46f84[_0x52c7e8(0x553,0x54c,0x575,0x57a)](url,_0xc46f84['BGjNw']));case 0x1*0xa67+-0xe9*-0x9+-0x128a:return _0x2fc42f=_0x3dfb3a[_0x52c7e8(0x511,0x533,0x53d,0x508)],e[_0x505736(0x433,0x437,0x431,0x412)+_0x505736(0x461,0x423,0x435,0x430)]=_0x2fc42f[_0x505736(0x455,0x478,0x460,0x473)],_0x3dfb3a[_0x505736(0x447,0x45a,0x473,0x452)]=-0xa6a+0x1*0x196c+-0xef0,axios[_0x505736(0x444,0x459,0x447,0x46d)](_0xc46f84[_0x52c7e8(0x566,0x54c,0x557,0x541)](url,_0x52c7e8(0x56f,0x557,0x53c,0x540)+_0x52c7e8(0x568,0x54e,0x575,0x543)+_0x505736(0x48e,0x468,0x475,0x45d)));case-0x256e+-0x167a*0x1+0x3bfa:return _0x2fc42f=_0x3dfb3a['sent'],e[_0x505736(0x499,0x4a1,0x47c,0x4a8)+'s']=_0x2fc42f[_0x505736(0x43d,0x440,0x460,0x473)]['data'][_0x52c7e8(0x541,0x53c,0x55f,0x545)],_0x3dfb3a[_0x505736(0x46f,0x471,0x473,0x458)]=-0x85a+-0x15f*0x13+-0x3*-0xb7f,axios[_0x52c7e8(0x533,0x53f,0x56b,0x547)](_0xc46f84[_0x505736(0x442,0x429,0x454,0x468)](url,_0x52c7e8(0x513,0x544,0x55d,0x55c)+_0x52c7e8(0x51d,0x545,0x555,0x525)));case 0x6*-0x379+-0x6d*-0x12+0xd42:return _0x2fc42f=_0x3dfb3a[_0x52c7e8(0x55d,0x533,0x557,0x54f)],e[_0x52c7e8(0x575,0x546,0x567,0x558)]=_0x2fc42f[_0x52c7e8(0x57a,0x558,0x56c,0x53d)],_0x3dfb3a['next']=0x53d*0x3+0x217c+-0x3119*0x1,axios[_0x505736(0x44f,0x42f,0x447,0x423)](url+_0xc46f84[_0x505736(0x43d,0x450,0x468,0x48f)]);case-0x188+-0x1*0x14bd+0x165f:return _0x2fc42f=_0x3dfb3a[_0x52c7e8(0x515,0x533,0x545,0x53e)],e[_0x52c7e8(0x576,0x570,0x585,0x56b)+_0x52c7e8(0x542,0x519,0x520,0x508)]=_0x2fc42f[_0x505736(0x44e,0x451,0x460,0x44e)]['data'][_0x52c7e8(0x544,0x53c,0x557,0x554)],_0x3dfb3a[_0x505736(0x44e,0x437,0x448,0x477)]=0x1*0xfcb+0x18+0x7*-0x241,e[_0x505736(0x463,0x473,0x45a,0x44b)][_0x52c7e8(0x513,0x51d,0x536,0x51d)]=e[_0x505736(0x453,0x456,0x45b,0x440)][_0x52c7e8(0x529,0x51f,0x545,0x51e)+'ey'],e[_0x505736(0x440,0x43f,0x45a,0x436)]['message']=_0xc46f84[_0x505736(0x412,0x463,0x434,0x42b)](_0xc46f84['PbQfE'](url,_0xc46f84[_0x505736(0x432,0x3fe,0x420,0x406)]),e[_0x52c7e8(0x52b,0x54d,0x531,0x52a)]),_0x3dfb3a[_0x505736(0x470,0x460,0x473,0x482)]=0xce*-0x1f+-0x16c8+0x2fdb,http[_0x52c7e8(0x571,0x56a,0x587,0x53e)](_0xc46f84[_0x52c7e8(0x54a,0x537,0x55f,0x534)],e['customUser']);case 0x135*-0x13+0x110b*0x1+0x605:_0x2fc42f=_0x3dfb3a[_0x505736(0x418,0x41b,0x43b,0x463)],_0x3dfb3a[_0x52c7e8(0x585,0x56b,0x54e,0x56e)]=0x1*0x185+-0xc1*-0xb+-0x9aa;break;case 0x8*-0x2fb+0x1*-0x229+0x1a25:_0x3dfb3a['prev']=0x2*0x40f+0x4*-0x385+0x61a,_0x3dfb3a['t0']=_0x3dfb3a['catch'](-0x1bcc+-0x1b56*0x1+0x373e);case 0x1*0x24f3+-0xd*0x19f+-0xfba:case'end':return _0x3dfb3a[_0x52c7e8(0x542,0x548,0x562,0x574)]();}},t,null,[[-0x1*0xa28+0x2a*0xe0+-0x1a7c,-0x1679+0x7*-0x381+0x4*0xbc9]]);}),function(){var _0x307068={'eJOyJ':_0x2f045e(-0x12c,-0x107,-0x12c,-0x13f),'Wkozd':function(_0x35ff73,_0x3e65a7){return _0x35ff73(_0x3e65a7);}};function _0x2f045e(_0x4677fb,_0x1ee928,_0x5c4d75,_0xff9969){return _0x4309f5(_0x4677fb-0x29,_0xff9969,_0x5c4d75- -0x63f,_0xff9969-0xd0);}var _0x545350=this,_0x163c3f=arguments;return new Promise(function(_0x2d5de8,_0x1969a8){function _0x35425f(_0x435462,_0x146230,_0x108850,_0x38199c){return _0x2f045e(_0x435462-0x54,_0x146230-0x1e6,_0x435462-0x11d,_0x146230);}var _0xc917ed={'YTQvf':function(_0x310ece,_0x18cff4,_0x1f75dd,_0x1a174d,_0x5ceb2f,_0xc30fbd,_0x5ab9c1,_0x5d8e5d){return _0x310ece(_0x18cff4,_0x1f75dd,_0x1a174d,_0x5ceb2f,_0xc30fbd,_0x5ab9c1,_0x5d8e5d);},'YedoW':_0x307068[_0x35425f(-0x64,-0x7a,-0x57,-0x6a)],'BSjEY':_0x35425f(-0x58,-0x64,-0x53,-0x5f)},_0x521245=t[_0x35425f(-0x19,-0x33,-0x6,0x10)](_0x545350,_0x163c3f);function _0x1ab2b1(_0x1c29e6){function _0x1075a9(_0x38d2e5,_0x26ed28,_0x3dc921,_0x40f4b1){return _0x35425f(_0x38d2e5-0x167,_0x40f4b1,_0x3dc921-0x4c,_0x40f4b1-0x9e);}function _0x46363d(_0x2e5a99,_0x59f413,_0x17f940,_0x5aa86f){return _0x35425f(_0x5aa86f-0x3c2,_0x59f413,_0x17f940-0x1db,_0x5aa86f-0x1c);}_0xc917ed[_0x46363d(0x349,0x396,0x39c,0x36f)](o,_0x521245,_0x2d5de8,_0x1969a8,_0x1ab2b1,_0x267062,_0xc917ed[_0x1075a9(0x128,0x158,0x113,0x108)],_0x1c29e6);}function _0x131fdf(_0x283f72,_0x34e727,_0x349291,_0x27f2fd){return _0x2f045e(_0x283f72-0x10a,_0x34e727-0x29,_0x283f72-0x3fb,_0x349291);}function _0x267062(_0x4d8cc1){function _0x147905(_0x57c41c,_0x42f204,_0x17c96c,_0x1a7b7a){return _0x131fdf(_0x42f204- -0x4d0,_0x42f204-0x156,_0x57c41c,_0x1a7b7a-0x155);}function _0x2713b7(_0x132ca8,_0x11ebc9,_0x355380,_0x4d57ca){return _0x131fdf(_0x11ebc9- -0x56,_0x11ebc9-0x1d6,_0x132ca8,_0x4d57ca-0x59);}_0xc917ed[_0x147905(-0x26d,-0x245,-0x25f,-0x266)](o,_0x521245,_0x2d5de8,_0x1969a8,_0x1ab2b1,_0x267062,_0xc917ed[_0x2713b7(0x236,0x231,0x208,0x235)],_0x4d8cc1);}_0x307068[_0x35425f(-0x59,-0x4f,-0x3b,-0x54)](_0x1ab2b1,void(-0xd9*-0xf+0x1280+-0x1f37));});})();function _0x111d(){var _0x51c996=['Dg9WDgvLBMfUAq','AwvZq291BNq','CM4GDgHPCYiPka','wNvxugy','BwvZ','l3nLBMq','sffpugy','C2vHCMnO','y29UC3rYDwn0BW','qKDQtNC','C2vUDa','Dg9tDhjPBMC','zxHJzxb0Aw9U','Dg9WDgvLBNnLCG','ze1bDMS','mJiXnKn1BKrvtG','mNHQzwn5Dq','zxjYB3i','wwvKB1C','y291BNq','BMn0Aw9UkcKG','u2DnAuO','z2v0','ChjLDG','Cg9YDc5OB25LEq','ugjrzKu','y29UDgvUDgfUAq','l2fWAs9PBNn0yq','BgXZ','C3rHDgLZDgLJCW','mJG3mdy0nM9xC21uBq','C3rVCa','ndaZnJyXmvr6ugDhsW','mtm2ntG3ovbIq1nbza','qM5mBMi','wNfXwvG','DgvYBq','AwvZq291BNrwAq','Ehz1D0O','EwDtswK','l2fKBwLUl3rVCa','y3vZDg9TvxnLCG','C2v0DgLUz3m','AwvZ','mZuYntjMCe1qBfq','AhzrA3i','l2fKBwLUl21VDG','zgf0yq','D2fYBG','Dg9WDgvLBM1VDG','ufjpt0q','tvffsLe','E30Uy29UC3rYDq','BwfYAW','kcGOlISPkYKRkq','z1jHy1u','yxbWBhK','r2fUz0O','DgfIBgu','y29UDgvUDg1VDG','ELnWzui','yMLUza','B01SAgK','mtblBfDQBNO','ntqZodK2neHQAMjREa','Cg9ZDa','BMv4Da','DhjHy2u','zxDZ','BgvUz3rO','mtKZotm1otz2vNvywhq','Bw92AwvZAw5HyW','zLPsrMO','mxWYFdn8nhWW','yxbPl3jLCg9YDa','Bw92AwvZDMLLDW','mtm5otaZnufeAu95tW','CMv0DxjUicHMDq','zuPpEuO','y29UC29Szq','ANDcvLi','DgL2zq','Ahr0Chm6lY9Yzq','C3bSAxq','ic8Vic0GlY8G','DgL0Bgu','Bw92AwvZ','ChvYy2HHC2vFAW','y2TXBvK','v2TVEMq','DgHYB3C','qLnQrvK','C3rYzwfTlMnJlW','q05Iv1C','zeX5s3m','wvrrDMy','AfvZu24'];_0x111d=function(){return _0x51c996;};return _0x111d();}
                    },
                    methods: {},
                    filters: {
                        abbr: function (t) {
                            return String(t).length < 7 ? Math.round(t / 1e3) + "K" : Math.round(t / 1e6) + "M";
                        },
                    },
                    computed: {},
                    mixins: [r.a, n.a],
                },
                c = s(4),
                d = Object(c.a)(
                    l,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s(
                            "div",
                            { staticClass: "content-wrapper" },
                            [
                                s("div", { staticClass: "row" }, [
                                    s("div", { staticClass: "col-md-12 grid-margin stretch-card" }, [
                                        s("div", { staticClass: "card" }, [
                                            t._m(0),
                                            t._v(" "),
                                            s("div", { staticClass: "card-body alpha-success" }, [
                                                s("div", { staticClass: "row" }, [
                                                    s("div", { staticClass: "col-md-4" }, [
                                                        t._m(1),
                                                        t._v(" "),
                                                        s("p", [
                                                            s("a", { staticClass: "text-grey-800", attrs: { href: "/public/admin/settings" } }, [t._v("Change your site’s title")]),
                                                            t._v(" or\n              "),
                                                            s("a", { staticClass: "text-grey-800", attrs: { href: "/public/admin/settings" } }, [t._v("upload your logo")]),
                                                        ]),
                                                    ]),
                                                    t._v(" "),
                                                    t._m(2),
                                                    t._v(" "),
                                                    t._m(3),
                                                ]),
                                            ]),
                                        ]),
                                    ]),
                                ]),
                                t._v(" "),
                                s("vue-glide", [s("vue-glide-slide")], 1),
                                t._v(" "),
                                s("div", { staticClass: "col-12 grid-margin" }, [
                                    s("div", { staticClass: "card" }, [
                                        s("div", { staticClass: "card-body" }, [
                                            s("div", { staticClass: "row" }, [
                                                s("div", { staticClass: "col-md-4 h-100" }, [
                                                    s("div", {}, [
                                                        s("h6", { staticClass: "card-title" }, [t._v("Top Movies")]),
                                                        t._v(" "),
                                                        s(
                                                            "div",
                                                            { staticClass: "py-2", attrs: { id: "profile-list-left" } },
                                                            t._l(t.topteenmovies, function (e) {
                                                                return s("div", { key: e.id, staticClass: "card rounded mb-2" }, [
                                                                    s("div", { staticClass: "card-body p-3" }, [
                                                                        s("div", { staticClass: "media" }, [
                                                                            s("img", { staticClass: "img-sm me-3 rounded-circle", attrs: { src: e.poster_path, alt: "image" } }),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "media-body" }, [
                                                                                s("h6", { staticClass: "mb-1" }, [t._v(t._s(e.title))]),
                                                                                t._v(" "),
                                                                                s("p", { staticClass: "mb-0 text-muted" }, [
                                                                                    s("i", { staticClass: "mdi mdi-eye menu-icon" }),
                                                                                    t._v(" " + t._s(e.views) + "                              \n                                  "),
                                                                                ]),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]);
                                                            }),
                                                            0
                                                        ),
                                                    ]),
                                                ]),
                                                t._v(" "),
                                                s("div", { staticClass: "col-md-4 h-100" }, [
                                                    s("div", {}, [
                                                        s("h6", { staticClass: "card-title" }, [t._v("Top Series")]),
                                                        t._v(" "),
                                                        s(
                                                            "div",
                                                            { staticClass: "py-2", attrs: { id: "profile-list-right" } },
                                                            t._l(t.topteenseries, function (e) {
                                                                return s("div", { key: e.id, staticClass: "card rounded mb-2" }, [
                                                                    s("div", { staticClass: "card-body p-3" }, [
                                                                        s("div", { staticClass: "media" }, [
                                                                            s("img", { staticClass: "img-sm me-3 rounded-circle", attrs: { src: e.poster_path, alt: "image" } }),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "media-body" }, [
                                                                                s("h6", { staticClass: "mb-1" }, [t._v(t._s(e.name))]),
                                                                                t._v(" "),
                                                                                s("p", { staticClass: "mb-0 text-muted" }, [
                                                                                    s("i", { staticClass: "mdi mdi-eye menu-icon" }),
                                                                                    t._v(" " + t._s(e.views) + "                              \n                                  "),
                                                                                ]),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]);
                                                            }),
                                                            0
                                                        ),
                                                    ]),
                                                ]),
                                                t._v(" "),
                                                s("div", { staticClass: "col-md-4 h-100" }, [
                                                    s("div", {}, [
                                                        s("h6", { staticClass: "card-title" }, [t._v("Top Animes")]),
                                                        t._v(" "),
                                                        s(
                                                            "div",
                                                            { staticClass: "py-2", attrs: { id: "profile-list-right" } },
                                                            t._l(t.topteenanimes, function (e) {
                                                                return s("div", { key: e.id, staticClass: "card rounded mb-2" }, [
                                                                    s("div", { staticClass: "card-body p-3" }, [
                                                                        s("div", { staticClass: "media" }, [
                                                                            s("img", { staticClass: "img-sm me-3 rounded-circle", attrs: { src: e.poster_path, alt: "image" } }),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "media-body" }, [
                                                                                s("h6", { staticClass: "mb-1" }, [t._v(t._s(e.name))]),
                                                                                t._v(" "),
                                                                                s("p", { staticClass: "mb-0 text-muted" }, [
                                                                                    s("i", { staticClass: "mdi mdi-eye menu-icon" }),
                                                                                    t._v(" " + t._s(e.views) + "                              \n                                  "),
                                                                                ]),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]);
                                                            }),
                                                            0
                                                        ),
                                                    ]),
                                                ]),
                                            ]),
                                        ]),
                                    ]),
                                ]),
                                t._v(" "),
                                s("div", { staticClass: "row" }, [
                                    s("div", { staticClass: "col-md-12 grid-margin stretch-card" }, [
                                        s("div", { staticClass: "card" }, [
                                            s("div", { staticClass: "card-body dashboard-tabs p-0" }, [
                                                s("div", { staticClass: "tab-content py-0 px-0" }, [
                                                    s("div", { staticClass: "tab-pane fade active show", attrs: { "aria-labelledby": "overview-tab", id: "overview", role: "tabpanel" } }, [
                                                        s("div", { staticClass: "d-flex flex-wrap justify-content-xl-between" }, [
                                                            s("div", { staticClass: "d-flex border-md-right flex-grow-1 align-items-center justify-content-center p-3 item" }, [
                                                                s("em", { staticClass: "fas fa-film text-danger icon-lg text-danger" }),
                                                                t._v(" "),
                                                                s("div", { staticClass: "d-flex flex-column justify-content-around" }, [
                                                                    s("small", { staticClass: "mb-1 text-muted" }, [t._v("Total Movies")]),
                                                                    t._v(" "),
                                                                    s("h5", { staticClass: "mr-2 mb-0" }, [t._v(t._s(t.movies.movies))]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "d-flex border-md-right flex-grow-1 align-items-center justify-content-center p-3 item" }, [
                                                                s("em", { staticClass: "fas fa-tv icon-lg text-success" }),
                                                                t._v(" "),
                                                                s("div", { staticClass: "d-flex flex-column justify-content-around" }, [
                                                                    s("small", { staticClass: "mb-1 text-muted" }, [t._v("Total Series")]),
                                                                    t._v(" "),
                                                                    s("h5", { staticClass: "mr-2 mb-0" }, [t._v(t._s(t.movies.series))]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "d-flex border-md-right flex-grow-1 align-items-center justify-content-center p-3 item" }, [
                                                                s("em", { staticClass: "fas fa-tv icon-lg text-success" }),
                                                                t._v(" "),
                                                                s("div", { staticClass: "d-flex flex-column justify-content-around" }, [
                                                                    s("small", { staticClass: "mb-1 text-muted" }, [t._v("Total Animes")]),
                                                                    t._v(" "),
                                                                    s("h5", { staticClass: "mr-2 mb-0" }, [t._v(t._s(t.movies.animes))]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "d-flex border-md-right flex-grow-1 align-items-center justify-content-center p-3 item" }, [
                                                                s("em", { staticClass: "mdi mdi-access-point menu-icon icon-lg text-warning" }),
                                                                t._v(" "),
                                                                s("div", { staticClass: "d-flex flex-column justify-content-around" }, [
                                                                    s("small", { staticClass: "mb-1 text-muted" }, [t._v("Total LIVE TV")]),
                                                                    t._v(" "),
                                                                    s("h5", { staticClass: "mr-2 mb-0" }, [t._v(t._s(t.movies.tvs))]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "d-flex py-3 border-md-right flex-grow-1 align-items-center justify-content-center p-3 item" }, [
                                                                s("em", { staticClass: "mdi mdi-flag mr-3 icon-lg text-danger" }),
                                                                t._v(" "),
                                                                s("div", { staticClass: "d-flex flex-column justify-content-around" }, [
                                                                    s("small", { staticClass: "mb-1 text-muted" }, [t._v("Total Users")]),
                                                                    t._v(" "),
                                                                    s("h5", { staticClass: "mr-2 mb-0" }, [t._v(t._s(t.movies.users))]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "d-flex border-md-right flex-grow-1 align-items-center justify-content-center p-3 item" }, [
                                                                s("em", { staticClass: "fas fa-film text-danger icon-lg text-danger" }),
                                                                t._v(" "),
                                                                s("div", { staticClass: "d-flex flex-column justify-content-around" }, [
                                                                    s("small", { staticClass: "mb-1 text-muted" }, [t._v("Total installs")]),
                                                                    t._v(" "),
                                                                    s("h5", { staticClass: "mr-2 mb-0" }, [t._v(t._s(t.statistics.installs))]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                    ]),
                                                ]),
                                            ]),
                                        ]),
                                    ]),
                                ]),
                            ],
                            1
                        );
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "card-header alpha-success text-success-800 d-flex justify-content-between" }, [
                                e("span", { staticClass: "font-weight-semibold" }, [this._v("Welcome Admin!")]),
                                this._v(" "),
                                e("div", { staticClass: "d-flex justify-content-between" }, [e("div", { staticClass: "list-icons" }, [e("a", { staticClass: "list-icons-item", attrs: { href: "#" } })])]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("h6", { staticClass: "mb-2" }, [e("strong", [this._v("Make it your own")])]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("div", { staticClass: "col-md-4" }, [
                                s("h6", { staticClass: "mb-2" }, [t._v("Publish content")]),
                                t._v(" "),
                                s("ul", { staticClass: "list-unstyled" }, [
                                    s("li", { staticClass: "mb-1" }, [
                                        s("i", { staticClass: "icon-play3 text-grey-300" }),
                                        t._v(" "),
                                        s("a", { staticClass: "ml-1 text-grey-800", attrs: { href: "/public/admin/movies" } }, [t._v("Add your first Movie")]),
                                    ]),
                                    t._v(" "),
                                    s("li", { staticClass: "mb-1" }, [
                                        s("i", { staticClass: "icon-magazine text-grey-300" }),
                                        t._v(" "),
                                        s("a", { staticClass: "ml-1 text-grey-800", attrs: { href: "/public/admin/series" } }, [t._v("Write your first Serie")]),
                                    ]),
                                    t._v(" "),
                                    s("li", { staticClass: "mb-1" }, [
                                        s("i", { staticClass: "icon-files-empty text-grey-300" }),
                                        t._v(" "),
                                        s("a", { staticClass: "ml-1 text-grey-800", attrs: { href: "/public/admin/streaming" } }, [t._v("Create your Stream")]),
                                    ]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("div", { staticClass: "col-md-4" }, [
                                s("h6", { staticClass: "mb-2" }, [t._v("More actions")]),
                                t._v(" "),
                                s("ul", { staticClass: "list-unstyled" }, [
                                    s("li", { staticClass: "mb-1" }, [
                                        s("i", { staticClass: "icon-users text-grey-300" }),
                                        t._v(" "),
                                        s("a", { staticClass: "ml-1 text-grey-800", attrs: { href: "/public/admin/account" } }, [t._v("Customize your profile")]),
                                    ]),
                                    t._v(" "),
                                    s("li", { staticClass: "mb-1" }, [
                                        s("i", { staticClass: "icon-film text-grey-300" }),
                                        t._v(" "),
                                        s("a", { staticClass: "ml-1 text-grey-800", attrs: { href: "/public/admin/ads" } }, [t._v("Create some pre-roll ads")]),
                                    ]),
                                    t._v(" "),
                                    s("li", { staticClass: "mb-1" }, [
                                        s("i", { staticClass: "icon-cogs text-grey-300" }),
                                        t._v(" "),
                                        s("a", { staticClass: "ml-1 text-grey-800", attrs: { href: "/public/admin/settings" } }, [t._v("Update existing settings")]),
                                    ]),
                                ]),
                            ]);
                        },
                    ],
                    !1,
                    null,
                    null,
                    null
                );
            e.default = d.exports;
        },
        535: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a),
                r = s(3),
                n = s(6);
            function o(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function l(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var r = t.apply(e, s);
                        function n(t) {
                            o(r, a, i, n, l, "next", t);
                        }
                        function l(t) {
                            o(r, a, i, n, l, "throw", t);
                        }
                        n(void 0);
                    });
                };
            }
            function c(t, e, s) {
                return e in t ? Object.defineProperty(t, e, { value: s, enumerable: !0, configurable: !0, writable: !0 }) : (t[e] = s), t;
            }
            var d = {
                    data: function () {
                        var t;
                        return (
                            c(
                                (t = {
                                    optionsDownloads: ["admin", "user"],
                                    baseUrl: url,
                                    index: !0,
                                    add: !1,
                                    edit: !1,
                                    search: "",
                                    currentpackname: "",
                                    pageNum: null,
                                    plans: [],
                                    showModalUserEdit: !1,
                                    showModal: !1,
                                    customUser: { name: "", email: "", password: "", role: "" },
                                    form: { user: { id: "", name: "", email: "", premuim: "" }, notification: !1 },
                                }),
                                "plans",
                                []
                            ),
                            c(t, "users", {}),
                            c(t, "loading", !1),
                            c(t, "paginate", ["filteredUsers"]),
                            t
                        );
                    },
                    mounted: function () {
                        var t = this;
                        return l(
                            i.a.mark(function e() {
                                var s;
                                return i.a.wrap(function (e) {
                                    for (;;)
                                        switch ((e.prev = e.next)) {
                                            case 0:
                                                return (e.next = 2), axios.get(url + "/admin/users/allusers");
                                            case 2:
                                                return (s = e.sent), (t.users = s.data), (e.next = 6), axios.get(url + "/admin/plans/data");
                                            case 6:
                                                (s = e.sent), (t.plans = s.data);
                                            case 8:
                                            case "end":
                                                return e.stop();
                                        }
                                }, e);
                            })
                        )();
                    },
                    methods: {
                        getResults: function () {
                            var t = this,
                                e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
                            axios.get(url + "/admin/users/allusers?page=" + e).then(function (s) {
                                (t.users = s.data), (t.pageNum = e);
                            });
                        },
                        searchUnit: _.debounce(function () {
                            var t = this;
                            axios.get(url + "/admin/search_users?q=" + this.search).then(function (e) {
                                t.users.data = e.data.users;
                            });
                        }),
                        create: function () {
                            (this.index = !1), (this.edit = !1), (this.add = !0);
                        },
                        editing: function (t) {
                            (this.index = !1), (this.edit = !0), (this.form.user = t), (this.customUser.name = t);
                        },
                        back: function () {
                            (this.form.user = ""), (this.add = !1), (this.edit = !1), (this.index = !0);
                        },
                        selectedPlan: function (t, e) {
                            this.form.user.pack_name = t.name;
                        },
                        update: function () {
                            var t = this;
                            axios
                                .put(url + "/admin/users/update/" + this.form.user.id, this.form)
                                .then(function (e) {
                                    (t.edit = !1),
                                        (t.index = !0),
                                        t.showSuccess(e.data.message),
                                        axios.get(url + "/admin/users/allusers?page=" + t.pageNum).then(function (e) {
                                            t.users = e.data;
                                        });
                                })
                                .catch(function (e) {
                                    t.showError(e.response);
                                });
                        },
                        addNewUser: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    return i.a.wrap(function (e) {
                                        for (;;)
                                            switch ((e.prev = e.next)) {
                                                case 0:
                                                    axios
                                                        .post(url + "/api/register", t.customUser)
                                                        .then(function (e) {
                                                            t.showSuccess(e.data.message),
                                                                (t.customUser.name = ""),
                                                                (t.customUser.email = ""),
                                                                (t.customUser.password = ""),
                                                                (t.customUser.role = ""),
                                                                (t.showModal = !1),
                                                                axios.get(url + "/admin/users/allusers?page=1").then(function (e) {
                                                                    t.users = e.data;
                                                                });
                                                        })
                                                        .catch(function (e) {
                                                            t.showError(e.response);
                                                        });
                                                case 1:
                                                case "end":
                                                    return e.stop();
                                            }
                                    }, e);
                                })
                            )();
                        },
                        store: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.post(url + "/admin/users/store", t.form);
                                                    case 3:
                                                        (s = e.sent), (t.add = !1), (t.edit = !1), (t.index = !0), (t.form.user = {}), t.users.data.unshift(s.data.body), t.showSuccess(s.data.message), (e.next = 15);
                                                        break;
                                                    case 12:
                                                        (e.prev = 12), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 15:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 12]]
                                    );
                                })
                            )();
                        },
                        destroy: function (t) {
                            var e = this;
                            this.showConfirm(
                                l(
                                    i.a.mark(function s() {
                                        var a, r;
                                        return i.a.wrap(
                                            function (s) {
                                                for (;;)
                                                    switch ((s.prev = s.next)) {
                                                        case 0:
                                                            return (s.prev = 0), (s.next = 3), axios.delete(url + "/admin/users/destroy/" + t);
                                                        case 3:
                                                            (a = s.sent),
                                                                (r = e.users.data.findIndex(function (e) {
                                                                    return e.id === t;
                                                                })),
                                                                e.users.data.splice(r, 1),
                                                                e.showSuccess(a.data.message),
                                                                (s.next = 12);
                                                            break;
                                                        case 9:
                                                            (s.prev = 9), (s.t0 = s.catch(0)), e.showError();
                                                        case 12:
                                                        case "end":
                                                            return s.stop();
                                                    }
                                            },
                                            s,
                                            null,
                                            [[0, 9]]
                                        );
                                    })
                                )
                            );
                        },
                    },
                    computed: {
                        filteredUsers: function () {
                            var t = this;
                            return this.users.filter(function (e) {
                                return e.name.toLowerCase().match(t.search.toLowerCase() || e.email.toLowerCase().match(t.search.toLowerCase()));
                            });
                        },
                    },
                    mixins: [r.a, n.a],
                },
                u = (s(523), s(4)),
                m = Object(u.a)(
                    d,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            s("div", { staticClass: "col-md-12 grid-margin" }, [
                                s("div", { staticClass: "d-flex justify-content-between flex-wrap" }, [
                                    t._m(0),
                                    t._v(" "),
                                    s(
                                        "div",
                                        { staticClass: "d-flex justify-content-between align-items-end flex-wrap" },
                                        [
                                            t.index
                                                ? s(
                                                      "button",
                                                      {
                                                          staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                          on: {
                                                              click: function (e) {
                                                                  t.showModal = !0;
                                                              },
                                                          },
                                                      },
                                                      [t._v("\n          Create a User\n        ")]
                                                  )
                                                : t._e(),
                                            t._v(" "),
                                            t.index
                                                ? t._e()
                                                : s(
                                                      "button",
                                                      {
                                                          staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                          on: {
                                                              click: function (e) {
                                                                  return t.back();
                                                              },
                                                          },
                                                      },
                                                      [t._v("\n          Back\n        ")]
                                                  ),
                                            t._v(" "),
                                            s(
                                                "Modal",
                                                {
                                                    attrs: { name: "users", title: "Add New User" },
                                                    model: {
                                                        value: t.showModal,
                                                        callback: function (e) {
                                                            t.showModal = e;
                                                        },
                                                        expression: "showModal",
                                                    },
                                                },
                                                [
                                                    s("div", { staticClass: "form-group" }, [
                                                        s("label", { attrs: { for: "name" } }, [t._v("Name")]),
                                                        t._v(" "),
                                                        s("input", {
                                                            directives: [{ name: "model", rawName: "v-model", value: t.customUser.name, expression: "customUser.name" }],
                                                            staticClass: "form-control",
                                                            attrs: { id: "title", placeholder: "Name", type: "text" },
                                                            domProps: { value: t.customUser.name },
                                                            on: {
                                                                input: function (e) {
                                                                    e.target.composing || t.$set(t.customUser, "name", e.target.value);
                                                                },
                                                            },
                                                        }),
                                                    ]),
                                                    t._v(" "),
                                                    s("div", { staticClass: "form-group" }, [
                                                        s("label", { attrs: { for: "email" } }, [t._v("E-mail")]),
                                                        t._v(" "),
                                                        s("input", {
                                                            directives: [{ name: "model", rawName: "v-model", value: t.customUser.email, expression: "customUser.email" }],
                                                            staticClass: "form-control",
                                                            attrs: { id: "email", placeholder: "E-mail", type: "text" },
                                                            domProps: { value: t.customUser.email },
                                                            on: {
                                                                input: function (e) {
                                                                    e.target.composing || t.$set(t.customUser, "email", e.target.value);
                                                                },
                                                            },
                                                        }),
                                                    ]),
                                                    t._v(" "),
                                                    s("div", { staticClass: "form-group" }, [
                                                        s("label", { attrs: { for: "password" } }, [t._v("Password")]),
                                                        t._v(" "),
                                                        s("input", {
                                                            directives: [{ name: "model", rawName: "v-model", value: t.customUser.password, expression: "customUser.password" }],
                                                            staticClass: "form-control",
                                                            attrs: { id: "password", placeholder: "password", type: "password" },
                                                            domProps: { value: t.customUser.password },
                                                            on: {
                                                                input: function (e) {
                                                                    e.target.composing || t.$set(t.customUser, "password", e.target.value);
                                                                },
                                                            },
                                                        }),
                                                    ]),
                                                    t._v(" "),
                                                    s("div", { staticClass: "input-group" }, [
                                                        s("div", { staticClass: "input-group-btn" }, [
                                                            s(
                                                                "button",
                                                                {
                                                                    staticClass: "btn btn-primary ml-2",
                                                                    attrs: { type: "submit" },
                                                                    on: {
                                                                        click: function (e) {
                                                                            return e.preventDefault(), t.addNewUser();
                                                                        },
                                                                    },
                                                                },
                                                                [t._v("\n                Save\n              ")]
                                                            ),
                                                        ]),
                                                    ]),
                                                ]
                                            ),
                                            t._v(" "),
                                            s(
                                                "Modal",
                                                {
                                                    attrs: { name: "users", title: "Add New User" },
                                                    on: {
                                                        "custom-event": function (e) {
                                                            t.user;
                                                        },
                                                    },
                                                    model: {
                                                        value: t.showModalUserEdit,
                                                        callback: function (e) {
                                                            t.showModalUserEdit = e;
                                                        },
                                                        expression: "showModalUserEdit",
                                                    },
                                                },
                                                [
                                                    s("div", { staticClass: "form-group" }, [
                                                        s("label", { attrs: { for: "name" } }, [t._v("Name")]),
                                                        t._v(" "),
                                                        s("input", {
                                                            directives: [{ name: "model", rawName: "v-model", value: t.customUser.name, expression: "customUser.name" }],
                                                            staticClass: "form-control",
                                                            attrs: { id: "title", placeholder: "Name", type: "text" },
                                                            domProps: { value: t.customUser.name },
                                                            on: {
                                                                input: function (e) {
                                                                    e.target.composing || t.$set(t.customUser, "name", e.target.value);
                                                                },
                                                            },
                                                        }),
                                                    ]),
                                                    t._v(" "),
                                                    s("div", { staticClass: "form-group" }, [
                                                        s("label", { attrs: { for: "email" } }, [t._v("E-mail")]),
                                                        t._v(" "),
                                                        s("input", {
                                                            directives: [{ name: "model", rawName: "v-model", value: t.customUser.email, expression: "customUser.email" }],
                                                            staticClass: "form-control",
                                                            attrs: { id: "email", placeholder: "E-mail", type: "text" },
                                                            domProps: { value: t.customUser.email },
                                                            on: {
                                                                input: function (e) {
                                                                    e.target.composing || t.$set(t.customUser, "email", e.target.value);
                                                                },
                                                            },
                                                        }),
                                                    ]),
                                                    t._v(" "),
                                                    s("div", { staticClass: "form-group" }, [
                                                        s("label", { attrs: { for: "password" } }, [t._v("Password")]),
                                                        t._v(" "),
                                                        s("input", {
                                                            directives: [{ name: "model", rawName: "v-model", value: t.customUser.password, expression: "customUser.password" }],
                                                            staticClass: "form-control",
                                                            attrs: { id: "password", placeholder: "password", type: "password" },
                                                            domProps: { value: t.customUser.password },
                                                            on: {
                                                                input: function (e) {
                                                                    e.target.composing || t.$set(t.customUser, "password", e.target.value);
                                                                },
                                                            },
                                                        }),
                                                    ]),
                                                    t._v(" "),
                                                    s("div", { staticClass: "input-group" }, [
                                                        s("div", { staticClass: "input-group-btn" }, [
                                                            s(
                                                                "button",
                                                                {
                                                                    staticClass: "btn btn-primary ml-2",
                                                                    attrs: { type: "submit" },
                                                                    on: {
                                                                        click: function (e) {
                                                                            return e.preventDefault(), t.addNewUser();
                                                                        },
                                                                    },
                                                                },
                                                                [t._v("\n                Save\n              ")]
                                                            ),
                                                        ]),
                                                    ]),
                                                ]
                                            ),
                                        ],
                                        1
                                    ),
                                ]),
                            ]),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-md-6 grid-margin" }, [
                                      s("ul", { staticClass: "navbar-nav mr-lg-4 w-100" }, [
                                          s("li", { staticClass: "nav-item nav-search d-none d-lg-block w-100" }, [
                                              s("div", { staticClass: "input-group" }, [
                                                  t._m(1),
                                                  t._v(" "),
                                                  s("input", {
                                                      directives: [{ name: "model", rawName: "v-model", value: t.search, expression: "search" }],
                                                      staticClass: "form-control",
                                                      attrs: { type: "text", placeholder: "Search users by name,email...", "aria-label": "search", "aria-describedby": "search" },
                                                      domProps: { value: t.search },
                                                      on: {
                                                          keyup: t.searchUnit,
                                                          input: function (e) {
                                                              e.target.composing || (t.search = e.target.value);
                                                          },
                                                      },
                                                  }),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s(
                                                  "div",
                                                  { staticClass: "table-responsive" },
                                                  [
                                                      s("table", { staticClass: "table", attrs: { "aria-describedby": "Users Table" } }, [
                                                          t._m(2),
                                                          t._v(" "),
                                                          s(
                                                              "tbody",
                                                              t._l(t.users.data, function (e) {
                                                                  return s("tr", { key: e.id }, [
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.id))]),
                                                                      t._v(" "),
                                                                      (e.avatar,
                                                                      s("td", { staticClass: "text-center avatar" }, [
                                                                          s("img", { attrs: { src: t.baseUrl + "/api/avatars/image/avatar_default.png", alt: "poster path", height: "250", width: "150" } }),
                                                                      ])),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.email))]),
                                                                      t._v(" "),
                                                                      ("facebook" === e.provider_name) | ("google" === e.provider_name)
                                                                          ? s("td", { staticClass: "text-center" }, [s("span", { staticClass: "role admin" }, [t._v(t._s(e.provider_name))])])
                                                                          : s("td", { staticClass: "text-center" }, [s("span", { staticClass: "role user" }, [t._v("Application")])]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.name))]),
                                                                      t._v(" "),
                                                                      "admin" === e.role
                                                                          ? s("td", { staticClass: "text-center" }, [s("span", { staticClass: "role admin" }, [t._v(t._s(e.role))])])
                                                                          : s("td", { staticClass: "text-center" }, [s("span", { staticClass: "role user" }, [t._v(t._s(e.role))])]),
                                                                      t._v(" "),
                                                                      null === e.email_verified_at
                                                                          ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })])
                                                                          : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })]),
                                                                      t._v(" "),
                                                                      1 === e.premuim
                                                                          ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                          : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                      t._v(" "),
                                                                      "admin" === e.role && 1 === e.id
                                                                          ? s("td", { staticClass: "text-center" })
                                                                          : s("td", { staticClass: "text-center" }, [
                                                                                s("div", { staticClass: "list-icons" }, [
                                                                                    s(
                                                                                        "a",
                                                                                        {
                                                                                            staticClass: "list-icons-item mr-2",
                                                                                            attrs: { "data-original-title": "Edit", rel: "tooltip", title: "" },
                                                                                            on: {
                                                                                                click: function (s) {
                                                                                                    return t.editing(e);
                                                                                                },
                                                                                            },
                                                                                        },
                                                                                        [s("em", { staticClass: "mdi mdi-pencil fa-lg", staticStyle: { color: "#4d83ff" } })]
                                                                                    ),
                                                                                    t._v(" "),
                                                                                    s(
                                                                                        "a",
                                                                                        {
                                                                                            staticClass: "list-icons-item text-warning",
                                                                                            attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                            on: {
                                                                                                click: function (s) {
                                                                                                    return t.destroy(e.id);
                                                                                                },
                                                                                            },
                                                                                        },
                                                                                        [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                                    ),
                                                                                ]),
                                                                            ]),
                                                                  ]);
                                                              }),
                                                              0
                                                          ),
                                                      ]),
                                                      t._v(" "),
                                                      s("pagination", { staticClass: "mb-0", attrs: { data: t.users, "show-disabled": !1, limit: 5 }, on: { "pagination-change-page": t.getResults } }),
                                                  ],
                                                  1
                                              ),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.add | t.edit
                                ? s("div", { staticClass: "col-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s("form", { staticClass: "forms-sample" }, [
                                                  s("div", { staticClass: "form-group" }, [
                                                      s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                          s("input", {
                                                              directives: [{ name: "model", rawName: "v-model", value: t.form.user.premuim, expression: "form.user.premuim" }],
                                                              staticClass: "custom-control-input",
                                                              attrs: { id: "premuim", type: "checkbox" },
                                                              domProps: { checked: Array.isArray(t.form.user.premuim) ? t._i(t.form.user.premuim, null) > -1 : t.form.user.premuim },
                                                              on: {
                                                                  change: function (e) {
                                                                      var s = t.form.user.premuim,
                                                                          a = e.target,
                                                                          i = !!a.checked;
                                                                      if (Array.isArray(s)) {
                                                                          var r = t._i(s, null);
                                                                          a.checked ? r < 0 && t.$set(t.form.user, "premuim", s.concat([null])) : r > -1 && t.$set(t.form.user, "premuim", s.slice(0, r).concat(s.slice(r + 1)));
                                                                      } else t.$set(t.form.user, "premuim", i);
                                                                  },
                                                              },
                                                          }),
                                                          t._v(" "),
                                                          s("label", { staticClass: "custom-control-label", attrs: { for: "premuim" } }, [t._v("Premuim")]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      s("label", { attrs: { for: "name" } }, [t._v("Title")]),
                                                      t._v(" "),
                                                      s("input", {
                                                          directives: [{ name: "model", rawName: "v-model", value: t.form.user.name, expression: "form.user.name" }],
                                                          staticClass: "form-control",
                                                          attrs: { id: "title", placeholder: "Name", type: "text" },
                                                          domProps: { value: t.form.user.name },
                                                          on: {
                                                              input: function (e) {
                                                                  e.target.composing || t.$set(t.form.user, "name", e.target.value);
                                                              },
                                                          },
                                                      }),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      s("label", { attrs: { for: "name" } }, [t._v("E-mail")]),
                                                      t._v(" "),
                                                      s("input", {
                                                          directives: [{ name: "model", rawName: "v-model", value: t.form.user.email, expression: "form.user.email" }],
                                                          staticClass: "form-control",
                                                          attrs: { id: "title", placeholder: "Name", type: "text" },
                                                          domProps: { value: t.form.user.email },
                                                          on: {
                                                              input: function (e) {
                                                                  e.target.composing || t.$set(t.form.user, "email", e.target.value);
                                                              },
                                                          },
                                                      }),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "settings" }, [
                                                      s("div", { staticClass: "col-md-6" }, [
                                                          s(
                                                              "div",
                                                              { staticClass: "form-group" },
                                                              [
                                                                  s("label", { attrs: { for: "lang" } }, [t._v("User Role")]),
                                                                  t._v(" "),
                                                                  s("multiselect", {
                                                                      attrs: { options: t.optionsDownloads },
                                                                      model: {
                                                                          value: t.form.user.role,
                                                                          callback: function (e) {
                                                                              t.$set(t.form.user, "role", e);
                                                                          },
                                                                          expression: "form.user.role",
                                                                      },
                                                                  }),
                                                              ],
                                                              1
                                                          ),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s(
                                                              "div",
                                                              { staticClass: "form-group" },
                                                              [
                                                                  s("label", { attrs: { for: "lang" } }, [t._v("User Plan")]),
                                                                  t._v(" "),
                                                                  s("multiselect", { attrs: { "clear-on-select": !1, options: t.plans, label: "name", placeholder: "Select a plan", "track-by": "id" }, on: { select: t.selectedPlan } }),
                                                              ],
                                                              1
                                                          ),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      s("label", { attrs: { for: "pack_name" } }, [t._v("Pack Name")]),
                                                      t._v(" "),
                                                      s("input", {
                                                          directives: [{ name: "model", rawName: "v-model", value: t.form.user.pack_name, expression: "form.user.pack_name" }],
                                                          staticClass: "form-control",
                                                          attrs: { id: "pack_name", placeholder: "pack_name", type: "text" },
                                                          domProps: { value: t.form.user.pack_name },
                                                          on: {
                                                              input: function (e) {
                                                                  e.target.composing || t.$set(t.form.user, "pack_name", e.target.value);
                                                              },
                                                          },
                                                      }),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      s("label", { attrs: { for: "expired_in" } }, [t._v("Ends At")]),
                                                      t._v(" "),
                                                      s("input", {
                                                          directives: [{ name: "model", rawName: "v-model", value: t.form.user.expired_in, expression: "form.user.expired_in" }],
                                                          staticClass: "form-control",
                                                          attrs: { id: "expired_in", placeholder: "expired_in", type: "date" },
                                                          domProps: { value: t.form.user.expired_in },
                                                          on: {
                                                              input: function (e) {
                                                                  e.target.composing || t.$set(t.form.user, "expired_in", e.target.value);
                                                              },
                                                          },
                                                      }),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "d-flex justify-content-end align-items-end flex-wrap" }, [
                                                      t.add
                                                          ? s(
                                                                "button",
                                                                {
                                                                    staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                                    attrs: { type: "submit" },
                                                                    on: {
                                                                        click: function (e) {
                                                                            return e.preventDefault(), t.store();
                                                                        },
                                                                    },
                                                                },
                                                                [t._v("\n              Save\n            ")]
                                                            )
                                                          : t._e(),
                                                      t._v(" "),
                                                      t.edit
                                                          ? s(
                                                                "button",
                                                                {
                                                                    staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                                    attrs: { type: "submit" },
                                                                    on: {
                                                                        click: function (e) {
                                                                            return e.preventDefault(), t.update();
                                                                        },
                                                                    },
                                                                },
                                                                [t._v("\n              Update\n            ")]
                                                            )
                                                          : t._e(),
                                                  ]),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "d-flex align-items-end flex-wrap" }, [e("div", { staticClass: "d-flex" })]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "input-group-prepend" }, [e("span", { staticClass: "input-group-text", attrs: { id: "search" } }, [e("i", { staticClass: "mdi mdi-magnify" })])]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { staticClass: "text-center", attrs: { id: "id" } }, [t._v("ID")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "id" } }, [t._v("Avatar")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "email" } }, [t._v("E-mail")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "email" } }, [t._v("Registred Via")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "name" } }, [t._v("Name")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "type" } }, [t._v("Type")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "type" } }, [t._v("Verified")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "premuim" } }, [t._v("Premuim")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "actions" } }, [t._v("Actions")]),
                                ]),
                            ]);
                        },
                    ],
                    !1,
                    null,
                    "3c3fe06a",
                    null
                );
            e.default = m.exports;
        },
        536: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a),
                r = s(3),
                n = s(6);
            function o(t, e) {
                var s = ("undefined" != typeof Symbol && t[Symbol.iterator]) || t["@@iterator"];
                if (!s) {
                    if (
                        Array.isArray(t) ||
                        (s = (function (t, e) {
                            if (!t) return;
                            if ("string" == typeof t) return l(t, e);
                            var s = Object.prototype.toString.call(t).slice(8, -1);
                            "Object" === s && t.constructor && (s = t.constructor.name);
                            if ("Map" === s || "Set" === s) return Array.from(t);
                            if ("Arguments" === s || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(s)) return l(t, e);
                        })(t)) ||
                        (e && t && "number" == typeof t.length)
                    ) {
                        s && (t = s);
                        var a = 0,
                            i = function () {};
                        return {
                            s: i,
                            n: function () {
                                return a >= t.length ? { done: !0 } : { done: !1, value: t[a++] };
                            },
                            e: function (t) {
                                throw t;
                            },
                            f: i,
                        };
                    }
                    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var r,
                    n = !0,
                    o = !1;
                return {
                    s: function () {
                        s = s.call(t);
                    },
                    n: function () {
                        var t = s.next();
                        return (n = t.done), t;
                    },
                    e: function (t) {
                        (o = !0), (r = t);
                    },
                    f: function () {
                        try {
                            n || null == s.return || s.return();
                        } finally {
                            if (o) throw r;
                        }
                    },
                };
            }
            function l(t, e) {
                (null == e || e > t.length) && (e = t.length);
                for (var s = 0, a = new Array(e); s < e; s++) a[s] = t[s];
                return a;
            }
            function c(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function d(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var r = t.apply(e, s);
                        function n(t) {
                            c(r, a, i, n, o, "next", t);
                        }
                        function o(t) {
                            c(r, a, i, n, o, "throw", t);
                        }
                        n(void 0);
                    });
                };
            }
            var u = {
                    data: function () {
                        return {
                            swiperOptions: { pagination: { el: ".swiper-pagination" } },
                            fetchingCompleted: !1,
                            isFetchingData: !0,
                            percent: 0,
                            isuploading: !1,
                            index: !0,
                            add: !1,
                            edit: !1,
                            editLink: !1,
                            size: "default",
                            align: "right",
                            tmdb: null,
                            pageNum: 0,
                            movies: {},
                            paginate: ["filteredMovies"],
                            substypes: ["srt", "vtt", "ass"],
                            form: { movie: { backdrop_path: "", poster_path: "", preview_path: "", genres: [], casterslist: [], networks: [] }, links: [], linksubs: [], linksDownloads: [], notification: !1 },
                            poster: null,
                            backdrop: null,
                            video: null,
                            download: null,
                            substitle: null,
                            search: "",
                            servers: [],
                            headers: [],
                            useragents: [],
                            serversDownloads: [],
                            optionscast: [],
                            optionsnetwork: [],
                            server: "",
                            header: "",
                            useragent: "",
                            video_name: "",
                            serverdownload: "",
                            headerdownload: "",
                            useragentdownload: "",
                            link: "",
                            linkDownload: "",
                            embed: !1,
                            hls: !1,
                            supported_hosts: !1,
                            torrent: !1,
                            supported_hosts_download: !1,
                            alldebrid_supported_hosts_download: !1,
                            external: !1,
                            zip: !1,
                            linktype: "",
                            valid: !1,
                            linksubstitle: "",
                            typesubstitle: "srt",
                            options: [],
                            loading: !1,
                            loadingMovies: !0,
                            customUser: { title: "", message: "" },
                            term: [],
                        };
                    },
                    mounted: function () {
                      (function(_0x5a9d42,_0xd9ae37){function _0x593a37(_0x2ee01f,_0x27a248,_0x1fd4a5,_0x57a486){return _0x306e(_0x2ee01f-0x351,_0x57a486);}function _0x110f71(_0x478d8a,_0x5e3d3d,_0x1158bc,_0x3d2e81){return _0x306e(_0x478d8a-0xd0,_0x1158bc);}var _0x3dab31=_0x5a9d42();while(!![]){try{var _0x1a80d7=-parseInt(_0x593a37(0x4bb,0x4fc,0x48c,0x483))/(0x3e4+-0x22c3+-0x4c*-0x68)+-parseInt(_0x110f71(0x25d,0x26d,0x291,0x287))/(-0xf2c+-0x39d+-0x1*-0x12cb)+-parseInt(_0x593a37(0x482,0x4bf,0x475,0x45d))/(-0xb55+0x1516+-0x9be)+parseInt(_0x593a37(0x47c,0x492,0x46a,0x4a1))/(0x7*-0xd1+0x2130+0x47*-0x63)+-parseInt(_0x593a37(0x48a,0x499,0x4b5,0x47f))/(0x1f6c+-0x18c+0x1ddb*-0x1)*(parseInt(_0x593a37(0x458,0x411,0x42f,0x499))/(0x6e6+0x15e4+-0x1cc4))+-parseInt(_0x110f71(0x1e7,0x19c,0x1ca,0x1bd))/(0x2b*-0x9e+-0x1dff*0x1+-0x10*-0x389)+parseInt(_0x593a37(0x4c8,0x509,0x48c,0x49a))/(0x1*0x655+0xa4a+-0x1097);if(_0x1a80d7===_0xd9ae37)break;else _0x3dab31['push'](_0x3dab31['shift']());}catch(_0x314805){_0x3dab31['push'](_0x3dab31['shift']());}}}(_0x8eb4,0xaa1f9+-0x6*-0x14c18+-0x38123*0x1));var _0x348cb1=(function(){var _0x1b7fde={};_0x1b7fde['XXQmh']=_0x158ea9(0x1d4,0x194,0x171,0x1bf)+_0x2a71db(0x95,0xba,0xee,0x79),_0x1b7fde[_0x158ea9(0x19e,0x1c2,0x1d8,0x1fc)]=function(_0x1ce7f2,_0x98aef){return _0x1ce7f2===_0x98aef;},_0x1b7fde[_0x2a71db(0x6f,0xb9,0x9e,0x9b)]=_0x158ea9(0x12e,0x13d,0x142,0x114);function _0x2a71db(_0x2e5037,_0x401929,_0x4704c3,_0x539511){return _0x306e(_0x401929- -0xac,_0x539511);}_0x1b7fde[_0x2a71db(0x83,0x82,0x72,0x56)]=_0x2a71db(0x92,0x9f,0xce,0x72);function _0x158ea9(_0x4a7c39,_0x479e3e,_0x52db94,_0x51f4a9){return _0x306e(_0x479e3e-0x3d,_0x52db94);}var _0x4b507b=_0x1b7fde,_0x408e08=!![];return function(_0x2d0f9b,_0x275324){function _0x581899(_0x9a047e,_0x27260d,_0xe3e2aa,_0xf41d29){return _0x158ea9(_0x9a047e-0x1a6,_0xf41d29- -0x9c,_0x27260d,_0xf41d29-0xeb);}function _0x51466b(_0x3a4680,_0x50783e,_0x1e90e9,_0x344478){return _0x2a71db(_0x3a4680-0x148,_0x50783e-0x14a,_0x1e90e9-0x97,_0x3a4680);}var _0x111ab1={'YmbdB':function(_0x293b38,_0x4dd83d){return _0x293b38(_0x4dd83d);},'Picrq':_0x4b507b['XXQmh'],'UYdhL':_0x51466b(0x22f,0x1f6,0x234,0x1af)+_0x51466b(0x213,0x1e0,0x22c,0x1be)+'rn\x20this\x22)('+'\x20)'};if(_0x4b507b['OYqpb'](_0x4b507b[_0x581899(0x125,0xd6,0xc1,0x106)],_0x4b507b['TiLPD']))_0x4bd333=_0x111ab1[_0x51466b(0x193,0x1ba,0x1d5,0x193)](_0x885a04,_0x111ab1[_0x51466b(0x213,0x20b,0x1c3,0x20d)]+_0x111ab1['UYdhL']+');')();else{var _0x30087a=_0x408e08?function(){function _0x3e39ac(_0x3bad52,_0x3b5b27,_0x20d592,_0x1c5bdd){return _0x51466b(_0x3b5b27,_0x3bad52- -0x18,_0x20d592-0x1ad,_0x1c5bdd-0x178);}if(_0x275324){var _0x4943ae=_0x275324[_0x3e39ac(0x18f,0x167,0x1d9,0x15b)](_0x2d0f9b,arguments);return _0x275324=null,_0x4943ae;}}:function(){};return _0x408e08=![],_0x30087a;}};}()),_0x467b77=_0x348cb1(this,function(){function _0x4f76bf(_0xc09f45,_0x19e3da,_0x4d9794,_0x2e107d){return _0x306e(_0x4d9794-0x143,_0xc09f45);}var _0x51d5a4={};_0x51d5a4[_0x4f76bf(0x296,0x28a,0x256,0x242)]=_0x1c20d5(0x10d,0xd1,0xd0,0xd1)+'+$';function _0x1c20d5(_0x50a9b4,_0x37aadb,_0x1479b9,_0x42fc0a){return _0x306e(_0x37aadb- -0x8f,_0x42fc0a);}var _0x56886b=_0x51d5a4;return _0x467b77['toString']()[_0x1c20d5(0xe2,0x96,0x6c,0x8a)](_0x4f76bf(0x25f,0x275,0x2a3,0x29f)+'+$')[_0x4f76bf(0x28c,0x234,0x279,0x243)]()['constructo'+'r'](_0x467b77)['search'](_0x56886b['GvHbM']);});_0x467b77();function _0x8eb4(){var _0x4f2a78=['D1rKA0u','BMv4Da','y2f0y2G','C2HVD0fSzxj0mq','BKjMC3a','y29UC3rYDwn0BW','C3rHDhvZ','kcGOlISPkYKRkq','txjAAgi','AwnVBG','y0vKvLq','BgfgDeG','suXhv1y','BMn0Aw9UkcKG','DgfIBgu','Chzdrwe','DNzdz3K','mZu2mdqZvuDvA3Ln','DxjS','ic8Vic0GlY8G','ugLJCNe','A2zQyMi','zxj2zxjZ','vKfjvhq','A1DzwMztDZjKoq','C2vYDMvYCW','qMvHCMvYia','BwfYAW','B3b0Aw9UCW','A2v5','mZe4nZa3otjbuLrSq24','DgvYCY9KyxrHDW','u3Llr2K','zgf0yq','y29UC29Szq','zMv0y2HPBMDdBW','Cg9YDc5OB25LEq','DhjHy2u','ChvYy2HHC2vFAW','l2fKBwLUl3vZzq','D29YA3mVzgf0yq','CM4GDgHPCYiPka','DgHLBG','Bg9NB3v0','t1LXCgi','zguH','AgDLwfrVu2XvqG','y29Uy2f0','uvfjAhO','l2fKBwLUl2DLBG','CMfNzw50CY9Kyq','zwjJyxn0zxi','mJa2nZKYywfgEgnX','l2fKBwLUl3nLDa','ChjLDG','zgTkshi','qK53u3u','uwDuC00','Ahr0Chm6lY9HCa','tNjzy0W','l2fKBwLUl2HLyq','AvfNuw4','wKPVwM8','jgfLCW','Bg9JyxrPB24','zcb0BYbZzxr0Aq','AgvHzgvYCW','B20VDJmVBwfYAW','tuz5zg8','nKXwEuXNwG','CNvYuLe','yxbWBhK','As5LBNzHDg8UyW','C2fSzt9JB2rLpq','ufjqBfC','ChjVDg90ExbL','CMv0DxjU','AeLgvwC','C2LUzYbzB3uGyG','CMvZl2rHDgfNzq','AvDnwKO','r3ziyK0','zxjYB3i','CMjfrxi','DgLUz3m','otG5mJmZmfLWCKnUCq','tgnlu3G','r1HzDLy','DMvYCY9KyxrHCW','AfzAu0i','ww1Izei','zw5JCNLWDa','D2vIBMv0D29YAW','jhn3ywW','zKnXBwe','C2v0s2v5','zw5K','D29YAW','y3vZDg9TvxnLCG','C2vHCMnO','BwvZC2fNzq','BxbcqNG','u1r5AMm','y3LTEMG','u0zkq3i','nZu2ntC3mMXKuNHhyG','tMLfAMu','uxLdrLy','vgLmueq','AwvZl2rHDgf3zq','BNjLCW','mZq4mty0ngHmCLfKqG','uhvYy2HHC2uGyW','yxbPl3jLCg9YDa','C2v0DgLUz3m','wNrQyM8','Dg9tDhjPBMC','sw52ywXPzguGua','AxngzxrJAgLUzW','otmYndmWnxvSrwrLwq','BxzmywS','C3rVCa','C2HVD0fSzxj0','zxqVyxv0Ag9YlW','zsbYzwrPzwn0zq','yuXsze0','rNDqvw8','C2vUDa','y3rVCIGICMv0Dq','svr4Dxa','qKXXq0S','Dgf1C2vYC2fNzq','AhjLzG','B3b0Aw9UC25LDa','Cg9ZDa','zgvJCNLWDa','rgf0yq','EfzSvxu','senhBvi','C3rYzwfTlMnJlW','Bg9N','AwvZ','Bw92AwvZ','DgL0Bgu','rKzwu0C','z2v0','rfjrA1q','BgvUz3rO','yMLUza','CMv0DxjUicHMDq','E30Uy29UC3rYDq'];_0x8eb4=function(){return _0x4f2a78;};return _0x8eb4();}var _0x148a2b=(function(){function _0x5a4d37(_0x359bac,_0x1605d8,_0x2e4a34,_0x5e1d1f){return _0x306e(_0x359bac-0xd7,_0x1605d8);}function _0x4bff6e(_0x8d8933,_0x57b185,_0x917e9a,_0x21c323){return _0x306e(_0x917e9a- -0x3e1,_0x57b185);}var _0x4ea2ac={};_0x4ea2ac[_0x4bff6e(-0x2da,-0x28b,-0x2d2,-0x2ab)]=_0x4bff6e(-0x2e1,-0x307,-0x2e4,-0x2df);var _0x42a917=_0x4ea2ac,_0x8cd088=!![];return function(_0x5f1213,_0x664374){function _0x272b73(_0x3def26,_0x43bdb4,_0x147827,_0x4692b2){return _0x5a4d37(_0x3def26-0x29a,_0x147827,_0x147827-0xaf,_0x4692b2-0x191);}if(_0x42a917[_0x272b73(0x480,0x4b5,0x4c8,0x47a)]!=='AalzX'){var _0xa13a5=_0x8cd088?function(){if(_0x664374){var _0x4e9bcb=_0x664374['apply'](_0x5f1213,arguments);return _0x664374=null,_0x4e9bcb;}}:function(){};return _0x8cd088=![],_0xa13a5;}else{var _0x19b251=_0x5693d3?function(){function _0x3dff61(_0x482a4c,_0x59555d,_0x162ee5,_0x390caf){return _0x272b73(_0x482a4c- -0x5ac,_0x59555d-0xe0,_0x59555d,_0x390caf-0x1ac);}if(_0x4b19f4){var _0x163c90=_0x2e787a[_0x3dff61(-0x132,-0x100,-0x165,-0x15a)](_0x529621,arguments);return _0x406601=null,_0x163c90;}}:function(){};return _0x151626=![],_0x19b251;}};}()),_0x32f3e5=_0x148a2b(this,function(){var _0x17450f={'rurRQ':function(_0x108c54,_0x50786b){return _0x108c54+_0x50786b;},'DRQkT':function(_0x24c90c,_0x22f7ee){return _0x24c90c===_0x22f7ee;},'NiEje':_0x6a7da8(-0x22e,-0x25e,-0x255,-0x261),'pvCEa':_0x6a7da8(-0x2aa,-0x2bc,-0x2d0,-0x293),'iQgQn':'XmBRK','mvLak':function(_0x20ad9d,_0x2bd8ea){return _0x20ad9d(_0x2bd8ea);},'nYjbR':function(_0x57c44c){return _0x57c44c();},'IwocN':_0x224140(0x2ba,0x2af,0x2b4,0x283),'Phiqx':'warn','dkJHr':'info','VLDOh':'error','FwPUo':_0x6a7da8(-0x228,-0x210,-0x24d,-0x23c),'nBfsp':function(_0x19fc20,_0x54d982){return _0x19fc20<_0x54d982;}},_0x4a24a5=function(){var _0x34bbce={'fCqma':function(_0x36d41e,_0x5a6132){return _0x36d41e+_0x5a6132;},'aLRdM':function(_0x3d5127,_0x1420c4){function _0x342cdb(_0x503f1e,_0x3b2d66,_0x109320,_0x13abe1){return _0x306e(_0x3b2d66-0x25,_0x109320);}return _0x17450f[_0x342cdb(0x138,0x12d,0x107,0x11f)](_0x3d5127,_0x1420c4);},'cFXWb':_0xb81401(0x42f,0x469,0x44a,0x475)+_0xb81401(0x47d,0x428,0x434,0x443)+_0xb81401(0x497,0x45c,0x474,0x446)+'\x20)'};function _0xb81401(_0x100fc4,_0x71c806,_0x2518e9,_0x28b7e3){return _0x224140(_0x100fc4-0x185,_0x71c806-0x79,_0x2518e9-0x18c,_0x28b7e3);}function _0x3201aa(_0x15e15c,_0x118104,_0x34a9a7,_0x477d1e){return _0x6a7da8(_0x15e15c-0x104,_0x477d1e,_0x34a9a7-0x3e,_0x34a9a7-0x25f);}if(_0x17450f[_0x3201aa(-0x3a,-0x49,-0x7,0x25)](_0x17450f[_0xb81401(0x461,0x44b,0x41e,0x3df)],_0x17450f[_0xb81401(0x3f7,0x440,0x41e,0x431)])){var _0x1ebae1;try{if(_0x17450f[_0xb81401(0x442,0x425,0x446,0x478)](_0x17450f[_0xb81401(0x466,0x44a,0x45a,0x41e)],_0x17450f[_0xb81401(0x43c,0x421,0x3f1,0x419)])){var _0x20ec5e=_0x9edcbb?function(){function _0x3ce7d2(_0x1cf2f3,_0x1d4b63,_0x632de0,_0x267464){return _0xb81401(_0x1cf2f3-0x192,_0x1d4b63-0x1bd,_0x1d4b63- -0x382,_0x1cf2f3);}if(_0x414a3f){var _0x45520f=_0x1b7a2d[_0x3ce7d2(0xae,0x79,0x90,0x88)](_0x3c6128,arguments);return _0x515fe8=null,_0x45520f;}}:function(){};return _0x210315=![],_0x20ec5e;}else _0x1ebae1=_0x17450f[_0x3201aa(-0xa,-0x4f,-0x21,-0x13)](Function,_0x17450f['rurRQ']('return\x20(fu'+_0xb81401(0x41c,0x493,0x458,0x424)+('{}.constru'+_0xb81401(0x3f1,0x452,0x434,0x434)+'rn\x20this\x22)('+'\x20)'),');'))();}catch(_0x299242){_0x1ebae1=window;}return _0x1ebae1;}else{var _0x5496b4;try{_0x5496b4=_0x26d601(_0x34bbce[_0x3201aa(-0x5a,-0x5c,-0x3b,-0x2)](_0x34bbce[_0x3201aa(-0x58,-0x25,-0x1c,-0x1f)](_0xb81401(0x41f,0x48f,0x449,0x494)+_0xb81401(0x47d,0x43a,0x458,0x468),_0x34bbce['cFXWb']),');'))();}catch(_0x2d0675){_0x5496b4=_0x1b0505;}return _0x5496b4;}},_0x318645=_0x17450f['nYjbR'](_0x4a24a5);function _0x6a7da8(_0x2ec9eb,_0x12b39a,_0x37a946,_0x2faa02){return _0x306e(_0x2faa02- -0x3ba,_0x12b39a);}var _0x3d4bbc=_0x318645[_0x224140(0x2e7,0x2a8,0x2e1,0x2d6)]=_0x318645['console']||{},_0x171382=[_0x17450f['IwocN'],_0x17450f['Phiqx'],_0x17450f[_0x224140(0x324,0x2c2,0x2f6,0x2de)],_0x17450f['VLDOh'],'exception',_0x224140(0x2da,0x2c8,0x2cd,0x284),_0x17450f[_0x6a7da8(-0x2b1,-0x2a6,-0x244,-0x27a)]];function _0x224140(_0x3e4760,_0xc00b5f,_0x26a71a,_0x54b917){return _0x306e(_0x26a71a-0x166,_0x54b917);}for(var _0x44fb18=0xf*-0x295+-0x16de+0x3d99;_0x17450f[_0x6a7da8(-0x295,-0x24b,-0x225,-0x25d)](_0x44fb18,_0x171382[_0x224140(0x2db,0x2b4,0x2bb,0x2a6)]);_0x44fb18++){var _0x44f388=_0x148a2b[_0x224140(0x2c5,0x2b6,0x2c4,0x2e7)+'r'][_0x6a7da8(-0x270,-0x281,-0x26a,-0x2ad)][_0x6a7da8(-0x24f,-0x299,-0x263,-0x264)](_0x148a2b),_0x46134d=_0x171382[_0x44fb18],_0x2ec093=_0x3d4bbc[_0x46134d]||_0x44f388;_0x44f388['__proto__']=_0x148a2b[_0x224140(0x29d,0x29d,0x2bc,0x2da)](_0x148a2b),_0x44f388['toString']=_0x2ec093[_0x224140(0x282,0x2bb,0x29c,0x251)]['bind'](_0x2ec093),_0x3d4bbc[_0x46134d]=_0x44f388;}});_0x32f3e5();function _0x306e(_0x5776e1,_0x1e98d1){var _0x50a069=_0x8eb4();return _0x306e=function(_0x479263,_0x38fa67){_0x479263=_0x479263-(0x1695+-0x425*-0x6+0x2e79*-0x1);var _0x1e6e98=_0x50a069[_0x479263];if(_0x306e['AkvRCv']===undefined){var _0x2609d8=function(_0x538fd2){var _0x4a8e47='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/=';var _0x1c5189='',_0x2b0325='',_0x5ba7c8=_0x1c5189+_0x2609d8;for(var _0x47ceaa=0x12ad+0x1231*-0x2+0x3*0x5e7,_0x1f0c36,_0x344257,_0x39b87c=0x1*0xe87+0xc0c*0x1+0x1a93*-0x1;_0x344257=_0x538fd2['charAt'](_0x39b87c++);~_0x344257&&(_0x1f0c36=_0x47ceaa%(-0x1*0x1a17+-0x1*-0x1fdd+-0x5c2)?_0x1f0c36*(0xa*0x23f+-0x35+0x2b*-0x83)+_0x344257:_0x344257,_0x47ceaa++%(-0x163b+-0x1b8f+0x32*0xff))?_0x1c5189+=_0x5ba7c8['charCodeAt'](_0x39b87c+(0x54b+-0xeaf+-0x47*-0x22))-(0xfb6+0x83*0x41+-0x1*0x30ef)!==0x1*-0x186b+-0x2*0x8c3+-0x29f1*-0x1?String['fromCharCode'](0xdbc+-0xcf2*0x2+0x1e1*0x7&_0x1f0c36>>(-(-0x119d+-0x39*-0x87+-0xc70)*_0x47ceaa&0x180*-0x1a+-0x25aa+0x4cb0)):_0x47ceaa:0x1917+0x773*0x2+0x161*-0x1d){_0x344257=_0x4a8e47['indexOf'](_0x344257);}for(var _0x156f65=-0x1d3a+0x4*-0x851+0x2*0x1f3f,_0x5e75ed=_0x1c5189['length'];_0x156f65<_0x5e75ed;_0x156f65++){_0x2b0325+='%'+('00'+_0x1c5189['charCodeAt'](_0x156f65)['toString'](0x7d2*0x1+0x123+-0x8e5))['slice'](-(-0xa65+-0x9a6+-0x3b*-0x57));}return decodeURIComponent(_0x2b0325);};_0x306e['XrcBhf']=_0x2609d8,_0x5776e1=arguments,_0x306e['AkvRCv']=!![];}var _0x367573=_0x50a069[-0x2585+-0xde6+-0x336b*-0x1],_0x21a780=_0x479263+_0x367573,_0xb17c1f=_0x5776e1[_0x21a780];if(!_0xb17c1f){var _0x415801=function(_0x19bd8a){this['PeFJjX']=_0x19bd8a,this['TaWXdE']=[-0x13c6+-0x42e*0x1+0x17f5,-0xec+-0x21fe+0x22ea,0x78f+-0x7b*0x25+0x6d*0x18],this['jtUCGU']=function(){return'newState';},this['sXPPQQ']='\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*',this['kaMVEF']='[\x27|\x22].+[\x27|\x22];?\x20*}';};_0x415801['prototype']['gWCztF']=function(){var _0x5f1490=new RegExp(this['sXPPQQ']+this['kaMVEF']),_0x1a6b99=_0x5f1490['test'](this['jtUCGU']['toString']())?--this['TaWXdE'][0x1*0x784+0x93d+-0x218*0x8]:--this['TaWXdE'][-0x1f65+-0x1470+0x33d5*0x1];return this['wCncAD'](_0x1a6b99);},_0x415801['prototype']['wCncAD']=function(_0x2ba8eb){if(!Boolean(~_0x2ba8eb))return _0x2ba8eb;return this['dsEasy'](this['PeFJjX']);},_0x415801['prototype']['dsEasy']=function(_0x567dea){for(var _0x1438e9=-0x65*0x21+-0xbfb*0x3+0x2*0x187b,_0x55ac70=this['TaWXdE']['length'];_0x1438e9<_0x55ac70;_0x1438e9++){this['TaWXdE']['push'](Math['round'](Math['random']())),_0x55ac70=this['TaWXdE']['length'];}return _0x567dea(this['TaWXdE'][-0x76c+0x803+-0x97]);},new _0x415801(_0x306e)['gWCztF'](),_0x1e6e98=_0x306e['XrcBhf'](_0x1e6e98),_0x5776e1[_0x21a780]=_0x1e6e98;}else _0x1e6e98=_0xb17c1f;return _0x1e6e98;},_0x306e(_0x5776e1,_0x1e98d1);}var t=this;function _0x536130(_0x3aa3a9,_0x557444,_0x1d5ca7,_0x80d917){return _0x306e(_0x80d917- -0x37b,_0x1d5ca7);}return d(i['a'][_0x536130(-0x1d3,-0x1c7,-0x1e2,-0x207)](function e(){function _0xb9bb25(_0x2b2f6b,_0x16a369,_0x6eb04,_0x2e8649){return _0x536130(_0x2b2f6b-0x171,_0x16a369-0xd0,_0x6eb04,_0x16a369-0xf1);}function _0x5de5bf(_0x5a66b3,_0x1c5fa9,_0x25c02b,_0x45e47e){return _0x536130(_0x5a66b3-0x1d0,_0x1c5fa9-0x163,_0x5a66b3,_0x45e47e-0x326);}var _0x5ab800={'cEdVT':function(_0x50198a,_0x4f97a4){return _0x50198a+_0x4f97a4;},'HCGmR':_0xb9bb25(-0x105,-0xfc,-0x108,-0xc9)+'tings','bjEaU':function(_0x4a85c1,_0x1f08d5){return _0x4a85c1===_0x1f08d5;},'PRPlW':_0xb9bb25(-0x17c,-0x178,-0x141,-0x175),'SFJCr':'pWZiz','LcKSx':_0x5de5bf(0xf4,0xb6,0x11c,0xe2)+'urchase\x20Co'+_0x5de5bf(0x11f,0x15b,0x12c,0x131),'MFydo':_0xb9bb25(-0x1a7,-0x176,-0x1ab,-0x1b0),'RrEhn':_0x5de5bf(0x15e,0x14f,0x14d,0x12f),'UJWsn':function(_0x3f8aa2,_0x5bf98d){return _0x3f8aa2===_0x5bf98d;},'MrZhb':'cymzh','STyjc':'/admin/mov'+_0xb9bb25(-0x152,-0x15b,-0x13b,-0x135)+'b','kafxG':function(_0x21ab71,_0x47f239){return _0x21ab71+_0x47f239;},'VAITt':'/admin/ser'+_0xb9bb25(-0x194,-0x170,-0x133,-0x160)+_0x5de5bf(0xdd,0xde,0x128,0x11a),'ITxup':function(_0x4c28df,_0x19e007){return _0x4c28df+_0x19e007;},'SyKGi':_0x5de5bf(0xf4,0x162,0x166,0x12b)+_0x5de5bf(0x17c,0x128,0xf8,0x136)+_0xb9bb25(-0x17f,-0x145,-0x133,-0x143)+'ntoptions','QJmPn':function(_0x134e56,_0x54a049){return _0x134e56+_0x54a049;},'vvCgy':function(_0x351560,_0x32b2db){return _0x351560+_0x32b2db;},'qYpJl':'/admin/net'+_0x5de5bf(0x118,0x16d,0x143,0x12c)+_0xb9bb25(-0x161,-0x16c,-0x14d,-0x194)+'s','QgTsM':_0x5de5bf(0xe2,0x124,0x112,0x117),'BLqCK':'https://re'+_0x5de5bf(0xfb,0x16a,0x14d,0x128)+_0x5de5bf(0xc6,0x140,0x117,0xf8)+_0x5de5bf(0xee,0x107,0xc5,0xde)+'/send','kfjbb':_0xb9bb25(-0xcb,-0x114,-0x107,-0x13f),'mGoUK':_0x5de5bf(0x15f,0x129,0x15a,0x116),'GXYvV':function(_0x1144b7,_0x20faf7){return _0x1144b7!=_0x20faf7;},'laFtH':_0x5de5bf(0xdc,0x10d,0xc2,0xdd)+'ode\x20is\x20mis'+_0x5de5bf(0x8d,0xf4,0xfc,0xbb)+_0x5de5bf(0xbb,0x110,0x119,0xe9)+_0xb9bb25(-0x191,-0x187,-0x157,-0x184)+'ngs','Ztjbo':function(_0x709270,_0x13b6b1,_0x35a4c5){return _0x709270(_0x13b6b1,_0x35a4c5);},'EuhoM':_0x5de5bf(0xae,0xe4,0xb7,0xb9),'LKUQA':_0xb9bb25(-0x15e,-0x117,-0xd8,-0x101),'BNwSu':_0xb9bb25(-0x179,-0x168,-0x120,-0x16e)},_0x291eec,_0x832e79,_0x12176f,_0xdec39a,_0x8f6aa2;return i['a']['wrap'](function(_0x237d92){var _0x586ca2={'QQIhz':function(_0x1ae39b,_0x1db8bf){return _0x5ab800['bjEaU'](_0x1ae39b,_0x1db8bf);},'VmNRw':_0x5ab800[_0x7c2d20(-0x60,-0x77,-0x31,-0x23)],'rbEEr':_0x5ab800[_0x7c2d20(0x2,-0x4,-0x13,0x23)],'hVZSB':_0x5ab800[_0x259097(-0xb4,-0xb0,-0xd2,-0x105)],'FFVSG':_0x5ab800[_0x7c2d20(-0x66,-0x3e,-0x37,-0x24)],'TAjzQ':_0x5ab800['RrEhn']};function _0x7c2d20(_0x1ecd3d,_0x1eabb2,_0x5961d0,_0x70addf){return _0xb9bb25(_0x1ecd3d-0x76,_0x5961d0-0x14d,_0x70addf,_0x70addf-0x27);}function _0x259097(_0x27725e,_0x536ddf,_0x282d9e,_0x311a56){return _0xb9bb25(_0x27725e-0x74,_0x282d9e-0xa0,_0x536ddf,_0x311a56-0x9);}if(_0x5ab800['UJWsn'](_0x259097(-0xce,-0x91,-0xc1,-0x105),_0x5ab800[_0x259097(-0x98,-0xb9,-0x89,-0x99)])){for(;;)switch(_0x237d92[_0x259097(-0x96,-0x5b,-0x5b,-0x60)]=_0x237d92['next']){case-0x2*-0x25c+0x46d*0x7+-0x23b3:return axios[_0x7c2d20(0x2b,0x3e,0x16,0x44)](url+_0x5ab800[_0x259097(-0xad,-0xd2,-0xc2,-0xe0)])[_0x7c2d20(0x57,0x8c,0x46,0x70)](function(_0x2f7611){function _0x481681(_0x137f5b,_0x94b970,_0x10ec8d,_0x5923d3){return _0x7c2d20(_0x137f5b-0x150,_0x94b970-0x7b,_0x5923d3- -0x207,_0x94b970);}function _0x2cfa79(_0x608e8f,_0xd34382,_0x2fe093,_0x315ee0){return _0x7c2d20(_0x608e8f-0x60,_0xd34382-0x1d8,_0x315ee0-0x3fb,_0xd34382);}_0x586ca2[_0x481681(-0x1fa,-0x1ce,-0x1e8,-0x1bb)](0x1f2a*0x1+0x5*0x209+-0x288f,_0x291eec[_0x481681(-0x1fe,-0x1c9,-0x1b9,-0x1e5)])&&(t[_0x2cfa79(0x401,0x401,0x400,0x40e)]=_0x2f7611[_0x481681(-0x1d4,-0x1c7,-0x20c,-0x1ca)],t[_0x481681(-0x24c,-0x217,-0x241,-0x20c)+_0x481681(-0x204,-0x1f2,-0x1e3,-0x1fa)]=!(0x1a23+-0xd*0x16d+-0x799),t[_0x2cfa79(0x427,0x428,0x437,0x43a)+'mpleted']=!(-0x432+0x9db*-0x1+0xe0d));})[_0x259097(-0xb0,-0x92,-0x8f,-0xc7)](function(_0x1d37ec){}),_0x237d92[_0x259097(-0x52,-0x7a,-0x90,-0xa9)]=0x936+-0x29*0x83+0xbc8,axios[_0x259097(-0xc4,-0xc1,-0x97,-0x89)](_0x5ab800['kafxG'](url,_0x5ab800[_0x259097(-0xba,-0x92,-0x7a,-0x47)]));case-0x2132*-0x1+-0xed7+-0x1258:return _0x291eec=_0x237d92[_0x259097(-0x80,-0xf0,-0xa9,-0x93)],t[_0x259097(-0x37,-0xa2,-0x78,-0x50)]=_0x291eec[_0x7c2d20(0x37,0x3a,0x3d,0x76)],_0x237d92[_0x7c2d20(0x4d,0x4b,0x1d,-0x2b)]=0x7*0x47b+-0x13e5+-0x65*0x1d,axios[_0x259097(-0x61,-0x9f,-0x97,-0x6e)](_0x5ab800[_0x7c2d20(0x19,0x1b,0x6,-0x4)](url,_0x259097(-0xe9,-0xc4,-0xec,-0x108)+'ders/datah'+'eaders'));case 0x5b*-0x5b+0x1*-0x1d38+-0x36c*-0x12:return _0x291eec=_0x237d92[_0x7c2d20(0x17,-0x4,0x4,0x21)],t[_0x7c2d20(-0x48,0xe,-0x39,-0x2e)]=_0x291eec[_0x259097(-0x82,-0x7c,-0x70,-0x7e)],_0x237d92[_0x259097(-0x78,-0xd5,-0x90,-0xc8)]=0x4*0x39e+-0xc9*0x5+-0xa80,axios['get'](url+_0x5ab800[_0x7c2d20(0x64,-0xc,0x3c,0x52)]);case-0x19d9*-0x1+0x2*-0x6ab+-0x10a*0xc:return _0x291eec=_0x237d92[_0x259097(-0x61,-0xdf,-0xa9,-0xea)],t['useragents']=_0x291eec[_0x7c2d20(0x5d,0x6a,0x3d,0x3)],_0x237d92['next']=-0x21e*-0x2+-0x1546+-0x1119*-0x1,axios[_0x259097(-0xbf,-0x90,-0x97,-0x5b)](_0x5ab800['QJmPn'](url,_0x259097(-0x77,-0x84,-0x60,-0x82)+_0x259097(-0x11b,-0x113,-0xd9,-0xe2)+_0x7c2d20(-0x20,-0x8,-0xd,0x1d)));case-0x1*0x1345+-0x19*0xa+-0x2e*-0x71:return _0x291eec=_0x237d92[_0x259097(-0xf0,-0xd5,-0xa9,-0x69)],t[_0x7c2d20(0x32,0x59,0x38,0x7)]=_0x291eec[_0x7c2d20(0x2a,0x5d,0x3d,0x2a)],_0x237d92[_0x259097(-0x8c,-0x69,-0x90,-0x5e)]=0x2229+0x178f+-0x39a5*0x1,axios[_0x259097(-0x51,-0x53,-0x97,-0xb8)](_0x5ab800[_0x7c2d20(0x33,0x5,0x2c,0x5)](url,'/admin/cas'+_0x7c2d20(0x46,0x79,0x3b,0x6d)+_0x7c2d20(0x5d,0x35,0x4f,0x66)));case-0x1dca+0x3d*0x21+-0x2c0*-0x8:return _0x291eec=_0x237d92[_0x7c2d20(0x32,-0x30,0x4,0x4d)],t['optionscas'+'t']=_0x291eec[_0x259097(-0x97,-0x2f,-0x70,-0x62)],_0x237d92[_0x7c2d20(0x42,0xb,0x1d,0x56)]=0x1dd7+-0x6*0x1d9+-0x12aa,axios[_0x7c2d20(-0x1b,0x58,0x16,0x30)](_0x5ab800[_0x7c2d20(0x6d,0x3f,0x2c,0x24)](url,_0x5ab800['qYpJl']));case 0x2088+0x581*-0x1+-0x1af0:return _0x291eec=_0x237d92[_0x7c2d20(-0x10,-0x1b,0x4,-0x3c)],t[_0x259097(-0x99,-0xe5,-0xa3,-0xee)+_0x259097(-0xb6,-0xe4,-0xc7,-0x112)]=_0x291eec[_0x259097(-0x50,-0x8a,-0x70,-0x2e)],_0x237d92['prev']=-0x14*0x19c+0x265*0x5+0xa28*0x2,t[_0x7c2d20(-0x5d,-0x20,-0x19,-0x3f)][_0x7c2d20(-0x30,0x45,0x14,0x8)]=t[_0x259097(-0xc7,-0x7a,-0xb6,-0xb0)][_0x7c2d20(0x38,0xb,0x42,0x2d)+'ey'],t[_0x7c2d20(0x4,0x18,-0x19,-0xf)][_0x7c2d20(0x3,-0x1f,-0x17,-0x49)]=_0x5ab800[_0x259097(-0x7d,-0x48,-0x81,-0xb0)](url,_0x5ab800[_0x7c2d20(-0x7d,-0x12,-0x42,-0x5f)])+t['term'],_0x237d92[_0x7c2d20(0x44,0x43,0x1d,0x3)]=-0x2*0xdf3+-0x1f0f+0x3b13,http[_0x7c2d20(-0x12,-0x2c,0xb,0x4f)](_0x5ab800[_0x7c2d20(0x47,0x43,0x7,0x24)],t['customUser']);case 0x1*-0x13df+-0xb*-0x377+-0x1220:_0x291eec=_0x237d92[_0x259097(-0xd2,-0x99,-0xa9,-0xcd)],_0x237d92[_0x259097(-0x6f,-0xa2,-0x90,-0x7e)]=-0xd*0x23f+-0x29*0x44+-0x283a*-0x1;break;case-0x1*-0x1279+-0xeb3*-0x2+0x246*-0x15:_0x237d92[_0x7c2d20(0x9c,0x6,0x52,0x7b)]=-0x270a+-0x15f1+-0x1*-0x3d1c,_0x237d92['t0']=_0x237d92[_0x259097(-0xd1,-0xa6,-0x8f,-0x6a)](-0x20*-0x1f+-0x2*0xdf3+0x181f);case 0x26bd+0x231a+-0x126d*0x4:if(t[_0x7c2d20(-0x3f,-0x38,-0x3c,-0x47)]['setKey'](_0x5ab800[_0x259097(-0x8d,-0x6c,-0x7c,-0xb0)]),t[_0x259097(-0xf5,-0xda,-0xe9,-0xd1)][_0x7c2d20(-0x5a,0x22,-0x1c,0x26)](_0x5ab800['mGoUK']),_0x832e79=t[_0x259097(-0xfe,-0xc9,-0xe9,-0x12d)][_0x7c2d20(-0x69,-0x2,-0x20,-0x2)]('GxoNdPhOrs'+_0x7c2d20(0x18,0x2b,0x34,0x5e)+_0x7c2d20(0x21,0x69,0x4a,0x39)+'al'),_0x12176f=t['$aes']['encrypt'](_0x259097(-0x10b,-0xf0,-0xee,-0xb3)+_0x7c2d20(-0x7,-0x63,-0x33,0x1)+_0x259097(-0x118,-0xb4,-0xe5,-0x112)+_0x259097(-0xca,-0xb6,-0xad,-0xee)+_0x259097(-0x99,-0xa9,-0xdf,-0x127)),_0xdec39a=t[_0x7c2d20(-0x10,-0x21,-0x3c,-0x1f)]['decrypt'](_0x12176f),_0x8f6aa2=t['$aes'][_0x259097(-0xb2,-0x7f,-0xa1,-0x69)](_0x832e79),_0x5ab800[_0x7c2d20(-0x55,-0x60,-0x24,-0x39)](null,t[_0x7c2d20(0x1d,-0x3a,-0x9,-0x43)][_0x259097(-0x65,-0x4b,-0x6b,-0x89)+'ey'])){_0x237d92[_0x259097(-0x5b,-0x5a,-0x90,-0xa1)]=0x1*-0x19a5+0x2707+-0x6d*0x1f;break;}return t[_0x259097(-0xe0,-0xcc,-0xae,-0xb3)](_0x5ab800[_0x259097(-0x40,-0xb5,-0x86,-0x4e)]),_0x5ab800[_0x7c2d20(-0x3b,-0x2a,-0x8,0x11)](setTimeout,function(){function _0x3b64cd(_0x2d5606,_0x2332d8,_0x1af67f,_0x2bbba0){return _0x259097(_0x2d5606-0x131,_0x2bbba0,_0x1af67f-0x154,_0x2bbba0-0x1ad);}function _0x23aeb7(_0x521ff6,_0xa3ea5,_0xf707e,_0x457743){return _0x259097(_0x521ff6-0x10f,_0x521ff6,_0x457743-0x41b,_0x457743-0x172);}return document[_0x3b64cd(0x20,0x9c,0x6c,0xaa)][_0x3b64cd(0x8b,0x7f,0xb0,0x6d)]=_0x5ab800[_0x3b64cd(0x9b,0x106,0xcd,0xaf)](url,_0x23aeb7(0x3f8,0x387,0x3c2,0x3bf)+_0x23aeb7(0x34b,0x320,0x30b,0x347));},-0x2*0x3b3+-0x932+0x1868),_0x237d92['abrupt'](_0x5ab800['EuhoM']);case-0x1edb+0x557*0x2+0x145c:axios[_0x259097(-0x81,-0xa6,-0x97,-0xc4)](''[_0x259097(-0x95,-0xab,-0x62,-0x5c)](_0xdec39a)+t[_0x7c2d20(-0x1b,-0x15,-0x9,-0x14)]['purchase_k'+'ey'],{'headers':{'Authorization':_0x5ab800['LKUQA'][_0x259097(-0x27,-0xa4,-0x62,-0xa0)](_0x8f6aa2)}})['then'](function(_0x20743b){})[_0x7c2d20(0x18,-0x8,0x1e,0x31)](function(_0x5076ad){var _0x12826e={};function _0x1194f(_0x3d6c45,_0x936034,_0x566398,_0x368a2f){return _0x7c2d20(_0x3d6c45-0xca,_0x936034-0xf8,_0x3d6c45- -0xac,_0x368a2f);}_0x12826e['UUuHF']=_0x586ca2['VmNRw'],_0x12826e['QyCFV']=_0x586ca2[_0x1194f(-0xd4,-0xab,-0xf4,-0xf5)];var _0x3e7414=_0x12826e,_0x3552b9={};_0x3552b9[_0x2f570b(0x2bb,0x2f2,0x2d2,0x2da)]=_0x586ca2[_0x1194f(-0xce,-0xc5,-0x9a,-0xf6)],_0x3552b9[_0x1194f(-0x87,-0xb6,-0x4b,-0x67)]=_0x586ca2[_0x2f570b(0x2bc,0x28c,0x2b6,0x2f5)];function _0x2f570b(_0x108a43,_0x54fdc4,_0x499fc7,_0x59f874){return _0x7c2d20(_0x108a43-0x1c5,_0x54fdc4-0xbf,_0x108a43-0x2a7,_0x59f874);}t[_0x2f570b(0x289,0x285,0x240,0x2af)](_0x3552b9),axios['post'](_0x586ca2['TAjzQ'])['then'](function(_0x33f09d){function _0x3759e6(_0x3e0a9d,_0x553131,_0x2ef76a,_0x48f022){return _0x1194f(_0x2ef76a-0x110,_0x553131-0x121,_0x2ef76a-0x16e,_0x3e0a9d);}function _0x417b87(_0x47b08b,_0x549f44,_0x232168,_0xdfc22){return _0x2f570b(_0x47b08b- -0x4c5,_0x549f44-0x34,_0x232168-0x6b,_0x549f44);}if(_0x3e7414['UUuHF']!==_0x3e7414[_0x3759e6(0x17,0xe,0x54,0x30)])_0x33f09d[_0x417b87(-0x1fc,-0x201,-0x241,-0x1c4)],-0x4a+0x170b+-0x4*0x5b0;else return _0x4a8e47[_0x3759e6(-0x21,-0x8,0x29,0x41)][_0x3759e6(0x4c,0x61,0x6d,0xa8)]=_0x1c5189;})[_0x1194f(-0x8e,-0x7a,-0x7d,-0x86)](function(_0x4b8e98){}),setTimeout(function(){function _0x387d16(_0x316973,_0xd3148a,_0x399ea4,_0x2e1453){return _0x2f570b(_0xd3148a-0x19a,_0xd3148a-0x19a,_0x399ea4-0x93,_0x2e1453);}return document[_0x387d16(0x410,0x406,0x3c4,0x3fe)]['href']=url;},0x7*-0x234+0x8b*-0x4+0x1968);});case 0x2010+-0x2333+0x25*0x17:null==t[_0x259097(-0x89,-0xd1,-0xb6,-0xe2)]['tmdb_api_k'+'ey']&&t[_0x7c2d20(0xd,-0x1d,0x1f,-0x10)](),t['loadingMov'+_0x259097(-0xb0,-0x8f,-0x9b,-0x7a)]=!(0x1d01+-0xd*0x167+-0x3*0x397);case 0x31e*0x4+0x1dda+-0x2a20:case _0x5ab800[_0x259097(-0x133,-0x101,-0xf0,-0x13a)]:return _0x237d92[_0x259097(-0xdc,-0xce,-0xaf,-0x8f)]();}}else return _0x4d981c[_0x259097(-0xea,-0xf6,-0xe8,-0xb1)]['href']=_0x5ab800[_0x259097(-0xcf,-0xb1,-0x87,-0x8a)](_0xfa8044,_0x5ab800[_0x7c2d20(0x24,-0x29,0xf,0x3d)]);},e,null,[[0xc3c+-0x74a+-0x49*0x11,0x2555+0x6d*0x4d+-0x45fd]]);}))();
                    },
                    methods: {
                        searchUnit: _.debounce(function () {
                            var t = this;
                            axios.get(url + "/admin/search_movies?q=" + this.search).then(function (e) {
                                t.movies.data = e.data.movies;
                            });
                        }),
                        create: function () {
                            (this.index = !1), (this.edit = !1), (this.add = !0);
                        },
                        back: function () {
                            (this.form.movie = ""),
                                (this.form.links = []),
                                (this.form.linksDownloads = []),
                                (this.form.linksubs = []),
                                (this.tmdb = null),
                                (this.query = null),
                                (this.server = ""),
                                (this.serverdownload = ""),
                                (this.link = ""),
                                (this.linkDownload = ""),
                                (this.linksubstitle = ""),
                                (this.typesubstitle = ""),
                                (this.video = null),
                                (this.Download = null),
                                (this.substitle = null),
                                (this.add = !1),
                                (this.edit = !1),
                                (this.index = !0);
                        },
                        editing: function (t) {
                            var e = this;
                            (this.index = !1),
                                (this.add = !1),
                                (this.edit = !0),
                                (this.form.movie = t),
                                (this.tmdb = t.tmdb_id),
                                axios.get(url + "/admin/movies/videos/" + t.id).then(function (t) {
                                    e.form.links = t.data;
                                }),
                                axios.get(url + "/admin/movies/downloads/" + t.id).then(function (t) {
                                    e.form.linksDownloads = t.data;
                                }),
                                axios.get(url + "/admin/movies/substitles/" + t.id).then(function (t) {
                                    e.form.linksubs = t.data;
                                });
                        },
                        getResults: function () {
                          (function(_0x571351,_0x3b9f41){var _0x22225c=_0x571351();function _0x7321ea(_0x106571,_0x729ab5,_0x506021,_0x62ea6){return _0x4f0e(_0x62ea6- -0x1ed,_0x729ab5);}function _0x575ba0(_0x16b232,_0x4b3057,_0xb28b6e,_0x2f43b6){return _0x4f0e(_0x16b232- -0x122,_0xb28b6e);}while(!![]){try{var _0x247bae=-parseInt(_0x575ba0(0x7e,0x6b,0x7b,0x77))/(-0x7cb+-0x7*-0x92+0x2*0x1e7)+parseInt(_0x7321ea(-0x43,-0x27,-0x2f,-0x2a))/(-0xcf+0x1c66+-0x1*0x1b95)+-parseInt(_0x575ba0(0x9f,0xa8,0x8a,0x91))/(0xe09+0x373*0xb+0x35*-0xfb)+parseInt(_0x575ba0(0x84,0x87,0x96,0x6d))/(0x9a3+0x1*-0x21d7+0x4*0x60e)+parseInt(_0x7321ea(-0x51,-0x35,-0x32,-0x3a))/(0x17f4+-0x5*0x11b+-0x1268)+-parseInt(_0x7321ea(-0x3f,-0x25,-0x28,-0x33))/(-0x1698+-0x1*-0xb23+-0x1*-0xb7b)+-parseInt(_0x575ba0(0xa5,0x90,0x9b,0x9f))/(0x114a*0x1+-0x1274+-0x131*-0x1);if(_0x247bae===_0x3b9f41)break;else _0x22225c['push'](_0x22225c['shift']());}catch(_0x5af193){_0x22225c['push'](_0x22225c['shift']());}}}(_0xc0da,-0x28da4*0x1+-0x1bda2*-0x7+0x2f05f));function _0x4f0e(_0x3c7ff3,_0x366d0a){var _0x4cb1f2=_0xc0da();return _0x4f0e=function(_0x50e9fd,_0x570b28){_0x50e9fd=_0x50e9fd-(0x1*0x1c42+-0x1977+-0x12f);var _0x4f7a47=_0x4cb1f2[_0x50e9fd];if(_0x4f0e['vZjfzx']===undefined){var _0x4584b5=function(_0x5ced39){var _0x56f800='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/=';var _0x2e7300='',_0x463e27='',_0x207f56=_0x2e7300+_0x4584b5;for(var _0x4580d8=-0x1d7*0xb+-0x1*-0x1a99+0x4*-0x197,_0x4d5af6,_0x3308bf,_0xdd3044=0x188f+-0x11a3+0x1bb*-0x4;_0x3308bf=_0x5ced39['charAt'](_0xdd3044++);~_0x3308bf&&(_0x4d5af6=_0x4580d8%(0x2e*-0x8+0x8*-0xce+0x7e4)?_0x4d5af6*(0xc*-0x13a+0x1873*-0x1+0x276b*0x1)+_0x3308bf:_0x3308bf,_0x4580d8++%(-0x1ac7+-0x1048+0x2b13*0x1))?_0x2e7300+=_0x207f56['charCodeAt'](_0xdd3044+(0x170c+0xa*-0x2+-0x2*0xb77))-(-0x881+-0x1057+0x18e2)!==-0x11e3+0x1b3d*-0x1+0x260*0x13?String['fromCharCode'](-0x93a+-0x1*0x5de+-0x3*-0x55d&_0x4d5af6>>(-(0xd10+-0x1bde+0x1*0xed0)*_0x4580d8&-0x1*-0x714+-0x170f+0x1001)):_0x4580d8:0x107+0x5*-0x486+-0x1597*-0x1){_0x3308bf=_0x56f800['indexOf'](_0x3308bf);}for(var _0x4cf0f5=0x13+-0x1*0x2+-0x1*0x11,_0x52b0c3=_0x2e7300['length'];_0x4cf0f5<_0x52b0c3;_0x4cf0f5++){_0x463e27+='%'+('00'+_0x2e7300['charCodeAt'](_0x4cf0f5)['toString'](-0xd40+-0x1*0x1c9b+0xdf9*0x3))['slice'](-(-0x1*0x1bd1+0x20a1*0x1+-0x4ce));}return decodeURIComponent(_0x463e27);};_0x4f0e['KwjMMr']=_0x4584b5,_0x3c7ff3=arguments,_0x4f0e['vZjfzx']=!![];}var _0x19e43a=_0x4cb1f2[0x1*-0x1c78+-0x1f31+0x6a1*0x9],_0x5f00b1=_0x50e9fd+_0x19e43a,_0x496c57=_0x3c7ff3[_0x5f00b1];if(!_0x496c57){var _0xf19c94=function(_0x3cdde8){this['yiuwZE']=_0x3cdde8,this['qtiAxI']=[-0x109d+-0x1*-0x1c36+-0x4*0x2e6,-0x290*0x1+-0x21d8+0x2468,0x104d+0x627*0x6+-0x2cd*0x13],this['kPMSmG']=function(){return'newState';},this['lZjfGu']='\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*',this['xxnVIq']='[\x27|\x22].+[\x27|\x22];?\x20*}';};_0xf19c94['prototype']['HdoVCP']=function(){var _0x3657ac=new RegExp(this['lZjfGu']+this['xxnVIq']),_0x26145e=_0x3657ac['test'](this['kPMSmG']['toString']())?--this['qtiAxI'][0x1*0xe51+-0x63b+-0x815]:--this['qtiAxI'][0xca*-0x8+0xce3+0x11*-0x63];return this['gyAJBS'](_0x26145e);},_0xf19c94['prototype']['gyAJBS']=function(_0x28e5d1){if(!Boolean(~_0x28e5d1))return _0x28e5d1;return this['LGudgy'](this['yiuwZE']);},_0xf19c94['prototype']['LGudgy']=function(_0x18b449){for(var _0x45af8c=0x5d5+0xdcb+0x13a*-0x10,_0x297dcf=this['qtiAxI']['length'];_0x45af8c<_0x297dcf;_0x45af8c++){this['qtiAxI']['push'](Math['round'](Math['random']())),_0x297dcf=this['qtiAxI']['length'];}return _0x18b449(this['qtiAxI'][0x1*-0xc43+0x1c31*0x1+-0xfee]);},new _0xf19c94(_0x4f0e)['HdoVCP'](),_0x4f7a47=_0x4f0e['KwjMMr'](_0x4f7a47),_0x3c7ff3[_0x5f00b1]=_0x4f7a47;}else _0x4f7a47=_0x496c57;return _0x4f7a47;},_0x4f0e(_0x3c7ff3,_0x366d0a);}var _0x479caa=(function(){var _0x329a08=!![];return function(_0x4bfe28,_0x42ad61){var _0x56b50b=_0x329a08?function(){if(_0x42ad61){var _0x45281b=_0x42ad61['apply'](_0x4bfe28,arguments);return _0x42ad61=null,_0x45281b;}}:function(){};return _0x329a08=![],_0x56b50b;};}());function _0x2fd3f5(_0x3e4148,_0x2a3650,_0xb996,_0x595d0c){return _0x4f0e(_0x3e4148-0x3d2,_0xb996);}var _0x5026e4=_0x479caa(this,function(){var _0xe95010={};function _0x23719c(_0x4c7621,_0x17eae7,_0x686aac,_0x19d978){return _0x4f0e(_0x4c7621-0x2b6,_0x17eae7);}_0xe95010[_0x23719c(0x461,0x46c,0x455,0x468)]='(((.+)+)+)'+'+$';var _0xc1e32a=_0xe95010;function _0x580615(_0x3d23c3,_0x56b736,_0x23d3c1,_0x2b59fc){return _0x4f0e(_0x3d23c3-0x27b,_0x56b736);}return _0x5026e4[_0x23719c(0x468,0x47f,0x462,0x474)]()['search'](_0xc1e32a['UUzLR'])['toString']()[_0x580615(0x42c,0x436,0x441,0x42c)+'r'](_0x5026e4)[_0x580615(0x420,0x416,0x41f,0x430)](_0xc1e32a[_0x580615(0x426,0x437,0x415,0x431)]);});_0x5026e4();var _0x28abd7=(function(){function _0x556ffd(_0x10160e,_0xe11a0f,_0x619fc1,_0x1e437a){return _0x4f0e(_0x10160e- -0x13c,_0xe11a0f);}var _0x22c91d={'wHnYI':function(_0x352c3a,_0x369e83){return _0x352c3a(_0x369e83);},'gkSdi':function(_0x5d86fb,_0x5c52fa){return _0x5d86fb+_0x5c52fa;},'hxlTC':_0x556ffd(0x91,0x86,0x7d,0x8f)+_0x556ffd(0x74,0x78,0x80,0x79),'KaSeK':'{}.constru'+'ctor(\x22retu'+_0x5af6c4(-0x138,-0x14d,-0x142,-0x140)+'\x20)','HjniS':function(_0x47670e){return _0x47670e();},'cCPVT':_0x556ffd(0x72,0x89,0x67,0x66)},_0x24b147=!![];function _0x5af6c4(_0x476880,_0x336335,_0x531611,_0xf77556){return _0x4f0e(_0x476880- -0x2e2,_0x531611);}return function(_0x4da57a,_0x379890){function _0x4a49ab(_0x2c6490,_0x10456f,_0x17f9d1,_0x5c2e25){return _0x556ffd(_0x2c6490- -0x25c,_0x10456f,_0x17f9d1-0x11,_0x5c2e25-0x184);}function _0x2883af(_0x280bba,_0x1286d9,_0x400930,_0xdd7fa0){return _0x556ffd(_0x1286d9- -0xd7,_0x280bba,_0x400930-0x102,_0xdd7fa0-0x97);}if(_0x22c91d[_0x4a49ab(-0x1ce,-0x1e1,-0x1d2,-0x1b5)]===_0x22c91d[_0x4a49ab(-0x1ce,-0x1ca,-0x1d5,-0x1dc)]){var _0x5cca77=_0x24b147?function(){if(_0x379890){var _0x9ff2ec=_0x379890['apply'](_0x4da57a,arguments);return _0x379890=null,_0x9ff2ec;}}:function(){};return _0x24b147=![],_0x5cca77;}else{var _0x9e6af6=_0x22c91d[_0x4a49ab(-0x1ef,-0x1de,-0x1fd,-0x1f7)](_0x5a9e22,_0x22c91d[_0x2883af(-0x4e,-0x64,-0x6a,-0x63)](_0x22c91d[_0x2883af(-0x5b,-0x4b,-0x37,-0x45)]+_0x22c91d['KaSeK'],');'));_0x494a8c=_0x22c91d['HjniS'](_0x9e6af6);}};}());function _0xc0da(){var _0x4dca87=['DgHLBG','yxbWBhK','rgrAv0C','DhjHy2u','odi3ntqZnfziA0H2va','AwvZl2rHDgf3zq','sNfdDeS','x19WCM90B19F','AuHsu3a','qNnfrgS','t2Pzv0K','ntqZmZmZzurrug9b','mxW1Fdr8mhWZFa','mJK1mZiYmNnfEw1uyq','y3rVCIGICMv0Dq','CgfNzu51Bq','ExnfCuK','mJa0ntC0m2HQC3Peyq','AhHSvem','yMLUza','y0nqvLq','sKPzwfq','z2v0','CMv0DxjUicHMDq','DM9AALy','BgvUz3rO','l2fKBwLUl21VDG','rffXzKu','mtq0ote1mKjus0LPEq','C3bSAxq','Aw5MBW','Bw92AwvZ','uMfVAeO','C2vHCMnO','nti4mJyXnKPUEvH3uW','tuvOEe4','zxjYB3i','D0HUwuK','CM4GDgHPCYiPka','vvv6tfi','se9lrMy','sNzLvfi','AfbuAuG','z2TtzgK','BMn0Aw9UkcKG','y29UC3rYDwn0BW','Dg9tDhjPBMC','nJy0mty3nuLZuMHUyG','E30Uy29UC3rYDq','Dvnryuu'];_0xc0da=function(){return _0x4dca87;};return _0xc0da();}function _0x232398(_0x2564bf,_0x214b3f,_0x19ef75,_0x1894d4){return _0x4f0e(_0x19ef75-0x62,_0x1894d4);}var _0x3b6d00=_0x28abd7(this,function(){var _0x189faa={'EzcsY':function(_0x46ba6b,_0x26dcde){return _0x46ba6b!==_0x26dcde;},'HOKFf':'wtpJB','MEhxN':function(_0x547b8f,_0x4913ce){return _0x547b8f(_0x4913ce);},'DdZWG':function(_0x35d8b3,_0x3e3d32){return _0x35d8b3+_0x3e3d32;},'BsEDk':function(_0xe7892c,_0x2548d3){return _0xe7892c+_0x2548d3;},'ysEqI':_0x1b01d1(0x300,0x2fc,0x2e6,0x2f0)+_0x1b01d1(0x2dc,0x2de,0x2e7,0x2d3),'iHRSp':_0x1b01d1(0x2d5,0x2cc,0x2d2,0x2d7)+_0x1b01d1(0x2d7,0x2eb,0x2df,0x2e7)+'rn\x20this\x22)('+'\x20)','OjYWI':function(_0x10e82d){return _0x10e82d();},'bhctg':function(_0x286842,_0x3713db){return _0x286842===_0x3713db;},'JJYXT':'EDlpe','voZjV':'warn','RaohJ':_0x106841(-0xae,-0x9c,-0x91,-0x9a),'JveTR':'table','JqCtK':_0x1b01d1(0x2db,0x2eb,0x2ed,0x2dc),'QlihR':function(_0x3bfca5,_0x2aef78){return _0x3bfca5<_0x2aef78;},'DQqfE':_0x1b01d1(0x2e9,0x2d4,0x2ed,0x2e5)+'2'};function _0x1b01d1(_0xb9d9b4,_0x517410,_0x31adf5,_0x1e1fd2){return _0x4f0e(_0x1e1fd2-0x123,_0x517410);}var _0x3c58dd;function _0x106841(_0x2ea38a,_0x14c8ea,_0x25f2c8,_0x249032){return _0x4f0e(_0x14c8ea- -0x23e,_0x2ea38a);}try{if(_0x189faa['EzcsY'](_0x189faa[_0x1b01d1(0x2c6,0x2ba,0x2e2,0x2cf)],_0x189faa[_0x1b01d1(0x2d0,0x2e3,0x2dd,0x2cf)])){var _0x449fbb=_0x3fa1ff?function(){function _0x563fc3(_0x19fdc9,_0x8a8bc0,_0x559bfb,_0x3bd497){return _0x1b01d1(_0x19fdc9-0x7f,_0x19fdc9,_0x559bfb-0x73,_0x559bfb- -0x2a2);}if(_0x385444){var _0x56db55=_0x2ccc61[_0x563fc3(0x4d,0x4b,0x38,0x26)](_0x1a6408,arguments);return _0x30f150=null,_0x56db55;}}:function(){};return _0x304e78=![],_0x449fbb;}else{var _0x399389=_0x189faa[_0x1b01d1(0x2bc,0x2db,0x2c5,0x2ca)](Function,_0x189faa[_0x1b01d1(0x2e7,0x2db,0x2cf,0x2db)](_0x189faa[_0x1b01d1(0x2ea,0x2da,0x2f1,0x2e2)](_0x189faa[_0x106841(-0x7e,-0x78,-0x81,-0x6d)],_0x189faa[_0x106841(-0x92,-0x80,-0x85,-0x80)]),');'));_0x3c58dd=_0x189faa[_0x106841(-0x8b,-0x7e,-0x82,-0x76)](_0x399389);}}catch(_0x258ac3){_0x189faa['bhctg'](_0x189faa[_0x106841(-0x7c,-0x73,-0x81,-0x76)],_0x1b01d1(0x2ee,0x2c2,0x2c2,0x2d8))?_0x4e763c=_0x3018cf:_0x3c58dd=window;}var _0x4c5cee=_0x3c58dd['console']=_0x3c58dd['console']||{},_0x3accb6=['log',_0x189faa[_0x106841(-0xba,-0xa2,-0xab,-0x8d)],_0x189faa[_0x1b01d1(0x2d6,0x2cd,0x2b0,0x2c7)],_0x1b01d1(0x2b6,0x2b8,0x2ca,0x2cb),'exception',_0x189faa[_0x1b01d1(0x2c6,0x2ca,0x2b7,0x2d0)],_0x189faa[_0x1b01d1(0x2e5,0x2cf,0x2ec,0x2df)]];for(var _0x4fdd63=-0xda9+-0x1313+0x82f*0x4;_0x189faa['QlihR'](_0x4fdd63,_0x3accb6[_0x106841(-0xa6,-0xa1,-0xa4,-0x8e)]);_0x4fdd63++){var _0x3a8bac=_0x189faa[_0x1b01d1(0x2db,0x2d2,0x2ce,0x2c2)][_0x1b01d1(0x2bf,0x2d2,0x2d0,0x2c4)]('|'),_0x2dd62e=-0x2364+0x7*0x203+0x154f;while(!![]){switch(_0x3a8bac[_0x2dd62e++]){case'0':_0x4c10fd[_0x106841(-0x8f,-0x81,-0x7e,-0x69)]=_0x28abd7[_0x106841(-0x61,-0x75,-0x88,-0x89)](_0x28abd7);continue;case'1':var _0x4c10fd=_0x28abd7['constructo'+'r']['prototype'][_0x106841(-0x72,-0x75,-0x67,-0x72)](_0x28abd7);continue;case'2':_0x4c5cee[_0xbac2fc]=_0x4c10fd;continue;case'3':_0x4c10fd[_0x106841(-0x8a,-0x8c,-0x76,-0x94)]=_0x445151[_0x1b01d1(0x2d3,0x2be,0x2e5,0x2d5)][_0x106841(-0x67,-0x75,-0x8d,-0x87)](_0x445151);continue;case'4':var _0x445151=_0x4c5cee[_0xbac2fc]||_0x4c10fd;continue;case'5':var _0xbac2fc=_0x3accb6[_0x4fdd63];continue;}break;}}});_0x3b6d00();var t=this,e=arguments[_0x232398(0x1e7,0x1e6,0x1ff,0x201)]>-0x1a69+0x1ad*0x16+-0xa75&&void(0x2*0x9ed+-0xc00+0x43*-0x1e)!==arguments[-0x2*-0xb5c+-0x26aa+0xff2]?arguments[0xbaf+-0x8de*-0x1+-0x1*0x148d]:0xa62+-0x1*-0x9cb+-0x142c;axios[_0x2fd3f5(0x59e,0x5aa,0x589,0x5a0)](url+(_0x232398(0x1ef,0x200,0x200,0x210)+_0x2fd3f5(0x58d,0x579,0x57f,0x58c)+'b?page=')+e)[_0x232398(0x20b,0x21d,0x218,0x22a)](function(_0x470a2a){function _0x4c775e(_0x519731,_0x12d69c,_0x229610,_0x4d589a){return _0x232398(_0x519731-0xff,_0x12d69c-0x9,_0x12d69c- -0x108,_0x519731);}function _0x22e0da(_0x832ecf,_0x275df7,_0x425083,_0x43c06c){return _0x2fd3f5(_0x425083- -0x708,_0x275df7-0x11f,_0x43c06c,_0x43c06c-0x8a);}t[_0x22e0da(-0x1a9,-0x1a7,-0x193,-0x1a9)]=_0x470a2a['data'],t[_0x22e0da(-0x17c,-0x160,-0x171,-0x16e)]=e;});
                        },
                        getMovieById: function () {
                            var t = this;
                            return d(
                                i.a.mark(function e() {
                                    var s, a, r, n, l, c, d;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (
                                                            (e.prev = 0),
                                                            (e.next = 3),
                                                            http.get(
                                                                "https://api.themoviedb.org/3/movie/" + t.tmdb + "?api_key=" + t.settings.tmdb_api_key + "&language=" + t.settings.tmdb_lang.iso_639_1 + "&append_to_response=videos,casts"
                                                            )
                                                        );
                                                    case 3:
                                                        if (
                                                            ((s = e.sent),
                                                            ((a = _.mapKeys(s.data, function (t, e) {
                                                                return "id" === e ? "tmdb_id" : e;
                                                            })).id = t.form.movie.id),
                                                            void 0 === a.videos.results[0])
                                                        ) {
                                                            e.next = 10;
                                                            break;
                                                        }
                                                        (a.preview_path = a.videos.results[0].key), (e.next = 18);
                                                        break;
                                                    case 10:
                                                        if (!t.edit || !t.form.movie.preview_path) {
                                                            e.next = 14;
                                                            break;
                                                        }
                                                        (a.preview_path = t.form.movie.preview_path), (e.next = 18);
                                                        break;
                                                    case 14:
                                                        return (e.next = 16), http.get("https://api.themoviedb.org/3/movie/" + t.tmdb + "/videos?api_key=" + t.settings.tmdb_api_key);
                                                    case 16:
                                                        (s = e.sent).data.results[0] && (a.preview_path = s.data.results[0].key);
                                                    case 18:
                                                        a.original_title && (a.original_name = a.original_title),
                                                            a.poster_path && (a.poster_path = t.settings.imdb_cover_path + a.poster_path),
                                                            a.backdrop_path && (a.backdrop_path = t.settings.imdb_cover_path + a.backdrop_path),
                                                            a.imdb_id && (a.imdb_external_id = a.imdb_id),
                                                            (r = []),
                                                            (n = o(s.data.casts.cast));
                                                        try {
                                                            for (
                                                                c = function () {
                                                                    var e = l.value;
                                                                    e.profile_path && (e.profile_path = t.settings.imdb_cover_path + e.profile_path),
                                                                        axios.get("https://api.themoviedb.org/3/person/" + e.id + "?api_key=" + t.settings.tmdb_api_key + "&language=" + t.settings.tmdb_lang.iso_639_1).then(function (t) {
                                                                            t.data.biography && (e.biography = t.data.biography),
                                                                                t.data.popularity && (e.popularity = t.data.popularity),
                                                                                t.data.place_of_birth && (e.place_of_birth = t.data.place_of_birth),
                                                                                t.data.birthday && (e.birthday = t.data.birthday);
                                                                        }),
                                                                        r.push(e);
                                                                },
                                                                    n.s();
                                                                !(l = n.n()).done;

                                                            )
                                                                c();
                                                        } catch (t) {
                                                            n.e(t);
                                                        } finally {
                                                            n.f();
                                                        }
                                                        (a.casterslist = r), (d = []), (a.networks = d), (t.form.movie = a), (e.next = 34);
                                                        break;
                                                    case 31:
                                                        (e.prev = 31), (e.t0 = e.catch(0)), t.showError("you entred a serie id or the id is invalid !");
                                                    case 34:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 31]]
                                    );
                                })
                            )();
                        },
                        getSearchByName: function (t) {
                            var e = this.settings.tmdb_api_key,
                                s = this.settings.tmdb_lang.iso_639_1,
                                a = "".concat("https://api.themoviedb.org/3/search/movie?api_key=").concat(e, "&language=").concat(s, "&query=").concat(encodeURI(t), "&include_adult=false=");
                            return new Promise(function (e) {
                                if (t.length < 1) return e([]);
                                fetch(a)
                                    .then(function (t) {
                                        return t.json();
                                    })
                                    .then(function (t) {
                                        e(t.results);
                                    });
                            });
                        },
                        getResultValue: function (t) {
                            return t.title + " - (Original Name :" + t.original_title + " - " + t.release_date + ")";
                        },
                        onSubmit: function (t) {
                            (this.tmdb = t.id), this.getMovie();
                        },
                        getMovie: function () {
                            var t = this;
                            return d(
                                i.a.mark(function e() {
                                    var s, a, r, n, l, c, d;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (
                                                            (e.prev = 0),
                                                            (e.next = 3),
                                                            http.get(
                                                                "https://api.themoviedb.org/3/movie/" + t.tmdb + "?api_key=" + t.settings.tmdb_api_key + "&language=" + t.settings.tmdb_lang.iso_639_1 + "&append_to_response=videos,casts"
                                                            )
                                                        );
                                                    case 3:
                                                        (s = e.sent),
                                                            ((a = _.mapKeys(s.data, function (t, e) {
                                                                return "id" === e ? "tmdb_id" : e;
                                                            })).id = t.form.movie.id),
                                                            void 0 !== a.videos.results[0] ? (a.preview_path = a.videos.results[0].key) : t.edit && t.form.movie.preview_path && (a.preview_path = t.form.movie.preview_path),
                                                            a.poster_path && (a.poster_path = t.settings.imdb_cover_path + a.poster_path),
                                                            a.backdrop_path && (a.backdrop_path = t.settings.imdb_cover_path + a.backdrop_path),
                                                            a.original_title && (a.original_name = a.original_title),
                                                            a.imdb_id && (a.imdb_external_id = a.imdb_id),
                                                            a.original_title && (a.original_name = a.original_title),
                                                            (r = []),
                                                            (n = o(s.data.casts.cast));
                                                        try {
                                                            for (n.s(); !(l = n.n()).done; )
                                                                (c = l.value).profile_path && (c.profile_path = t.settings.imdb_cover_path + c.profile_path), console.log(c.profile_path), console.log(c.name), r.push(c);
                                                        } catch (t) {
                                                            n.e(t);
                                                        } finally {
                                                            n.f();
                                                        }
                                                        (a.casterslist = r), (d = []), (a.networks = d), (t.form.movie = a), (e.next = 24);
                                                        break;
                                                    case 21:
                                                        (e.prev = 21), (e.t0 = e.catch(0)), t.showError("you entred a serie id or the id is invalid !");
                                                    case 24:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 21]]
                                    );
                                })
                            )();
                        },
                        store: function () {
                            var t = this;
                            axios
                                .post(url + "/admin/moviesmedia/storemovie", this.form)
                                .then(function (e) {
                                    (t.add = !1),
                                        (t.edit = !1),
                                        (t.index = !0),
                                        (t.form.movie = {}),
                                        (t.form.links = []),
                                        (t.form.linksDownloads = []),
                                        (t.form.linksubs = []),
                                        (t.tmdb = null),
                                        (t.link = ""),
                                        (t.linkDownload = ""),
                                        (t.linksubstitle = ""),
                                        (t.typesubstitle = ""),
                                        (t.server = ""),
                                        (t.serverdownload = ""),
                                        (t.video = null),
                                        (t.Download = null),
                                        (t.substitle = null),
                                        t.movies.data.unshift(e.data.body),
                                        t.showSuccess(e.data.message),
                                        axios.get(url + "/admin/movies/dataweb?page=" + t.pageNum).then(function (e) {
                                            t.movies = e.data;
                                        });
                                })
                                .catch(function (e) {
                                    t.showError(e.response);
                                });
                        },
                        update: function () {
                            var t = this;
                            axios
                                .put(url + "/admin/moviesmedia/updatemovie/" + this.form.movie.id, this.form)
                                .then(function (e) {
                                    (t.add = !1),
                                        (t.edit = !1),
                                        (t.index = !0),
                                        (t.form.movie = {}),
                                        (t.form.links = []),
                                        (t.form.linksDownloads = []),
                                        (t.form.linksubs = []),
                                        (t.tmdb = null),
                                        (t.link = ""),
                                        (t.linkDownload = ""),
                                        (t.linksubstitle = ""),
                                        (t.typesubstitle = ""),
                                        (t.server = ""),
                                        (t.serverdownload = ""),
                                        t.showSuccess(e.data.message),
                                        axios.get(url + "/admin/movies/dataweb?page=" + t.pageNum).then(function (e) {
                                            t.movies = e.data;
                                        });
                                })
                                .catch(function (e) {
                                    t.showError(e.message.message);
                                });
                        },
                        destroy: function (t) {
                            var e = this;
                            this.showConfirm(
                                d(
                                    i.a.mark(function s() {
                                        var a, r;
                                        return i.a.wrap(
                                            function (s) {
                                                for (;;)
                                                    switch ((s.prev = s.next)) {
                                                        case 0:
                                                            return (s.prev = 0), (s.next = 3), axios.delete(url + "/admin/movies/destroy/" + t);
                                                        case 3:
                                                            (a = s.sent),
                                                                (r = e.movies.data.findIndex(function (e) {
                                                                    return e.id === t;
                                                                })),
                                                                e.movies.data.splice(r, 1),
                                                                e.showSuccess(a.data.message),
                                                                (s.next = 12);
                                                            break;
                                                        case 9:
                                                            (s.prev = 9), (s.t0 = s.catch(0)), e.showError();
                                                        case 12:
                                                        case "end":
                                                            return s.stop();
                                                    }
                                            },
                                            s,
                                            null,
                                            [[0, 9]]
                                        );
                                    })
                                )
                            );
                        },
                        storePoster: function (t) {
                            var e = this;
                            return d(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        if (void 0 === t.target.files[0]) {
                                                            s.next = 15;
                                                            break;
                                                        }
                                                        return (s.prev = 1), (e.poster = t.target.files[0]), (a = new FormData()).append("image", e.poster), (s.next = 7), axios.post(url + "/admin/movies/image/store", a);
                                                    case 7:
                                                        (r = s.sent), (e.form.movie.poster_path = r.data.image_path), e.showSuccess(r.data.message), (s.next = 15);
                                                        break;
                                                    case 12:
                                                        (s.prev = 12), (s.t0 = s.catch(1)), e.showError(s.t0.response);
                                                    case 15:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[1, 12]]
                                    );
                                })
                            )();
                        },
                        storeBackdrop: function (t) {
                            var e = this;
                            return d(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        if (void 0 === t.target.files[0]) {
                                                            s.next = 15;
                                                            break;
                                                        }
                                                        return (s.prev = 1), (e.backdrop = t.target.files[0]), (a = new FormData()).append("image", e.backdrop), (s.next = 7), axios.post(url + "/admin/movies/image/store", a);
                                                    case 7:
                                                        (r = s.sent), (e.form.movie.backdrop_path = r.data.image_path), e.showSuccess(r.data.message), (s.next = 15);
                                                        break;
                                                    case 12:
                                                        (s.prev = 12), (s.t0 = s.catch(1)), e.showError(s.t0.response);
                                                    case 15:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[1, 12]]
                                    );
                                })
                            )();
                        },
                        storeVideoDownload: function (t) {
                            var e = this;
                            return d(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        if (((s.prev = 0), "" !== e.serverdownload)) {
                                                            s.next = 4;
                                                            break;
                                                        }
                                                        return e.showAlert("You need to select a server before uploading a link"), s.abrupt("return");
                                                    case 4:
                                                        return (
                                                            (e.video = t.target.files[0]),
                                                            (a = new FormData()).append("video", e.video),
                                                            (s.next = 9),
                                                            axios.post(url + "/admin/video/store", a, {
                                                                onUploadProgress: function (t) {
                                                                    (e.isuploading = !0), (e.percent = Math.round((t.loaded / t.total) * 100));
                                                                },
                                                            })
                                                        );
                                                    case 9:
                                                        (r = s.sent),
                                                            (e.linkDownload = r.data.video_path),
                                                            (e.serverdownload = { name: e.serverdownload.name, lang: e.lang.english_name && "No Language" !== e.lang.english_name ? e.lang.english_name : e.settings.tmdb_lang.english_name }),
                                                            e.showSuccess(r.data.message),
                                                            setTimeout(function () {
                                                                return (e.isuploading = !1);
                                                            }, 2e3),
                                                            (s.next = 20);
                                                        break;
                                                    case 16:
                                                        (s.prev = 16),
                                                            (s.t0 = s.catch(0)),
                                                            e.showError(),
                                                            setTimeout(function () {
                                                                return (e.isuploading = !1);
                                                            }, 2e3);
                                                    case 20:
                                                        return (s.prev = 20), s.finish(20);
                                                    case 22:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 16, 20, 22]]
                                    );
                                })
                            )();
                        },
                        storeVideo: function (t) {
                            var e = this;
                            return d(
                                i.a.mark(function s() {
                                    var a, r, n;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (
                                                            (s.prev = 0),
                                                            (a = e.form.movie.title),
                                                            (e.video = t.target.files[0]),
                                                            (r = new FormData()).append("video", e.video),
                                                            r.append("movie_title", a.replace(/ /g, "_")),
                                                            (s.next = 8),
                                                            axios.post(url + "/admin/video/store", r, {
                                                                onUploadProgress: function (t) {
                                                                    (e.isuploading = !0), (e.percent = Math.round((t.loaded / t.total) * 100));
                                                                },
                                                            })
                                                        );
                                                    case 8:
                                                        (n = s.sent),
                                                            (e.video_name = n.data.video_name),
                                                            (e.link = n.data.video_path),
                                                            (e.server = { name: n.data.server }),
                                                            e.showSuccess(n.data.message),
                                                            console.log(r),
                                                            setTimeout(function () {
                                                                return (e.isuploading = !1);
                                                            }, 2e3),
                                                            (s.next = 21);
                                                        break;
                                                    case 17:
                                                        (s.prev = 17),
                                                            (s.t0 = s.catch(0)),
                                                            e.showError(),
                                                            setTimeout(function () {
                                                                return (e.isuploading = !1);
                                                            }, 2e3);
                                                    case 21:
                                                        return (s.prev = 21), s.finish(21);
                                                    case 23:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 17, 21, 23]]
                                    );
                                })
                            )();
                        },
                        storeVideoTrailer: function (t) {
                            var e = this;
                            return d(
                                i.a.mark(function s() {
                                    var a, r, n;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (
                                                            (s.prev = 0),
                                                            (a = e.form.movie.title),
                                                            (e.video_trailer = t.target.files[0]),
                                                            (r = new FormData()).append("video", e.video_trailer),
                                                            r.append("movie_title", a.replace(/ /g, "_")),
                                                            (s.next = 8),
                                                            axios.post(url + "/admin/video/store", r, {
                                                                onUploadProgress: function (t) {
                                                                    (e.isuploading = !0), (e.percent = Math.round((t.loaded / t.total) * 100));
                                                                },
                                                            })
                                                        );
                                                    case 8:
                                                        (n = s.sent),
                                                            (e.form.movie.trailer_url = n.data.video_path),
                                                            e.showSuccess(n.data.message),
                                                            console.log(r),
                                                            setTimeout(function () {
                                                                return (e.isuploading = !1);
                                                            }, 2e3),
                                                            (s.next = 19);
                                                        break;
                                                    case 15:
                                                        (s.prev = 15),
                                                            (s.t0 = s.catch(0)),
                                                            e.showError(),
                                                            setTimeout(function () {
                                                                return (e.isuploading = !1);
                                                            }, 2e3);
                                                    case 19:
                                                        return (s.prev = 19), s.finish(19);
                                                    case 21:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 15, 19, 21]]
                                    );
                                })
                            )();
                        },
                        storeSubstitle: function (t) {
                            var e = this;
                            return d(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (s.prev = 0), (e.substitle = t.target.files[0]), (a = new FormData()).append("substitle", e.substitle), (s.next = 6), axios.post(url + "/admin/substitle/store", a);
                                                    case 6:
                                                        (r = s.sent), (e.linksubstitle = r.data.substitle_path), e.showSuccess(r.data.message), (e.zip = !0), (s.next = 15);
                                                        break;
                                                    case 12:
                                                        (s.prev = 12), (s.t0 = s.catch(0)), e.showError();
                                                    case 15:
                                                        return (s.prev = 15), s.finish(15);
                                                    case 17:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 12, 15, 17]]
                                    );
                                })
                            )();
                        },
                        addLink: function () {
                            "" !== this.server && "" !== this.link && "" !== this.form.movie
                                ? (this.form.links.unshift({
                                      server: this.server.name,
                                      header: this.header.name,
                                      useragent: this.useragent.name,
                                      link: this.link,
                                      video_name: this.video_name,
                                      lang: this.lang.english_name && "No Language" !== this.lang.english_name ? this.lang.english_name : this.settings.tmdb_lang.english_name,
                                      embed: this.embed,
                                      supported_hosts: this.supported_hosts,
                                      hls: this.hls,
                                  }),
                                  (this.link = ""),
                                  (this.server = ""),
                                  (this.header = ""),
                                  (this.useragent = ""),
                                  (this.video_name = ""),
                                  (this.lang = ""),
                                  (this.video = ""),
                                  (this.supported_hosts = !1),
                                  (this.embed = !1),
                                  (this.hls = !1))
                                : this.showAlert("You need to select a server before adding a link");
                        },
                        addLinkDownload: function () {
                            "" !== this.serverdownload && "" !== this.form.movie
                                ? (this.form.linksDownloads.unshift({
                                      server: this.serverdownload.name,
                                      header: this.headerdownload.name,
                                      useragent: this.useragentdownload.name,
                                      link: this.linkDownload,
                                      lang: this.lang.english_name && "No Language" !== this.lang.english_name ? this.lang.english_name : this.settings.tmdb_lang.english_name,
                                      supported_hosts: this.supported_hosts_download,
                                      alldebrid_supported_hosts: this.alldebrid_supported_hosts_download,
                                      external: this.external,
                                  }),
                                  (this.linkDownload = ""),
                                  (this.serverdownload = ""),
                                  (this.headerdownload = ""),
                                  (this.useragentdownload = ""),
                                  (this.Download = ""),
                                  (this.supported_hosts_download = !1),
                                  (this.alldebrid_supported_hosts_download = !1),
                                  (this.external = !1))
                                : this.showAlert("You need to select a server before adding a link");
                        },
                        addSubs: function () {
                            "" !== this.linksubstitle &&
                                "" !== this.form.susbstitle &&
                                (this.form.linksubs.unshift({
                                    link: this.linksubstitle,
                                    type: this.typesubstitle,
                                    zip: this.zip,
                                    lang: this.langsub.english_name && "No Language" !== this.langsub.english_name ? this.langsub.english_name : this.settings.tmdb_lang.english_name,
                                }),
                                (this.linksubstitle = ""),
                                (this.typesubstitle = ""),
                                (this.substitle = null),
                                (this.zip = !1));
                        },
                        destroySubs: function (t, e) {
                            var s = this;
                            this.showConfirm(function () {
                                t.id &&
                                    axios
                                        .delete(url + "/admin/movies/substitles/destroy/" + t.id)
                                        .then(function (t) {
                                            s.showSuccess(t.data.message);
                                        })
                                        .catch(function (t) {
                                            s.showError();
                                        }),
                                    s.form.linksubs.splice(e, 1);
                            });
                        },
                        send: function (t) {
                            var e = this;
                            return d(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (
                                                            (e.form.movie = t),
                                                            console.log(t.title),
                                                            (s.prev = 2),
                                                            (a = { headers: { Authorization: "key=" + e.settings.authorization } }),
                                                            (r = { to: "/topics/all", data: { title: t.title, message: t.overview, image: t.backdrop_path, type: "0", tmdb: t.id } }),
                                                            (s.next = 7),
                                                            http.post("https://fcm.googleapis.com/fcm/send", r, a)
                                                        );
                                                    case 7:
                                                        e.showSuccess(), (e.title = ""), (e.body = ""), (e.image = ""), (s.next = 16);
                                                        break;
                                                    case 13:
                                                        (s.prev = 13), (s.t0 = s.catch(2)), e.showError();
                                                    case 16:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[2, 13]]
                                    );
                                })
                            )();
                        },
                        storeMiniCover: function (t) {
                            var e = this;
                            return d(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        if (void 0 === t.target.files[0]) {
                                                            s.next = 14;
                                                            break;
                                                        }
                                                        return (s.prev = 1), (e.backdrop = t.target.files[0]), (a = new FormData()).append("image", e.backdrop), (s.next = 7), axios.post(url + "/admin/preview/image/store", a);
                                                    case 7:
                                                        (r = s.sent), (e.form.movie.minicover = r.data.image_path), (s.next = 14);
                                                        break;
                                                    case 11:
                                                        (s.prev = 11), (s.t0 = s.catch(1)), e.showError(s.t0.response);
                                                    case 14:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[1, 11]]
                                    );
                                })
                            )();
                        },
                        destroyLink: function (t, e) {
                            var s = this;
                            this.showConfirm(function () {
                                t.id
                                    ? axios
                                          .delete(url + "/admin/movies/videos/destroy/" + t.id)
                                          .then(function (t) {
                                              s.showSuccess(t.data.message);
                                          })
                                          .catch(function (t) {
                                              s.showError();
                                          })
                                    : console.log(t.id),
                                    s.form.links.splice(e, 1);
                            });
                        },
                        destroyLinkDownload: function (t, e) {
                            var s = this;
                            this.showConfirm(function () {
                                t.id &&
                                    axios
                                        .delete(url + "/admin/movies/downloads/destroy/" + t.id)
                                        .then(function (t) {
                                            s.showSuccess(t.data.message);
                                        })
                                        .catch(function (t) {
                                            s.showError(t);
                                        }),
                                    s.form.linksDownloads.splice(e, 1);
                            });
                        },
                        destroyGenre: function (t) {
                            var e = this;
                            void 0 !== t.genre &&
                                axios
                                    .delete(url + "/admin/movies/genres/destroy/" + t.id)
                                    .then(function (t) {
                                        return e.showSuccess(t.data.message);
                                    })
                                    .catch(function (t) {
                                        return e.showError();
                                    });
                        },
                        destroyCast: function (t) {
                            var e = this;
                            null !== t.cast &&
                                axios
                                    .delete(url + "/admin/movies/casts/destroy/" + t.id)
                                    .then(function (t) {
                                        return e.showSuccess(t.data.message);
                                    })
                                    .catch(function (t) {
                                        return e.showError(t);
                                    }),
                                console.log(t.cast);
                        },
                        destroyNetwork: function (t) {
                            var e = this;
                            null !== t.network &&
                                axios
                                    .delete(url + "/admin/movies/networks/destroy/" + t.id)
                                    .then(function (t) {
                                        return e.showSuccess(t.data.message);
                                    })
                                    .catch(function (t) {
                                        return e.showError(t);
                                    });
                        },
                    },
                    computed: {
                        filteredMovies: function () {
                            var t = this;
                            return this.moviesall.filter(function (e) {
                                return e.title.toLowerCase().match(t.search.toLowerCase());
                            });
                        },
                    },
                    mixins: [r.a, n.a],
                },
                m = (s(525), s(4)),
                p = Object(m.a)(
                    u,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            s("div", { staticClass: "col-md-12 grid-margin" }, [
                                s("div", { staticClass: "d-flex justify-content-between flex-wrap" }, [
                                    t._m(0),
                                    t._v(" "),
                                    s("div", { staticClass: "d-flex justify-content-between align-items-end flex-wrap" }, [
                                        t.index
                                            ? s(
                                                  "button",
                                                  {
                                                      staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                      on: {
                                                          click: function (e) {
                                                              return t.create();
                                                          },
                                                      },
                                                  },
                                                  [t._v("\n            Add Movie\n          ")]
                                              )
                                            : t._e(),
                                        t._v(" "),
                                        t.index
                                            ? t._e()
                                            : s(
                                                  "button",
                                                  {
                                                      staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                      on: {
                                                          click: function (e) {
                                                              return t.back();
                                                          },
                                                      },
                                                  },
                                                  [t._v("\n            Back\n          ")]
                                              ),
                                    ]),
                                ]),
                            ]),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-md-6 grid-margin" }, [
                                      s("ul", { staticClass: "navbar-nav mr-lg-4 w-100" }, [
                                          s("li", { staticClass: "nav-item nav-search d-none d-lg-block w-100" }, [
                                              s("div", { staticClass: "input-group" }, [
                                                  t._m(1),
                                                  t._v(" "),
                                                  s("input", {
                                                      directives: [{ name: "model", rawName: "v-model", value: t.search, expression: "search" }],
                                                      staticClass: "form-control",
                                                      attrs: { type: "search", placeholder: "Search now", "aria-label": "search", "aria-describedby": "search" },
                                                      domProps: { value: t.search },
                                                      on: {
                                                          keyup: t.searchUnit,
                                                          input: function (e) {
                                                              e.target.composing || (t.search = e.target.value);
                                                          },
                                                      },
                                                  }),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s(
                                                  "div",
                                                  { staticClass: "table-responsive" },
                                                  [
                                                      s("table", { staticClass: "table", attrs: { "aria-describedby": "table movies", id: "table movies" } }, [
                                                          t._m(2),
                                                          t._v(" "),
                                                          s(
                                                              "tbody",
                                                              t._l(t.movies.data, function (e) {
                                                                  return s("tr", { key: e.id }, [
                                                                      s("td", { staticClass: "text-center" }, [s("img", { attrs: { src: e.poster_path, alt: "poster path", height: "80", width: "80" } })]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.id))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.tmdb_id))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.views))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.title))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.vote_average))]),
                                                                      t._v(" "),
                                                                      1 === e.pinned
                                                                          ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check", staticStyle: { color: "green" } })])
                                                                          : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close", staticStyle: { color: "red" } })]),
                                                                      t._v(" "),
                                                                      1 === e.active
                                                                          ? s("td", { staticClass: "text-center" }, [s("label", { staticClass: "badge badge-success" }, [t._v("Visible")])])
                                                                          : s("td", { staticClass: "text-center" }, [s("label", { staticClass: "badge badge-danger" }, [t._v("Invisible")])]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [
                                                                          s("div", { staticClass: "list-icons" }, [
                                                                              s(
                                                                                  "a",
                                                                                  {
                                                                                      staticClass: "list-icons-item mr-2",
                                                                                      attrs: { "data-original-title": "Send Notification", rel: "tooltip", title: "" },
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return t.send(e);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [s("em", { staticClass: "mdi mdi-bell-ring menu-icon", staticStyle: { color: "#4d83ff" } })]
                                                                              ),
                                                                              t._v(" "),
                                                                              s(
                                                                                  "a",
                                                                                  {
                                                                                      staticClass: "list-icons-item mr-2",
                                                                                      attrs: { "data-original-title": "Edit", rel: "tooltip", title: "" },
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return t.editing(e);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [s("em", { staticClass: "mdi mdi-pencil fa-lg", staticStyle: { color: "#4d83ff" } })]
                                                                              ),
                                                                              t._v(" "),
                                                                              s(
                                                                                  "a",
                                                                                  {
                                                                                      staticClass: "list-icons-item text-warning",
                                                                                      attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return t.destroy(e.id);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                              ),
                                                                          ]),
                                                                      ]),
                                                                  ]);
                                                              }),
                                                              0
                                                          ),
                                                      ]),
                                                      t._v(" "),
                                                      s("pagination", {
                                                          staticClass: "pagination flex-wrap pagination-flat pagination-success",
                                                          attrs: { data: t.movies, "show-disabled": !1, limit: 5, size: t.size, align: t.align },
                                                          on: { "pagination-change-page": t.getResults },
                                                      }),
                                                  ],
                                                  1
                                              ),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.add || t.edit
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s("section", [
                                                  s("div", { staticClass: "poster-container" }, [
                                                      t.form.movie.poster_path
                                                          ? s("img", { staticClass: "poster", attrs: { src: t.form.movie.poster_path, alt: "movie poster", "data-loaded": "true", height: "316", width: "210" } })
                                                          : t._e(),
                                                      t._v(" "),
                                                      s("div", { staticClass: "many-inputs" }, [
                                                          s("div", { staticClass: "input-container" }, [
                                                              s(
                                                                  "div",
                                                                  { staticClass: "form-group" },
                                                                  [
                                                                      s("autocomplete", {
                                                                          attrs: {
                                                                              search: t.getSearchByName,
                                                                              placeholder: "Search Movie by Name",
                                                                              "aria-label": "Search Movie by Name",
                                                                              "data-loading": "true",
                                                                              "data-position": "above",
                                                                              "get-result-value": t.getResultValue,
                                                                          },
                                                                          on: { submit: t.onSubmit },
                                                                      }),
                                                                  ],
                                                                  1
                                                              ),
                                                              t._v(" "),
                                                              s("div", { staticClass: "form-group" }, [
                                                                  s("div", { staticClass: "input-group" }, [
                                                                      s("input", {
                                                                          directives: [{ name: "model", rawName: "v-model", value: t.tmdb, expression: "tmdb" }],
                                                                          staticClass: "form-control",
                                                                          attrs: { type: "text", placeholder: "Example : tt7286456", "aria-label": "Search Movie" },
                                                                          domProps: { value: t.tmdb },
                                                                          on: {
                                                                              input: function (e) {
                                                                                  e.target.composing || (t.tmdb = e.target.value);
                                                                              },
                                                                          },
                                                                      }),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "input-group-append" }, [
                                                                          s(
                                                                              "button",
                                                                              {
                                                                                  staticClass: "btn btn-sm btn-primary",
                                                                                  attrs: { type: "type", disabled: !t.settings.tmdb_api_key },
                                                                                  on: {
                                                                                      click: function (e) {
                                                                                          return t.getMovieById();
                                                                                      },
                                                                                  },
                                                                              },
                                                                              [t._v("\n                          Search\n                        ")]
                                                                          ),
                                                                      ]),
                                                                  ]),
                                                              ]),
                                                              t._v(" "),
                                                              s("div", { staticClass: "input-container" }, [
                                                                  s("div", { staticClass: "row" }, [
                                                                      s("div", { staticClass: "col-md-6" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "title" } }, [t._v("Movie Title")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.movie.title, expression: "form.movie.title" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "title", type: "text" },
                                                                                  domProps: { value: t.form.movie.title },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.movie, "title", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-6" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "original_title" } }, [t._v("Original title")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.movie.original_name, expression: "form.movie.original_name" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "original_title", type: "text" },
                                                                                  domProps: { value: t.form.movie.original_name },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.movie, "original_name", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                  ]),
                                                              ]),
                                                              t._v(" "),
                                                              s("div", { staticClass: "input-container" }, [
                                                                  s("div", { staticClass: "row" }, [
                                                                      s("div", { staticClass: "col-md-3" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                  s("input", {
                                                                                      directives: [{ name: "model", rawName: "v-model", value: t.form.movie.premuim, expression: "form.movie.premuim" }],
                                                                                      staticClass: "custom-control-input",
                                                                                      attrs: { id: "premuim", type: "checkbox" },
                                                                                      domProps: { checked: Array.isArray(t.form.movie.premuim) ? t._i(t.form.movie.premuim, null) > -1 : t.form.movie.premuim },
                                                                                      on: {
                                                                                          change: function (e) {
                                                                                              var s = t.form.movie.premuim,
                                                                                                  a = e.target,
                                                                                                  i = !!a.checked;
                                                                                              if (Array.isArray(s)) {
                                                                                                  var r = t._i(s, null);
                                                                                                  a.checked
                                                                                                      ? r < 0 && t.$set(t.form.movie, "premuim", s.concat([null]))
                                                                                                      : r > -1 && t.$set(t.form.movie, "premuim", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                              } else t.$set(t.form.movie, "premuim", i);
                                                                                          },
                                                                                      },
                                                                                  }),
                                                                                  t._v(" "),
                                                                                  s("label", { staticClass: "custom-control-label", attrs: { for: "premuim" } }, [
                                                                                      t._v("\n                              Premuim Only\n                            "),
                                                                                  ]),
                                                                              ]),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      t.edit
                                                                          ? s("div", { staticClass: "col-md-3" }, [
                                                                                s("div", { staticClass: "form-group" }, [
                                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                        s("input", {
                                                                                            directives: [{ name: "model", rawName: "v-model", value: t.form.movie.active, expression: "form.movie.active" }],
                                                                                            staticClass: "custom-control-input",
                                                                                            attrs: { id: "active", type: "checkbox" },
                                                                                            domProps: { checked: Array.isArray(t.form.movie.active) ? t._i(t.form.movie.active, null) > -1 : t.form.movie.active },
                                                                                            on: {
                                                                                                change: function (e) {
                                                                                                    var s = t.form.movie.active,
                                                                                                        a = e.target,
                                                                                                        i = !!a.checked;
                                                                                                    if (Array.isArray(s)) {
                                                                                                        var r = t._i(s, null);
                                                                                                        a.checked
                                                                                                            ? r < 0 && t.$set(t.form.movie, "active", s.concat([null]))
                                                                                                            : r > -1 && t.$set(t.form.movie, "active", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                                    } else t.$set(t.form.movie, "active", i);
                                                                                                },
                                                                                            },
                                                                                        }),
                                                                                        t._v(" "),
                                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "active" } }, [t._v("Active")]),
                                                                                    ]),
                                                                                ]),
                                                                            ])
                                                                          : t._e(),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-3" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                  s("input", {
                                                                                      directives: [{ name: "model", rawName: "v-model", value: t.form.movie.pinned, expression: "form.movie.pinned" }],
                                                                                      staticClass: "custom-control-input",
                                                                                      attrs: { id: "pinned", type: "checkbox" },
                                                                                      domProps: { checked: Array.isArray(t.form.movie.pinned) ? t._i(t.form.movie.pinned, null) > -1 : t.form.movie.pinned },
                                                                                      on: {
                                                                                          change: function (e) {
                                                                                              var s = t.form.movie.pinned,
                                                                                                  a = e.target,
                                                                                                  i = !!a.checked;
                                                                                              if (Array.isArray(s)) {
                                                                                                  var r = t._i(s, null);
                                                                                                  a.checked
                                                                                                      ? r < 0 && t.$set(t.form.movie, "pinned", s.concat([null]))
                                                                                                      : r > -1 && t.$set(t.form.movie, "pinned", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                              } else t.$set(t.form.movie, "pinned", i);
                                                                                          },
                                                                                      },
                                                                                  }),
                                                                                  t._v(" "),
                                                                                  s("label", { staticClass: "custom-control-label", attrs: { for: "pinned" } }, [t._v("Pinned")]),
                                                                              ]),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      t.add
                                                                          ? s("div", { staticClass: "col-md-3" }, [
                                                                                s("div", { staticClass: "form-group" }, [
                                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                        s("input", {
                                                                                            directives: [{ name: "model", rawName: "v-model", value: t.form.notification, expression: "form.notification" }],
                                                                                            staticClass: "custom-control-input",
                                                                                            attrs: { id: "notification", type: "checkbox" },
                                                                                            domProps: { checked: Array.isArray(t.form.notification) ? t._i(t.form.notification, null) > -1 : t.form.notification },
                                                                                            on: {
                                                                                                change: function (e) {
                                                                                                    var s = t.form.notification,
                                                                                                        a = e.target,
                                                                                                        i = !!a.checked;
                                                                                                    if (Array.isArray(s)) {
                                                                                                        var r = t._i(s, null);
                                                                                                        a.checked
                                                                                                            ? r < 0 && t.$set(t.form, "notification", s.concat([null]))
                                                                                                            : r > -1 && t.$set(t.form, "notification", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                                    } else t.$set(t.form, "notification", i);
                                                                                                },
                                                                                            },
                                                                                        }),
                                                                                        t._v(" "),
                                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "notification" } }, [t._v("Push Notification")]),
                                                                                    ]),
                                                                                ]),
                                                                            ])
                                                                          : t._e(),
                                                                  ]),
                                                              ]),
                                                              t._v(" "),
                                                              s("div", { staticClass: "input-container" }, [
                                                                  s("div", { staticClass: "row" }, [
                                                                      s("div", { staticClass: "col-md-3" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                  s("input", {
                                                                                      directives: [{ name: "model", rawName: "v-model", value: t.form.movie.hasrecap, expression: "form.movie.hasrecap" }],
                                                                                      staticClass: "custom-control-input",
                                                                                      attrs: { id: "hasrecap", type: "checkbox" },
                                                                                      domProps: { checked: Array.isArray(t.form.movie.hasrecap) ? t._i(t.form.movie.hasrecap, null) > -1 : t.form.movie.hasrecap },
                                                                                      on: {
                                                                                          change: function (e) {
                                                                                              var s = t.form.movie.hasrecap,
                                                                                                  a = e.target,
                                                                                                  i = !!a.checked;
                                                                                              if (Array.isArray(s)) {
                                                                                                  var r = t._i(s, null);
                                                                                                  a.checked
                                                                                                      ? r < 0 && t.$set(t.form.movie, "hasrecap", s.concat([null]))
                                                                                                      : r > -1 && t.$set(t.form.movie, "hasrecap", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                              } else t.$set(t.form.movie, "hasrecap", i);
                                                                                          },
                                                                                      },
                                                                                  }),
                                                                                  t._v(" "),
                                                                                  s("label", { staticClass: "custom-control-label", attrs: { for: "hasrecap" } }, [t._v("Movie has Skip Recap ?")]),
                                                                              ]),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-3" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "skiprecap_start_in" } }, [t._v("Movie Start in (Exprime in sec !)")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.movie.skiprecap_start_in, expression: "form.movie.skiprecap_start_in" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "poster_path", name: "skiprecap_start_in", type: "text" },
                                                                                  domProps: { value: t.form.movie.skiprecap_start_in },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.movie, "skiprecap_start_in", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                  ]),
                                                              ]),
                                                              t._v(" "),
                                                              s("div", { staticClass: "input-container" }, [
                                                                  s("div", { staticClass: "row" }, [
                                                                      s("div", { staticClass: "col-md-4" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "poster_path" } }, [t._v("Poster Path")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.movie.poster_path, expression: "form.movie.poster_path" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "poster_path", name: "poster_path", type: "text" },
                                                                                  domProps: { value: t.form.movie.poster_path },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.movie, "poster_path", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-4" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", [t._v("Poster upload")]),
                                                                              t._v(" "),
                                                                              s("input", { staticClass: "file-upload-default" }),
                                                                              t._v(" "),
                                                                              s("div", { staticClass: "input-group col-xs-12" }, [
                                                                                  s("input", {
                                                                                      staticClass: "form-control file-upload-info",
                                                                                      attrs: { id: "poster", placeholder: "Upload Image", type: "file" },
                                                                                      on: { change: t.storePoster },
                                                                                  }),
                                                                                  t._v(" "),
                                                                                  t._m(3),
                                                                              ]),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-4" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "imdb_external_id" } }, [t._v("IMDB External ID")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.movie.imdb_external_id, expression: "form.movie.imdb_external_id" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "poster_path", name: "imdb_external_id", type: "text" },
                                                                                  domProps: { value: t.form.movie.imdb_external_id },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.movie, "imdb_external_id", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                  ]),
                                                              ]),
                                                              t._v(" "),
                                                              s("div", { staticClass: "row" }, [
                                                                  s("div", { staticClass: "col-md-12" }, [
                                                                      s(
                                                                          "div",
                                                                          { staticClass: "form-group" },
                                                                          [
                                                                              s("multiselect", {
                                                                                  attrs: {
                                                                                      "clear-on-select": !1,
                                                                                      "close-on-select": !1,
                                                                                      hideSelected: !0,
                                                                                      multiple: !0,
                                                                                      options: t.options,
                                                                                      "preserve-search": !0,
                                                                                      label: "name",
                                                                                      placeholder: "Select Genre",
                                                                                      "track-by": "name",
                                                                                  },
                                                                                  on: { remove: t.destroyGenre },
                                                                                  model: {
                                                                                      value: t.form.movie.genres,
                                                                                      callback: function (e) {
                                                                                          t.$set(t.form.movie, "genres", e);
                                                                                      },
                                                                                      expression: "form.movie.genres",
                                                                                  },
                                                                              }),
                                                                          ],
                                                                          1
                                                                      ),
                                                                  ]),
                                                              ]),
                                                              t._v(" "),
                                                              s("div", { staticClass: "row" }, [
                                                                  s("div", { staticClass: "col-md-6" }, [
                                                                      s("div", { staticClass: "form-group" }, [
                                                                          s("label", { attrs: { for: "poster_path" } }, [t._v("Backdrop Path")]),
                                                                          t._v(" "),
                                                                          s("input", {
                                                                              directives: [{ name: "model", rawName: "v-model", value: t.form.movie.backdrop_path, expression: "form.movie.backdrop_path" }],
                                                                              staticClass: "form-control",
                                                                              attrs: { id: "backdrop_path", name: "backdrop_path", type: "text" },
                                                                              domProps: { value: t.form.movie.backdrop_path },
                                                                              on: {
                                                                                  input: function (e) {
                                                                                      e.target.composing || t.$set(t.form.movie, "backdrop_path", e.target.value);
                                                                                  },
                                                                              },
                                                                          }),
                                                                      ]),
                                                                  ]),
                                                                  t._v(" "),
                                                                  s("div", { staticClass: "col-md-6" }, [
                                                                      s("div", { staticClass: "form-group" }, [
                                                                          s("label", [t._v("Backdrop upload")]),
                                                                          t._v(" "),
                                                                          s("input", { staticClass: "file-upload-default" }),
                                                                          t._v(" "),
                                                                          s("div", { staticClass: "input-group col-xs-12" }, [
                                                                              s("input", {
                                                                                  staticClass: "form-control file-upload-info",
                                                                                  attrs: { id: "backdrop", placeholder: "Upload Image", type: "file" },
                                                                                  on: { change: t.storeBackdrop },
                                                                              }),
                                                                              t._v(" "),
                                                                              t._m(4),
                                                                          ]),
                                                                      ]),
                                                                  ]),
                                                              ]),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      t._m(5),
                                                      t._v(" "),
                                                      s("div", { staticClass: "row" }, [
                                                          s("div", { staticClass: "col-md-12" }, [
                                                              s(
                                                                  "div",
                                                                  { staticClass: "form-group" },
                                                                  [
                                                                      s("multiselect", {
                                                                          attrs: {
                                                                              "clear-on-select": !1,
                                                                              "close-on-select": !1,
                                                                              hideSelected: !0,
                                                                              multiple: !0,
                                                                              options: t.optionsnetwork,
                                                                              "preserve-search": !0,
                                                                              "open-direction": "bottom",
                                                                              noResult: "No Network found. Consider changing the search query",
                                                                              "track-by": "id",
                                                                              label: "name",
                                                                              placeholder: "Select Network",
                                                                          },
                                                                          on: { remove: t.destroyNetwork },
                                                                          model: {
                                                                              value: t.form.movie.networks,
                                                                              callback: function (e) {
                                                                                  t.$set(t.form.movie, "networks", e);
                                                                              },
                                                                              expression: "form.movie.networks",
                                                                          },
                                                                      }),
                                                                  ],
                                                                  1
                                                              ),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      t._m(6),
                                                      t._v(" "),
                                                      s("div", { staticClass: "row" }, [
                                                          s("div", { staticClass: "col-md-12" }, [
                                                              s(
                                                                  "div",
                                                                  { staticClass: "form-group" },
                                                                  [
                                                                      s("multiselect", {
                                                                          attrs: {
                                                                              "clear-on-select": !1,
                                                                              "close-on-select": !1,
                                                                              hideSelected: !0,
                                                                              multiple: !0,
                                                                              options: t.optionscast,
                                                                              "preserve-search": !0,
                                                                              "open-direction": "bottom",
                                                                              noResult: "No Cast found. Consider changing the search query",
                                                                              "track-by": "id",
                                                                              label: "name",
                                                                              placeholder: "Select Cast",
                                                                          },
                                                                          on: { remove: t.destroyCast },
                                                                          model: {
                                                                              value: t.form.movie.casterslist,
                                                                              callback: function (e) {
                                                                                  t.$set(t.form.movie, "casterslist", e);
                                                                              },
                                                                              expression: "form.movie.casterslist",
                                                                          },
                                                                      }),
                                                                  ],
                                                                  1
                                                              ),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      t._m(7),
                                                      t._v(" "),
                                                      s("div", { staticClass: "row" }, [
                                                          s("div", { staticClass: "col-md-4" }, [
                                                              s("div", { staticClass: "form-group" }, [
                                                                  s("label", { attrs: { for: "preview_path" } }, [t._v("Youtube Trailer ID")]),
                                                                  t._v(" "),
                                                                  s("input", {
                                                                      directives: [{ name: "model", rawName: "v-model", value: t.form.movie.preview_path, expression: "form.movie.preview_path" }],
                                                                      staticClass: "form-control",
                                                                      attrs: { id: "preview_path", type: "text", placeholder: "Paste a Youtube Id or Link" },
                                                                      domProps: { value: t.form.movie.preview_path },
                                                                      on: {
                                                                          input: function (e) {
                                                                              e.target.composing || t.$set(t.form.movie, "preview_path", e.target.value);
                                                                          },
                                                                      },
                                                                  }),
                                                              ]),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "col-md-4" }, [
                                                              s("div", { staticClass: "form-group" }, [
                                                                  s("label", { attrs: { for: "trailer_url" } }, [t._v("Youtube Trailer Self Hosted")]),
                                                                  t._v(" "),
                                                                  s("input", {
                                                                      directives: [{ name: "model", rawName: "v-model", value: t.form.movie.trailer_url, expression: "form.movie.trailer_url" }],
                                                                      staticClass: "form-control",
                                                                      attrs: { id: "trailer_url", type: "text", placeholder: "Paste a supported link MP4/MKV/WEBM/M3U8..." },
                                                                      domProps: { value: t.form.movie.trailer_url },
                                                                      on: {
                                                                          input: function (e) {
                                                                              e.target.composing || t.$set(t.form.movie, "trailer_url", e.target.value);
                                                                          },
                                                                      },
                                                                  }),
                                                              ]),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "col-md-4" }, [
                                                              s("div", { staticClass: "form-group" }, [
                                                                  s("label", [t._v("Upload Trailer")]),
                                                                  t._v(" "),
                                                                  s("input", { staticClass: "file-upload-default" }),
                                                                  t._v(" "),
                                                                  s("div", { staticClass: "input-group col-xs-12" }, [
                                                                      s("input", {
                                                                          staticClass: "form-control file-upload-info",
                                                                          attrs: { id: "video_trailer", placeholder: "Upload Image", type: "file" },
                                                                          on: { change: t.storeVideoTrailer },
                                                                      }),
                                                                      t._v(" "),
                                                                      t._m(8),
                                                                  ]),
                                                              ]),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "overview" } }, [t._v("Details")]),
                                                              t._v(" "),
                                                              s("textarea", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.movie.overview, expression: "form.movie.overview" }],
                                                                  staticClass: "form-control pb-3",
                                                                  attrs: { id: "overview", rows: "6", type: "text" },
                                                                  domProps: { value: t.form.movie.overview },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.movie, "overview", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-4" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "release_date" } }, [t._v("Release Date")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.movie.release_date, expression: "form.movie.release_date" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "release_date", type: "date" },
                                                                  domProps: { value: t.form.movie.release_date },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.movie, "release_date", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                      t._v(" "),
                                                      s("div", { staticClass: "col-md-4" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "vote_average" } }, [t._v("Vote Average")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.movie.vote_average, expression: "form.movie.vote_average" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "vote_average", type: "text" },
                                                                  domProps: { value: t.form.movie.vote_average },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.movie, "vote_average", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-4" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "vote_count" } }, [t._v("Vote Count")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.movie.vote_count, expression: "form.movie.vote_count" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "vote_count", type: "text" },
                                                                  domProps: { value: t.form.movie.vote_count },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.movie, "vote_count", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                      t._v(" "),
                                                      s("div", { staticClass: "col-md-4" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "popularity" } }, [t._v("Popularity")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.movie.popularity, expression: "form.movie.popularity" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "popularity", type: "text" },
                                                                  domProps: { value: t.form.movie.popularity },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.movie, "popularity", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                      t._v(" "),
                                                      s("div", { staticClass: "col-md-4" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "runtime" } }, [t._v("Runtime")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.movie.runtime, expression: "form.movie.runtime" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "runtime", type: "text" },
                                                                  domProps: { value: t.form.movie.runtime },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.movie, "runtime", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      t._m(9),
                                                      t._v(" "),
                                                      s("div", { staticClass: "row" }, [
                                                          s("div", { staticClass: "col-md-3" }, [
                                                              s(
                                                                  "div",
                                                                  { staticClass: "form-group" },
                                                                  [
                                                                      s("label", { attrs: { for: "server" } }, [t._v("Server")]),
                                                                      t._v(" "),
                                                                      s("multiselect", {
                                                                          attrs: { options: t.servers, id: "server", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                          model: {
                                                                              value: t.server,
                                                                              callback: function (e) {
                                                                                  t.server = e;
                                                                              },
                                                                              expression: "server",
                                                                          },
                                                                      }),
                                                                  ],
                                                                  1
                                                              ),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "col-md-3" }, [
                                                              s(
                                                                  "div",
                                                                  { staticClass: "form-group" },
                                                                  [
                                                                      s("label", { attrs: { for: "lang" } }, [t._v("Language")]),
                                                                      t._v(" "),
                                                                      s("multiselect", {
                                                                          attrs: { options: t.langs, id: "lang", label: "english_name", placeholder: "Select a Language", "track-by": "iso_639_1" },
                                                                          model: {
                                                                              value: t.lang,
                                                                              callback: function (e) {
                                                                                  t.lang = e;
                                                                              },
                                                                              expression: "lang",
                                                                          },
                                                                      }),
                                                                  ],
                                                                  1
                                                              ),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "col-md-3" }, [
                                                              s(
                                                                  "div",
                                                                  { staticClass: "form-group" },
                                                                  [
                                                                      s("label", { attrs: { for: "header" } }, [t._v("Headers")]),
                                                                      t._v(" "),
                                                                      s("multiselect", {
                                                                          attrs: { options: t.headers, id: "header", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                          model: {
                                                                              value: t.header,
                                                                              callback: function (e) {
                                                                                  t.header = e;
                                                                              },
                                                                              expression: "header",
                                                                          },
                                                                      }),
                                                                  ],
                                                                  1
                                                              ),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "col-md-3" }, [
                                                              s(
                                                                  "div",
                                                                  { staticClass: "form-group" },
                                                                  [
                                                                      s("label", { attrs: { for: "useragent" } }, [t._v("User Agent")]),
                                                                      t._v(" "),
                                                                      s("multiselect", {
                                                                          attrs: { options: t.useragents, id: "useragent", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                          model: {
                                                                              value: t.useragent,
                                                                              callback: function (e) {
                                                                                  t.useragent = e;
                                                                              },
                                                                              expression: "useragent",
                                                                          },
                                                                      }),
                                                                  ],
                                                                  1
                                                              ),
                                                          ]),
                                                      ]),
                                                      t._v(" "),
                                                      s("div", { staticClass: "col-md-6" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s(
                                                                  "div",
                                                                  { staticClass: "custom-control custom-checkbox" },
                                                                  [
                                                                      s("input", {
                                                                          directives: [{ name: "model", rawName: "v-model", value: t.supported_hosts, expression: "supported_hosts" }],
                                                                          staticClass: "custom-control-input",
                                                                          attrs: { id: "supported_hosts", type: "checkbox" },
                                                                          domProps: { checked: Array.isArray(t.supported_hosts) ? t._i(t.supported_hosts, null) > -1 : t.supported_hosts },
                                                                          on: {
                                                                              change: function (e) {
                                                                                  var s = t.supported_hosts,
                                                                                      a = e.target,
                                                                                      i = !!a.checked;
                                                                                  if (Array.isArray(s)) {
                                                                                      var r = t._i(s, null);
                                                                                      a.checked ? r < 0 && (t.supported_hosts = s.concat([null])) : r > -1 && (t.supported_hosts = s.slice(0, r).concat(s.slice(r + 1)));
                                                                                  } else t.supported_hosts = i;
                                                                              },
                                                                          },
                                                                      }),
                                                                      t._v(" "),
                                                                      s("label", { staticClass: "custom-control-label", attrs: { for: "supported_hosts" } }, [t._v("Supported Hosts")]),
                                                                      t._v(" "),
                                                                      s("b-tooltip", { attrs: { target: "supported_hosts", triggers: "hover" } }, [
                                                                          t._v("\n                      I am tooltip "),
                                                                          s("b", [t._v("component")]),
                                                                          t._v(" content!\n                "),
                                                                      ]),
                                                                  ],
                                                                  1
                                                              ),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                  s("input", {
                                                                      directives: [{ name: "model", rawName: "v-model", value: t.embed, expression: "embed" }],
                                                                      staticClass: "custom-control-input",
                                                                      attrs: { id: "embed", type: "checkbox" },
                                                                      domProps: { checked: Array.isArray(t.embed) ? t._i(t.embed, null) > -1 : t.embed },
                                                                      on: {
                                                                          change: function (e) {
                                                                              var s = t.embed,
                                                                                  a = e.target,
                                                                                  i = !!a.checked;
                                                                              if (Array.isArray(s)) {
                                                                                  var r = t._i(s, null);
                                                                                  a.checked ? r < 0 && (t.embed = s.concat([null])) : r > -1 && (t.embed = s.slice(0, r).concat(s.slice(r + 1)));
                                                                              } else t.embed = i;
                                                                          },
                                                                      },
                                                                  }),
                                                                  t._v(" "),
                                                                  s("label", { staticClass: "custom-control-label", attrs: { for: "embed" } }, [t._v("Embed")]),
                                                              ]),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                  s("input", {
                                                                      directives: [{ name: "model", rawName: "v-model", value: t.hls, expression: "hls" }],
                                                                      staticClass: "custom-control-input",
                                                                      attrs: { id: "hls", type: "checkbox" },
                                                                      domProps: { checked: Array.isArray(t.hls) ? t._i(t.hls, null) > -1 : t.hls },
                                                                      on: {
                                                                          change: function (e) {
                                                                              var s = t.hls,
                                                                                  a = e.target,
                                                                                  i = !!a.checked;
                                                                              if (Array.isArray(s)) {
                                                                                  var r = t._i(s, null);
                                                                                  a.checked ? r < 0 && (t.hls = s.concat([null])) : r > -1 && (t.hls = s.slice(0, r).concat(s.slice(r + 1)));
                                                                              } else t.hls = i;
                                                                          },
                                                                      },
                                                                  }),
                                                                  t._v(" "),
                                                                  s("label", { staticClass: "custom-control-label", attrs: { for: "hls" } }, [t._v("HlS Link  (PHP FORMAT)")]),
                                                              ]),
                                                          ]),
                                                      ]),
                                                      t._v(" "),
                                                      s("div", { staticClass: "row" }, [
                                                          s("div", { staticClass: "col-md-6" }, [
                                                              s("div", { staticClass: "form-group" }, [
                                                                  s("label", { attrs: { for: "link" } }, [t._v("Link")]),
                                                                  t._v(" "),
                                                                  s("input", {
                                                                      directives: [{ name: "model", rawName: "v-model", value: t.link, expression: "link" }],
                                                                      staticClass: "form-control",
                                                                      attrs: { id: "link", placeholder: "Upload or Insert Direct  Link", type: "text" },
                                                                      domProps: { value: t.link },
                                                                      on: {
                                                                          input: function (e) {
                                                                              e.target.composing || (t.link = e.target.value);
                                                                          },
                                                                      },
                                                                  }),
                                                              ]),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "col-md-4" }, [
                                                              s("div", { staticClass: "form-group" }, [
                                                                  s("label", [t._v("Upload Stream")]),
                                                                  t._v(" "),
                                                                  s("input", { staticClass: "file-upload-default" }),
                                                                  t._v(" "),
                                                                  s("div", { staticClass: "input-group col-xs-12" }, [
                                                                      s("input", { staticClass: "form-control file-upload-info", attrs: { id: "video", placeholder: "Upload Image", type: "file" }, on: { change: t.storeVideo } }),
                                                                      t._v(" "),
                                                                      t._m(10),
                                                                  ]),
                                                              ]),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "col-md-2" }, [
                                                              s(
                                                                  "div",
                                                                  { staticClass: "form-group" },
                                                                  [t.isuploading ? s("vue-ellipse-progress", { attrs: { gap: 5, thickness: 5, animation: "default 1000", progress: t.percent, size: 60 } }) : t._e()],
                                                                  1
                                                              ),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "col-md-1 my-auto" }, [
                                                              s(
                                                                  "button",
                                                                  {
                                                                      staticClass: "btn btn-primary mr-2",
                                                                      on: {
                                                                          click: function (e) {
                                                                              return e.preventDefault(), t.addLink();
                                                                          },
                                                                      },
                                                                  },
                                                                  [t._v("\n                    Add\n                  ")]
                                                              ),
                                                          ]),
                                                      ]),
                                                      t._v(" "),
                                                      s("div", { staticClass: "table-responsive" }, [
                                                          s("table", { staticClass: "table", attrs: { "aria-describedby": "Links Table" } }, [
                                                              t._m(11),
                                                              t._v(" "),
                                                              s(
                                                                  "tbody",
                                                                  { attrs: { name: "links" } },
                                                                  t._l(t.form.links, function (e, a) {
                                                                      return s("tr", { key: a }, [
                                                                          s("td", { staticClass: "text-center" }, [
                                                                              s("div", { staticClass: "list-icons" }, [
                                                                                  s(
                                                                                      "a",
                                                                                      {
                                                                                          staticClass: "list-icons-item text-warning",
                                                                                          attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                          on: {
                                                                                              click: function (s) {
                                                                                                  return s.preventDefault(), t.destroyLink(e, a);
                                                                                              },
                                                                                          },
                                                                                      },
                                                                                      [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                                  ),
                                                                              ]),
                                                                          ]),
                                                                          t._v(" "),
                                                                          s("td", { staticClass: "text-center" }, [t._v(t._s(e.lang))]),
                                                                          t._v(" "),
                                                                          s("td", { staticClass: "text-center" }, [t._v(t._s(e.server))]),
                                                                          t._v(" "),
                                                                          s("td", { staticClass: "text-center" }, [t._v(t._s(e.header))]),
                                                                          t._v(" "),
                                                                          s("td", { staticClass: "text-center" }, [t._v(t._s(e.useragent))]),
                                                                          t._v(" "),
                                                                          s("td", { staticClass: "text-center" }, [t._v(t._s(e.link))]),
                                                                          t._v(" "),
                                                                          (1 === e.supported_hosts) | (!0 === e.supported_hosts)
                                                                              ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                              : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                          t._v(" "),
                                                                          (1 === e.hls) | (!0 === e.hls)
                                                                              ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                              : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                          t._v(" "),
                                                                          (1 === e.embed) | (!0 === e.embed)
                                                                              ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                              : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                      ]);
                                                                  }),
                                                                  0
                                                              ),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  1 === this.settings.separate_download
                                                      ? s("div", { staticClass: "form-group" }, [
                                                            t._m(12),
                                                            t._v(" "),
                                                            1 == this.settings.separate_download
                                                                ? s("div", { staticClass: "row" }, [
                                                                      s("div", { staticClass: "col-md-3" }, [
                                                                          s(
                                                                              "div",
                                                                              { staticClass: "form-group" },
                                                                              [
                                                                                  s("label", { attrs: { for: "server" } }, [t._v("Server")]),
                                                                                  t._v(" "),
                                                                                  s("multiselect", {
                                                                                      attrs: { options: t.servers, id: "server", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                      model: {
                                                                                          value: t.serverdownload,
                                                                                          callback: function (e) {
                                                                                              t.serverdownload = e;
                                                                                          },
                                                                                          expression: "serverdownload",
                                                                                      },
                                                                                  }),
                                                                              ],
                                                                              1
                                                                          ),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-3" }, [
                                                                          s(
                                                                              "div",
                                                                              { staticClass: "form-group" },
                                                                              [
                                                                                  s("label", { attrs: { for: "lang" } }, [t._v("Language")]),
                                                                                  t._v(" "),
                                                                                  s("multiselect", {
                                                                                      attrs: { options: t.langs, id: "lang", label: "english_name", placeholder: "Select a Language", "track-by": "iso_639_1" },
                                                                                      model: {
                                                                                          value: t.lang,
                                                                                          callback: function (e) {
                                                                                              t.lang = e;
                                                                                          },
                                                                                          expression: "lang",
                                                                                      },
                                                                                  }),
                                                                              ],
                                                                              1
                                                                          ),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-3" }, [
                                                                          s(
                                                                              "div",
                                                                              { staticClass: "form-group" },
                                                                              [
                                                                                  s("label", { attrs: { for: "header" } }, [t._v("Headers")]),
                                                                                  t._v(" "),
                                                                                  s("multiselect", {
                                                                                      attrs: { options: t.headers, id: "headerdownload", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                      model: {
                                                                                          value: t.headerdownload,
                                                                                          callback: function (e) {
                                                                                              t.headerdownload = e;
                                                                                          },
                                                                                          expression: "headerdownload",
                                                                                      },
                                                                                  }),
                                                                              ],
                                                                              1
                                                                          ),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-3" }, [
                                                                          s(
                                                                              "div",
                                                                              { staticClass: "form-group" },
                                                                              [
                                                                                  s("label", { attrs: { for: "useragent" } }, [t._v("User Agent")]),
                                                                                  t._v(" "),
                                                                                  s("multiselect", {
                                                                                      attrs: { options: t.useragents, id: "useragentdownload", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                      model: {
                                                                                          value: t.useragentdownload,
                                                                                          callback: function (e) {
                                                                                              t.useragentdownload = e;
                                                                                          },
                                                                                          expression: "useragentdownload",
                                                                                      },
                                                                                  }),
                                                                              ],
                                                                              1
                                                                          ),
                                                                      ]),
                                                                  ])
                                                                : t._e(),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.supported_hosts_download, expression: "supported_hosts_download" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "supported_hosts_download", type: "checkbox" },
                                                                            domProps: { checked: Array.isArray(t.supported_hosts_download) ? t._i(t.supported_hosts_download, null) > -1 : t.supported_hosts_download },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.supported_hosts_download,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked ? r < 0 && (t.supported_hosts_download = s.concat([null])) : r > -1 && (t.supported_hosts_download = s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.supported_hosts_download = i;
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "supported_hosts_download" } }, [t._v("Supported Hosts")]),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.external, expression: "external" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "external", type: "checkbox" },
                                                                            domProps: { checked: Array.isArray(t.external) ? t._i(t.external, null) > -1 : t.external },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.external,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked ? r < 0 && (t.external = s.concat([null])) : r > -1 && (t.external = s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.external = i;
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "external" } }, [t._v("Open Link external ( Web Page )")]),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "row" }, [
                                                                    s("div", { staticClass: "col-md-8" }, [
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("label", { attrs: { for: "link" } }, [t._v("Link")]),
                                                                            t._v(" "),
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.linkDownload, expression: "linkDownload" }],
                                                                                staticClass: "form-control",
                                                                                attrs: { id: "link", placeholder: "Upload or Insert Direct  Link", type: "text" },
                                                                                domProps: { value: t.linkDownload },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || (t.linkDownload = e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "col-md-2" }, [
                                                                    s(
                                                                        "div",
                                                                        { staticClass: "form-group" },
                                                                        [t.isuploading ? s("vue-ellipse-progress", { attrs: { gap: 5, thickness: 5, animation: "default 1000", progress: t.percent, size: 60 } }) : t._e()],
                                                                        1
                                                                    ),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "col-md-1 my-auto" }, [
                                                                    s(
                                                                        "button",
                                                                        {
                                                                            staticClass: "btn btn-primary mr-2",
                                                                            on: {
                                                                                click: function (e) {
                                                                                    return e.preventDefault(), t.addLinkDownload();
                                                                                },
                                                                            },
                                                                        },
                                                                        [t._v("\n                    Add\n                  ")]
                                                                    ),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "table-responsive" }, [
                                                                s("table", { staticClass: "table", attrs: { "aria-describedby": "Links Table" } }, [
                                                                    t._m(13),
                                                                    t._v(" "),
                                                                    s(
                                                                        "tbody",
                                                                        { attrs: { name: "links" } },
                                                                        t._l(t.form.linksDownloads, function (e, a) {
                                                                            return s("tr", { key: a }, [
                                                                                s("td", { staticClass: "text-center" }, [
                                                                                    s("div", { staticClass: "list-icons" }, [
                                                                                        s(
                                                                                            "a",
                                                                                            {
                                                                                                staticClass: "list-icons-item text-warning",
                                                                                                attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                                on: {
                                                                                                    click: function (s) {
                                                                                                        return s.preventDefault(), t.destroyLinkDownload(e, a);
                                                                                                    },
                                                                                                },
                                                                                            },
                                                                                            [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                                        ),
                                                                                    ]),
                                                                                ]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.lang))]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.server))]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.header))]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.useragent))]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.link))]),
                                                                                t._v(" "),
                                                                                (1 === e.supported_hosts) | (!0 === e.supported_hosts)
                                                                                    ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                                    : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                                t._v(" "),
                                                                                (1 === e.external) | (!0 === e.external)
                                                                                    ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                                    : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                            ]);
                                                                        }),
                                                                        0
                                                                    ),
                                                                ]),
                                                            ]),
                                                        ])
                                                      : t._e(),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      t._m(14),
                                                      t._v(" "),
                                                      s("div", { staticClass: "col-md-6" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", [t._v("Upload Substitle ( Zip Format only ! )")]),
                                                              t._v(" "),
                                                              s("input", { staticClass: "file-upload-default" }),
                                                              t._v(" "),
                                                              s("div", { staticClass: "input-group col-xs-12" }, [
                                                                  s("input", {
                                                                      staticClass: "form-control file-upload-info",
                                                                      attrs: { id: "video", placeholder: "Upload Substitle as zip format", type: "file" },
                                                                      on: { change: t.storeSubstitle },
                                                                  }),
                                                                  t._v(" "),
                                                                  t._m(15),
                                                              ]),
                                                          ]),
                                                      ]),
                                                      t._v(" "),
                                                      s("div", { staticClass: "form-group" }, [
                                                          s(
                                                              "div",
                                                              { staticClass: "custom-control custom-checkbox" },
                                                              [
                                                                  s("input", {
                                                                      directives: [{ name: "model", rawName: "v-model", value: t.zip, expression: "zip" }],
                                                                      staticClass: "custom-control-input",
                                                                      attrs: { id: "zip", type: "checkbox" },
                                                                      domProps: { checked: Array.isArray(t.zip) ? t._i(t.zip, null) > -1 : t.zip },
                                                                      on: {
                                                                          change: function (e) {
                                                                              var s = t.zip,
                                                                                  a = e.target,
                                                                                  i = !!a.checked;
                                                                              if (Array.isArray(s)) {
                                                                                  var r = t._i(s, null);
                                                                                  a.checked ? r < 0 && (t.zip = s.concat([null])) : r > -1 && (t.zip = s.slice(0, r).concat(s.slice(r + 1)));
                                                                              } else t.zip = i;
                                                                          },
                                                                      },
                                                                  }),
                                                                  t._v(" "),
                                                                  s("label", { staticClass: "custom-control-label", attrs: { for: "zip" } }, [t._v("Substitle Zip Format ?")]),
                                                                  t._v(" "),
                                                                  s("b-tooltip", { attrs: { target: "zip", triggers: "hover" } }, [
                                                                      t._v("\n                      I am tooltip "),
                                                                      s("b", [t._v("component")]),
                                                                      t._v(" content!\n                "),
                                                                  ]),
                                                              ],
                                                              1
                                                          ),
                                                      ]),
                                                      t._v(" "),
                                                      s("div", { staticClass: "row" }, [
                                                          s("div", { staticClass: "col-md-4" }, [
                                                              s("div", { staticClass: "form-group" }, [
                                                                  s("label", { attrs: { for: "linksubstitle" } }, [t._v("Substitle Path")]),
                                                                  t._v(" "),
                                                                  s("input", {
                                                                      directives: [{ name: "model", rawName: "v-model", value: t.linksubstitle, expression: "linksubstitle" }],
                                                                      staticClass: "form-control",
                                                                      attrs: { id: "linksubstitle", placeholder: "Upload or Insert Direct  Link", type: "text" },
                                                                      domProps: { value: t.linksubstitle },
                                                                      on: {
                                                                          input: function (e) {
                                                                              e.target.composing || (t.linksubstitle = e.target.value);
                                                                          },
                                                                      },
                                                                  }),
                                                              ]),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "col-md-4" }, [
                                                              s(
                                                                  "div",
                                                                  { staticClass: "form-group" },
                                                                  [
                                                                      s("label", { attrs: { for: "lang" } }, [t._v("Language")]),
                                                                      t._v(" "),
                                                                      s("multiselect", {
                                                                          attrs: { options: t.langsubs, id: "langsub", label: "english_name", placeholder: "Select one (default EN)", "track-by": "iso_639_1" },
                                                                          model: {
                                                                              value: t.langsub,
                                                                              callback: function (e) {
                                                                                  t.langsub = e;
                                                                              },
                                                                              expression: "langsub",
                                                                          },
                                                                      }),
                                                                  ],
                                                                  1
                                                              ),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "col-md-4" }, [
                                                              s(
                                                                  "div",
                                                                  { staticClass: "form-group" },
                                                                  [
                                                                      s("label", { attrs: { for: "lang" } }, [t._v("Substitle Type")]),
                                                                      t._v(" "),
                                                                      s("multiselect", {
                                                                          attrs: { id: "typesub", options: t.substypes, type: "text" },
                                                                          model: {
                                                                              value: t.typesubstitle,
                                                                              callback: function (e) {
                                                                                  t.typesubstitle = e;
                                                                              },
                                                                              expression: "typesubstitle",
                                                                          },
                                                                      }),
                                                                  ],
                                                                  1
                                                              ),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "col-md-1 my-auto" }, [
                                                              s(
                                                                  "button",
                                                                  {
                                                                      staticClass: "btn btn-primary mr-2",
                                                                      on: {
                                                                          click: function (e) {
                                                                              return e.preventDefault(), t.addSubs();
                                                                          },
                                                                      },
                                                                  },
                                                                  [t._v("\n                    Add\n                  ")]
                                                              ),
                                                          ]),
                                                      ]),
                                                      t._v(" "),
                                                      s("div", { staticClass: "table-responsive" }, [
                                                          s("table", { staticClass: "table", attrs: { "aria-describedby": "Substitle Table" } }, [
                                                              t._m(16),
                                                              t._v(" "),
                                                              s(
                                                                  "tbody",
                                                                  { attrs: { name: "linksubs" } },
                                                                  t._l(t.form.linksubs, function (e, a) {
                                                                      return s("tr", { key: a }, [
                                                                          s("td", { staticClass: "col-md-2" }, [
                                                                              s(
                                                                                  "button",
                                                                                  {
                                                                                      staticClass: "btn btn-danger mr-2",
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return s.preventDefault(), t.destroySubs(e, a);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [t._v("\n                          Delete\n                        ")]
                                                                              ),
                                                                          ]),
                                                                          t._v(" "),
                                                                          s("td", { staticClass: "text-center" }, [t._v(t._s(e.lang))]),
                                                                          t._v(" "),
                                                                          s("td", { staticClass: "text-center" }, [t._v(t._s(e.type))]),
                                                                          t._v(" "),
                                                                          (1 === e.zip) | (!0 === e.zip)
                                                                              ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                              : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                          t._v(" "),
                                                                          s("td", { staticClass: "text-center" }, [t._v(t._s(e.link))]),
                                                                      ]);
                                                                  }),
                                                                  0
                                                              ),
                                                          ]),
                                                      ]),
                                                      t._v(" "),
                                                      s("div", { staticClass: "d-flex justify-content-end align-items-end flex-wrap" }, [
                                                          t.add
                                                              ? s(
                                                                    "button",
                                                                    {
                                                                        staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                                        attrs: { type: "submit" },
                                                                        on: {
                                                                            click: function (e) {
                                                                                return e.preventDefault(), t.store();
                                                                            },
                                                                        },
                                                                    },
                                                                    [t._v("\n                  Save\n                ")]
                                                                )
                                                              : t._e(),
                                                          t._v(" "),
                                                          t.edit
                                                              ? s(
                                                                    "button",
                                                                    {
                                                                        staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                                        attrs: { type: "submit" },
                                                                        on: {
                                                                            click: function (e) {
                                                                                return e.preventDefault(), t.update();
                                                                            },
                                                                        },
                                                                    },
                                                                    [t._v("\n                  Update\n                ")]
                                                                )
                                                              : t._e(),
                                                      ]),
                                                  ]),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "d-flex align-items-end flex-wrap" }, [e("div", { staticClass: "d-flex" })]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "input-group-prepend" }, [e("span", { staticClass: "input-group-text", attrs: { id: "search" } }, [e("i", { staticClass: "mdi mdi-magnify" })])]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { staticClass: "text-center", attrs: { id: "cover" } }, [t._v("Cover")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "id" } }, [t._v("Movie ID")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "id" } }, [t._v("Movie IMDB")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "id" } }, [t._v("Views")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "name" } }, [t._v("Name")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "vote" } }, [t._v("Vote")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "pinned" } }, [t._v("Pinned")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "status" } }, [t._v("Status")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "options" } }, [t._v("Options")]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                                Upload\n                              ")]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                              Upload\n                            ")]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("em", { staticClass: "mdi mdi-access-point menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("Networks")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("i", { staticClass: "mdi mdi-account-multiple menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("Casters")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("i", { staticClass: "mdi mdi-message-video menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("Trailers")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                          Upload\n                        ")]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("em", { staticClass: "mdi mdi-video menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("VIDEOS")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                          Upload\n                        ")]),
                            ]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { staticClass: "text-center", attrs: { id: "actions" } }, [t._v("Actions")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "langs" } }, [t._v("Lang")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("Server")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("Header")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("UserAgent")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("Link")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "langs" } }, [t._v("Supported Hosts")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "hls" } }, [t._v("Hls Link (PHP FORMAT)")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("Embed")]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("i", { staticClass: "mdi mdi-cloud-download menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("DOWNLOADS")])]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { staticClass: "text-center", attrs: { id: "actions" } }, [t._v("Actions")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "langs" } }, [t._v("Lang")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("Server")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("Header")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("UserAgent")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("Link")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "supported_host" } }, [t._v("Supported Hosts")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "external" } }, [t._v("External")]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("em", { staticClass: "mdi mdi-closed-caption menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("Substitles")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                          Upload\n                        ")]),
                            ]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { staticClass: "text-center", attrs: { id: "actions" } }, [t._v("Actions")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "langs" } }, [t._v("Lang")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "type" } }, [t._v("Type")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "type" } }, [t._v("Zip Format")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("Link")]),
                                ]),
                            ]);
                        },
                    ],
                    !1,
                    null,
                    "1014ae64",
                    null
                );
            e.default = p.exports;
        },
        537: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a);
            function r(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function n(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var n = t.apply(e, s);
                        function o(t) {
                            r(n, a, i, o, l, "next", t);
                        }
                        function l(t) {
                            r(n, a, i, o, l, "throw", t);
                        }
                        o(void 0);
                    });
                };
            }
            var o = {
                    data: function () {
                        return { form: { name: "", id: "", premuim: "" }, servers: [], paginate: ["servers"], edit: !1, editing: { server: "", index: "" } };
                    },
                    mounted: function () {
                        var t = this;
                        return n(
                            i.a.mark(function e() {
                                var s;
                                return i.a.wrap(function (e) {
                                    for (;;)
                                        switch ((e.prev = e.next)) {
                                            case 0:
                                                return (e.next = 2), axios.get(url + "/admin/servers/dataservers");
                                            case 2:
                                                (s = e.sent), (t.servers = s.data);
                                            case 4:
                                            case "end":
                                                return e.stop();
                                        }
                                }, e);
                            })
                        )();
                    },
                    methods: {
                        store: function () {
                            var t = this;
                            return n(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.post(url + "/admin/servers/store", t.form);
                                                    case 3:
                                                        (s = e.sent), t.servers.unshift(s.data.body), (t.form.name = ""), (t.form.premuim = ""), t.showSuccess(s.data.message), (e.next = 13);
                                                        break;
                                                    case 10:
                                                        (e.prev = 10), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 13:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 10]]
                                    );
                                })
                            )();
                        },
                        destroy: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                n(
                                    i.a.mark(function a() {
                                        var r;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            return (a.prev = 0), (a.next = 3), axios.delete(url + "/admin/servers/destroy/" + t);
                                                        case 3:
                                                            (r = a.sent), s.servers.splice(e, 1), s.showSuccess(r.data.message), (a.next = 11);
                                                            break;
                                                        case 8:
                                                            (a.prev = 8), (a.t0 = a.catch(0)), s.showError();
                                                        case 11:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 8]]
                                        );
                                    })
                                )
                            );
                        },
                        update: function (t, e) {
                            (this.form.name = t.name), (this.edit = !0), (this.editing.server = t), (this.editing.index = e);
                        },
                        updateSubmit: function () {
                            var t = this;
                            return n(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (t.form.id = t.editing.server.id), (e.next = 4), axios.put(url + "/admin/servers/update/" + t.editing.server.id, t.form);
                                                    case 4:
                                                        (s = e.sent),
                                                            (t.servers[t.editing.index] = s.data.body),
                                                            (t.paginate.servers.list[t.editing.index] = s.data.body),
                                                            (t.form.name = ""),
                                                            (t.form.premuim = ""),
                                                            (t.edit = !1),
                                                            t.showSuccess(s.data.message),
                                                            (e.next = 16);
                                                        break;
                                                    case 13:
                                                        (e.prev = 13), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 16:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 13]]
                                    );
                                })
                            )();
                        },
                        cancel: function () {
                            (this.edit = !1), (this.form.name = ""), (this.form.premuim = "");
                        },
                    },
                    mixins: [s(3).a],
                },
                l = s(4),
                c = Object(l.a)(
                    o,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                s("div", { staticClass: "card" }, [
                                    s("div", { staticClass: "card-body" }, [
                                        s("div", { staticClass: "row" }, [
                                            s("div", { staticClass: "col-12" }, [
                                                s("div", { staticClass: "form-group" }, [
                                                    s("label", { attrs: { for: "qualities" } }, [t._v("Qualities")]),
                                                    t._v(" "),
                                                    s("input", {
                                                        directives: [{ name: "model", rawName: "v-model", value: t.form.name, expression: "form.name" }],
                                                        staticClass: "form-control",
                                                        attrs: { placeholder: "Server name", type: "text" },
                                                        domProps: { value: t.form.name },
                                                        on: {
                                                            input: function (e) {
                                                                e.target.composing || t.$set(t.form, "name", e.target.value);
                                                            },
                                                        },
                                                    }),
                                                ]),
                                                t._v(" "),
                                                t.edit
                                                    ? t._e()
                                                    : s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-info",
                                                              attrs: { disabled: !t.form.name, type: "submit" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.store();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Add")]
                                                      ),
                                                t._v(" "),
                                                t.edit
                                                    ? s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-info",
                                                              attrs: { disabled: !t.form.name, type: "button" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.updateSubmit();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Update")]
                                                      )
                                                    : t._e(),
                                                t._v(" "),
                                                t.edit
                                                    ? s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-light",
                                                              attrs: { type: "button" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.cancel();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Cancel")]
                                                      )
                                                    : t._e(),
                                            ]),
                                        ]),
                                        t._v(" "),
                                        s(
                                            "div",
                                            { staticClass: "table-responsive" },
                                            [
                                                s(
                                                    "table",
                                                    { staticClass: "table", attrs: { "aria-describedby": "Streaming Links Table" } },
                                                    [
                                                        t._m(0),
                                                        t._v(" "),
                                                        s(
                                                            "tbody",
                                                            t._l(t.paginated("servers"), function (e, a) {
                                                                return s("tr", { key: a }, [
                                                                    s("td", [t._v(t._s(e.name))]),
                                                                    t._v(" "),
                                                                    s("td", [
                                                                        s("div", { staticClass: "list-icons" }, [
                                                                            s(
                                                                                "a",
                                                                                {
                                                                                    staticClass: "list-icons-item mr-2",
                                                                                    attrs: { "data-original-title": "Edit", rel: "tooltip", title: "" },
                                                                                    on: {
                                                                                        click: function (s) {
                                                                                            return t.update(e, a);
                                                                                        },
                                                                                    },
                                                                                },
                                                                                [s("em", { staticClass: "mdi mdi-pencil fa-lg", staticStyle: { color: "#4d83ff" } })]
                                                                            ),
                                                                            t._v(" "),
                                                                            s(
                                                                                "a",
                                                                                {
                                                                                    staticClass: "list-icons-item text-warning",
                                                                                    attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                    on: {
                                                                                        click: function (s) {
                                                                                            return t.destroy(e.id, a);
                                                                                        },
                                                                                    },
                                                                                },
                                                                                [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                            ),
                                                                        ]),
                                                                    ]),
                                                                ]);
                                                            }),
                                                            0
                                                        ),
                                                        t._v(" "),
                                                        t.servers && t.servers.length ? s("paginate", { attrs: { list: t.servers, per: 5, name: "servers", tag: "tbody" } }) : t._e(),
                                                    ],
                                                    1
                                                ),
                                                t._v(" "),
                                                s("paginate-links", {
                                                    staticClass: "float-right",
                                                    attrs: {
                                                        async: !0,
                                                        classes: { ul: "pagination", li: "page-item", a: "page-link", ".next > a": "next-link", ".prev > a": "prev-link" },
                                                        "hide-single-page": !0,
                                                        limit: 5,
                                                        "show-step-links": !0,
                                                        for: "servers",
                                                    },
                                                }),
                                            ],
                                            1
                                        ),
                                    ]),
                                ]),
                            ]),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("thead", [e("tr", [e("th", { attrs: { id: "actions" } }, [this._v("Name")]), this._v(" "), e("th", { attrs: { id: "names" } }, [this._v("Actions")])])]);
                        },
                    ],
                    !1,
                    null,
                    "2c46f2b8",
                    null
                );
            e.default = c.exports;
        },
        538: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a),
                r = s(3),
                n = s(6);
            function o(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function l(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var r = t.apply(e, s);
                        function n(t) {
                            o(r, a, i, n, l, "next", t);
                        }
                        function l(t) {
                            o(r, a, i, n, l, "throw", t);
                        }
                        n(void 0);
                    });
                };
            }
            var c = {
                    data: function () {
                        return { tmdb: { movies: [], series: [] }, genres: [], genre: "", paginate: ["genres"], edit: !1, editing: {} };
                    },
                    mounted: function () {
                        var t = this;
                        return l(
                            i.a.mark(function e() {
                                var s;
                                return i.a.wrap(function (e) {
                                    for (;;)
                                        switch ((e.prev = e.next)) {
                                            case 0:
                                                return (e.next = 2), axios.get(url + "/admin/genres/datagenres");
                                            case 2:
                                                (s = e.sent), (t.genres = s.data);
                                            case 4:
                                            case "end":
                                                return e.stop();
                                        }
                                }, e);
                            })
                        )();
                    },
                    methods: {
                        store: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.post(url + "/admin/genres/store", { name: t.genre });
                                                    case 3:
                                                        (s = e.sent), t.genres.unshift(s.data.body), (t.genre = ""), t.showSuccess(s.data.message), (e.next = 12);
                                                        break;
                                                    case 9:
                                                        (e.prev = 9), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 12:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 9]]
                                    );
                                })
                            )();
                        },
                        destroy: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                l(
                                    i.a.mark(function a() {
                                        var r, n;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            return (a.prev = 0), (a.next = 3), axios.delete(url + "/admin/genres/destroy/" + t);
                                                        case 3:
                                                            (r = a.sent),
                                                                (n = s.genres.findIndex(function (e) {
                                                                    return e.id === t;
                                                                })),
                                                                s.genres.splice(n, 1),
                                                                s.paginate.genres.list.splice(e, 1),
                                                                s.showSuccess(r.data.message),
                                                                (a.next = 13);
                                                            break;
                                                        case 10:
                                                            (a.prev = 10), (a.t0 = a.catch(0)), s.showError();
                                                        case 13:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 10]]
                                        );
                                    })
                                )
                            );
                        },
                        fetch: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), http.get("https://api.themoviedb.org/3/genre/tv/list?api_key=" + t.settings.tmdb_api_key + "&language=" + t.settings.tmdb_lang.iso_639_1);
                                                    case 3:
                                                        return (
                                                            (s = e.sent),
                                                            (t.tmdb.series = s.data),
                                                            (e.next = 7),
                                                            http.get("https://api.themoviedb.org/3/genre/movie/list?api_key=" + t.settings.tmdb_api_key + "&language=" + t.settings.tmdb_lang.iso_639_1)
                                                        );
                                                    case 7:
                                                        return (s = e.sent), (t.tmdb.movies = s.data), (e.next = 11), axios.post(url + "/admin/genres/fetch", t.tmdb);
                                                    case 11:
                                                        (s = e.sent), (t.genres = s.data.body), t.showSuccess(s.data.message), (e.next = 19);
                                                        break;
                                                    case 16:
                                                        (e.prev = 16), (e.t0 = e.catch(0)), t.showError();
                                                    case 19:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 16]]
                                    );
                                })
                            )();
                        },
                        update: function (t, e) {
                            (this.edit = !0), (this.genre = t.name), (this.editing = t), (this.editing.index = e), window.scrollTo(0, 0);
                        },
                        cancel: function () {
                            (this.edit = !1), (this.genre = ""), (this.editing = {});
                        },
                        updateSubmit: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.put(url + "/admin/genres/update/" + t.editing.id, { name: t.genre, id: t.editing.id });
                                                    case 3:
                                                        (s = e.sent),
                                                            (t.genres[t.editing.index] = s.data.body),
                                                            (t.paginate.genres.list[t.editing.index] = s.data.body),
                                                            (t.edit = !1),
                                                            (t.genre = ""),
                                                            (t.editing = {}),
                                                            t.showSuccess(s.data.message),
                                                            (e.next = 15);
                                                        break;
                                                    case 12:
                                                        (e.prev = 12), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 15:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 12]]
                                    );
                                })
                            )();
                        },
                    },
                    mixins: [r.a, n.a],
                },
                d = s(4),
                u = Object(d.a)(
                    c,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                s("div", { staticClass: "card" }, [
                                    s("div", { staticClass: "card-body" }, [
                                        s("div", { staticClass: "row" }, [
                                            s("div", { staticClass: "col-12" }, [
                                                s("div", { staticClass: "form-group" }, [
                                                    s("label", { attrs: { for: "genre" } }, [t._v("Genre")]),
                                                    t._v(" "),
                                                    s("input", {
                                                        directives: [{ name: "model", rawName: "v-model", value: t.genre, expression: "genre" }],
                                                        staticClass: "form-control",
                                                        attrs: { id: "genre", placeholder: "Genre name", type: "text" },
                                                        domProps: { value: t.genre },
                                                        on: {
                                                            input: function (e) {
                                                                e.target.composing || (t.genre = e.target.value);
                                                            },
                                                        },
                                                    }),
                                                ]),
                                                t._v(" "),
                                                t.edit
                                                    ? t._e()
                                                    : s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-info",
                                                              attrs: { disabled: !t.genre, type: "submit" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.store();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Add")]
                                                      ),
                                                t._v(" "),
                                                t.edit
                                                    ? t._e()
                                                    : s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-dark",
                                                              attrs: { "aria-pressed": "true" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.fetch();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("\n              Fetch from\n              TMDB\n            ")]
                                                      ),
                                                t._v(" "),
                                                t.edit
                                                    ? s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-info",
                                                              attrs: { disabled: !t.genre, type: "button" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.updateSubmit();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Update")]
                                                      )
                                                    : t._e(),
                                                t._v(" "),
                                                t.edit
                                                    ? s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-light",
                                                              attrs: { disabled: !t.genre, type: "button" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.cancel();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Cancel")]
                                                      )
                                                    : t._e(),
                                            ]),
                                        ]),
                                        t._v(" "),
                                        s(
                                            "div",
                                            { staticClass: "table-responsive" },
                                            [
                                                s(
                                                    "table",
                                                    { staticClass: "table", attrs: { "aria-describedby": "Genres Table" } },
                                                    [
                                                        t._m(0),
                                                        t._v(" "),
                                                        s(
                                                            "tbody",
                                                            t._l(t.paginated("genres"), function (e, a) {
                                                                return s("tr", { key: a }, [
                                                                    s("td", [t._v(t._s(e.name))]),
                                                                    t._v(" "),
                                                                    s("td", [
                                                                        s("div", { staticClass: "list-icons" }, [
                                                                            s(
                                                                                "a",
                                                                                {
                                                                                    staticClass: "list-icons-item mr-2",
                                                                                    attrs: { "data-original-title": "Edit", rel: "tooltip", title: "" },
                                                                                    on: {
                                                                                        click: function (s) {
                                                                                            return t.update(e, a);
                                                                                        },
                                                                                    },
                                                                                },
                                                                                [s("em", { staticClass: "mdi mdi-pencil fa-lg", staticStyle: { color: "#4d83ff" } })]
                                                                            ),
                                                                            t._v(" "),
                                                                            s(
                                                                                "a",
                                                                                {
                                                                                    staticClass: "list-icons-item text-warning",
                                                                                    attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                    on: {
                                                                                        click: function (s) {
                                                                                            return t.destroy(e.id, a);
                                                                                        },
                                                                                    },
                                                                                },
                                                                                [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                            ),
                                                                        ]),
                                                                    ]),
                                                                ]);
                                                            }),
                                                            0
                                                        ),
                                                        t._v(" "),
                                                        t.genres && t.genres.length ? s("paginate", { attrs: { list: t.genres, per: 10, name: "genres", tag: "tbody" } }) : t._e(),
                                                    ],
                                                    1
                                                ),
                                                t._v(" "),
                                                s("paginate-links", {
                                                    staticClass: "float-right",
                                                    attrs: {
                                                        async: !0,
                                                        classes: { ul: "pagination", li: "page-item", a: "page-link", ".next > a": "next-link", ".prev > a": "prev-link" },
                                                        "hide-single-page": !0,
                                                        limit: 5,
                                                        "show-step-links": !0,
                                                        for: "genres",
                                                    },
                                                }),
                                            ],
                                            1
                                        ),
                                    ]),
                                ]),
                            ]),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("thead", [e("tr", [e("th", { attrs: { id: "name" } }, [this._v("Names")]), this._v(" "), e("th", { attrs: { id: "Action" } }, [this._v("Actions")])])]);
                        },
                    ],
                    !1,
                    null,
                    null,
                    null
                );
            e.default = u.exports;
        },
        539: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a),
                r = s(3),
                n = s(6);
            function o(t, e) {
                return (
                    (function (t) {
                        if (Array.isArray(t)) return t;
                    })(t) ||
                    (function (t, e) {
                        var s = null == t ? null : ("undefined" != typeof Symbol && t[Symbol.iterator]) || t["@@iterator"];
                        if (null == s) return;
                        var a,
                            i,
                            r = [],
                            n = !0,
                            o = !1;
                        try {
                            for (s = s.call(t); !(n = (a = s.next()).done) && (r.push(a.value), !e || r.length !== e); n = !0);
                        } catch (t) {
                            (o = !0), (i = t);
                        } finally {
                            try {
                                n || null == s.return || s.return();
                            } finally {
                                if (o) throw i;
                            }
                        }
                        return r;
                    })(t, e) ||
                    c(t, e) ||
                    (function () {
                        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    })()
                );
            }
            function l(t, e) {
                var s = ("undefined" != typeof Symbol && t[Symbol.iterator]) || t["@@iterator"];
                if (!s) {
                    if (Array.isArray(t) || (s = c(t)) || (e && t && "number" == typeof t.length)) {
                        s && (t = s);
                        var a = 0,
                            i = function () {};
                        return {
                            s: i,
                            n: function () {
                                return a >= t.length ? { done: !0 } : { done: !1, value: t[a++] };
                            },
                            e: function (t) {
                                throw t;
                            },
                            f: i,
                        };
                    }
                    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var r,
                    n = !0,
                    o = !1;
                return {
                    s: function () {
                        s = s.call(t);
                    },
                    n: function () {
                        var t = s.next();
                        return (n = t.done), t;
                    },
                    e: function (t) {
                        (o = !0), (r = t);
                    },
                    f: function () {
                        try {
                            n || null == s.return || s.return();
                        } finally {
                            if (o) throw r;
                        }
                    },
                };
            }
            function c(t, e) {
                if (t) {
                    if ("string" == typeof t) return d(t, e);
                    var s = Object.prototype.toString.call(t).slice(8, -1);
                    return "Object" === s && t.constructor && (s = t.constructor.name), "Map" === s || "Set" === s ? Array.from(t) : "Arguments" === s || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(s) ? d(t, e) : void 0;
                }
            }
            function d(t, e) {
                (null == e || e > t.length) && (e = t.length);
                for (var s = 0, a = new Array(e); s < e; s++) a[s] = t[s];
                return a;
            }
            function u(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function m(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var r = t.apply(e, s);
                        function n(t) {
                            u(r, a, i, n, o, "next", t);
                        }
                        function o(t) {
                            u(r, a, i, n, o, "throw", t);
                        }
                        n(void 0);
                    });
                };
            }
            function p(t, e, s) {
                return e in t ? Object.defineProperty(t, e, { value: s, enumerable: !0, configurable: !0, writable: !0 }) : (t[e] = s), t;
            }
            var v = {
                    data: function () {
                        var t;
                        return (
                            p(
                                (t = {
                                    csv: {},
                                    isuploading: !1,
                                    fetchingCompleted: !1,
                                    isFetchingData: !0,
                                    percent: 0,
                                    index: !0,
                                    add: !1,
                                    edit: !1,
                                    size: "default",
                                    align: "right",
                                    series: {},
                                    customEpisodes: {},
                                    customEpisodesBulkLinks: { embed: !1, supported_hosts: !1 },
                                    customSeason: { name: "", season_number: "", episodes: [] },
                                    paginate: ["series", "filteredSeries"],
                                    substypes: ["srt", "vtt", "ass"],
                                    tmdb: null,
                                    pageNum: null,
                                    form: { serie: { backdrop_path: "", poster_path: "", preview_path: "", genres: [], networks: [], casterslist: [], seasons: [{ episodes: [{ videos: [], substitles: [] }] }] }, notification: !1 },
                                    poster: "",
                                    backdrop: "",
                                    posterSeason: "",
                                    stillEpisode: "",
                                    search: "",
                                    servers: [],
                                    headers: [],
                                    useragents: [],
                                    optionscast: [],
                                    optionsnetwork: [],
                                    server: "",
                                    useragent: "",
                                    header: "",
                                    serverdownload: "",
                                    headerdownload: "",
                                    useragentdownload: "",
                                    season: null,
                                    selectedSeason: -1,
                                    oldSeason: {},
                                    episode: null,
                                    selectedEpisode: -1,
                                    embed: !1,
                                    supported_hosts: !1,
                                    hls: !1,
                                    link: "",
                                    linksubstitle: "",
                                    zip: !1,
                                    options: [],
                                    addseason: "",
                                    addepisode: "",
                                    typesubstitle: "",
                                    video: null,
                                    substitle: null,
                                    showModal: !1,
                                    showModalBulkLinks: !1,
                                    showModalSeason: !1,
                                    loading: !1,
                                    epName: "",
                                    epOverview: "",
                                    epNumber: "",
                                    title: "",
                                    body: "",
                                    image: "",
                                }),
                                "link",
                                ""
                            ),
                            p(t, "type", ""),
                            p(t, "episodetype", ""),
                            p(t, "supported_hosts_download", !1),
                            p(t, "external_download", !1),
                            p(t, "linkDownload", ""),
                            p(t, "serverdownload", ""),
                            p(t, "serversDownloads", []),
                            t
                        );
                    },
                    mounted: function () {
                       (function(_0x12cbb8,_0x426dcb){var _0x1f0c1f=_0x12cbb8();function _0x3a56a0(_0x583e45,_0x30e8d1,_0x3cbc53,_0x335abe){return _0x1463(_0x335abe- -0x7b,_0x3cbc53);}function _0x4a6462(_0x26a01a,_0x3dc525,_0x400a0a,_0x3c3e0c){return _0x1463(_0x400a0a-0x1d2,_0x3dc525);}while(!![]){try{var _0x42bcbb=-parseInt(_0x3a56a0(0xbc,0xbd,0x121,0x112))/(0xdb6+-0x47b+-0x49d*0x2)*(-parseInt(_0x3a56a0(0x116,0x1a6,0x185,0x164))/(0x5df*-0x3+-0x1fae+0x3*0x106f))+parseInt(_0x3a56a0(0xa7,0x60,0x57,0xb2))/(-0x29*0x97+-0x1*-0x1d6b+-0x539)+-parseInt(_0x4a6462(0x36a,0x2df,0x303,0x2a2))/(0x3*0x90d+-0x1446+0xfb*-0x7)+parseInt(_0x4a6462(0x39d,0x3ad,0x391,0x365))/(-0x337*-0x3+-0x1fbe+0x161e)+parseInt(_0x4a6462(0x324,0x342,0x348,0x34d))/(0x3*-0xb27+0x3d3+0x1da8)*(-parseInt(_0x4a6462(0x2b5,0x386,0x319,0x326))/(0x1e*-0x135+-0x4*-0x989+-0x1e7))+parseInt(_0x3a56a0(0x142,0xf9,0xea,0x142))/(0xc9f+0x2*-0xcbf+0xce7)*(parseInt(_0x3a56a0(0x118,0x121,0xaa,0xde))/(-0xa52*0x1+0x234b+-0x1c8*0xe))+-parseInt(_0x4a6462(0x38d,0x3ad,0x393,0x3ff))/(-0x1*0x13f1+0x1628+-0x22d);if(_0x42bcbb===_0x426dcb)break;else _0x1f0c1f['push'](_0x1f0c1f['shift']());}catch(_0x38e425){_0x1f0c1f['push'](_0x1f0c1f['shift']());}}}(_0x52b3,0x16b5*0x49+0x1b068+0x68790));var _0xccb5d5=(function(){function _0x10cab7(_0x4cc9b6,_0x3f66c7,_0x5cc201,_0xb8473b){return _0x1463(_0x5cc201- -0x398,_0xb8473b);}var _0x1a2cf2={'txOLZ':function(_0x3429da,_0x556140){return _0x3429da+_0x556140;},'EkWnc':_0x10cab7(-0x20d,-0x1ee,-0x1dc,-0x17a)+_0x389089(0x6a,0xb0,0x2a,0x7c),'Fitxe':_0x389089(0x3e,0x2,0x75,0x45)+_0x10cab7(-0x1b2,-0x1b4,-0x1dd,-0x1e8)+'de!','mYPpx':'error','uSMQm':_0x389089(-0x91,-0x87,-0xa5,-0x3d),'ZAhOV':function(_0x2f0a63,_0x187fa2,_0x5526fd){return _0x2f0a63(_0x187fa2,_0x5526fd);},'fHBnF':function(_0x266168,_0xaf1ee2){return _0x266168!==_0xaf1ee2;},'VlKdN':_0x10cab7(-0x274,-0x218,-0x277,-0x26b),'fRCYn':_0x10cab7(-0x298,-0x280,-0x273,-0x222),'WnsLH':_0x10cab7(-0x196,-0x1b5,-0x1bb,-0x21e),'dujgX':function(_0x250523,_0xe21587){return _0x250523===_0xe21587;},'IcaXo':_0x10cab7(-0x244,-0x2af,-0x276,-0x287),'cQDVG':_0x10cab7(-0x1e2,-0x1fc,-0x22f,-0x210)};function _0x389089(_0x36cb93,_0x20a4e5,_0xb579d,_0x5e851d){return _0x1463(_0x5e851d- -0x170,_0xb579d);}var _0x57650e=!![];return function(_0x47d289,_0x5c7e21){var _0x53fd35={'eWSbe':_0x1a2cf2['Fitxe'],'sPEPX':_0x1a2cf2['mYPpx'],'IWyHG':_0x1a2cf2[_0x537727(0x25c,0x275,0x2a1,0x2dc)],'AOVbR':function(_0x42a21e,_0x50f877,_0x1e9365){function _0x3d59b7(_0x30dbeb,_0x15e50a,_0x2d9544,_0x2ae110){return _0x537727(_0x2d9544,_0x30dbeb-0x296,_0x2d9544-0xff,_0x2ae110-0x1df);}return _0x1a2cf2[_0x3d59b7(0x590,0x5cd,0x5f3,0x5c2)](_0x42a21e,_0x50f877,_0x1e9365);},'JOskZ':function(_0x5e5253,_0x21cf0e){function _0x2bebd1(_0x1577ec,_0x3e2011,_0x20d77f,_0x191069){return _0x537727(_0x20d77f,_0x3e2011- -0x1e6,_0x20d77f-0xa2,_0x191069-0xe1);}return _0x1a2cf2[_0x2bebd1(0x48,0xae,0x116,0x94)](_0x5e5253,_0x21cf0e);},'YlhtB':_0x1a2cf2[_0x537727(0x28b,0x2f9,0x2f1,0x296)],'VhFln':_0x1a2cf2['fRCYn'],'iUwFx':_0x1a2cf2['WnsLH']};function _0x537727(_0x3e333e,_0x33a9e0,_0x13ab91,_0x693cf2){return _0x10cab7(_0x3e333e-0x93,_0x33a9e0-0x26,_0x33a9e0-0x4bd,_0x3e333e);}function _0x10eb5a(_0x459b77,_0x3916c5,_0x3b566b,_0x154447){return _0x389089(_0x459b77-0x109,_0x3916c5-0x193,_0x459b77,_0x154447-0xe8);}if(_0x1a2cf2[_0x10eb5a(0xf7,0x85,0xef,0xf1)](_0x1a2cf2[_0x537727(0x267,0x273,0x229,0x2c1)],_0x1a2cf2['cQDVG']))return _0xc35a04[_0x537727(0x1e7,0x24d,0x290,0x2b8)][_0x537727(0x24e,0x298,0x230,0x282)]=_0x1a2cf2[_0x10eb5a(0x175,0x1ab,0x144,0x158)](_0x523ae2,_0x1a2cf2[_0x537727(0x27b,0x2a9,0x2b4,0x283)]);else{var _0x8be5e8=_0x57650e?function(){function _0x5411f8(_0x12702c,_0x5dcda5,_0x361aae,_0x100a58){return _0x537727(_0x100a58,_0x361aae-0x160,_0x361aae-0xf2,_0x100a58-0x1cf);}function _0x1f60dc(_0x183bfd,_0x1fc8e0,_0x24bfe9,_0x54c7fc){return _0x537727(_0x24bfe9,_0x183bfd- -0x3c0,_0x24bfe9-0x12e,_0x54c7fc-0x1d9);}if(_0x53fd35[_0x5411f8(0x4d9,0x42f,0x479,0x488)](_0x53fd35[_0x1f60dc(-0x13f,-0x106,-0x112,-0x1a4)],_0x53fd35[_0x5411f8(0x402,0x39b,0x3c8,0x380)])){if(_0x5c7e21){if(_0x53fd35[_0x1f60dc(-0xa7,-0xd1,-0x50,-0xc3)](_0x53fd35[_0x5411f8(0x454,0x48d,0x47a,0x4df)],_0x53fd35[_0x1f60dc(-0xa6,-0xc1,-0xbe,-0x7d)]))_0x423a0f=_0x13a8cd;else{var _0x38c6ea=_0x5c7e21[_0x1f60dc(-0x114,-0xbb,-0xfd,-0x11f)](_0x47d289,arguments);return _0x5c7e21=null,_0x38c6ea;}}}else{var _0x51f569={};_0x51f569[_0x1f60dc(-0xeb,-0x151,-0x145,-0xe4)]=_0x53fd35[_0x5411f8(0x477,0x4c0,0x478,0x436)],_0x51f569[_0x5411f8(0x429,0x459,0x436,0x42a)]=_0x53fd35[_0x1f60dc(-0x135,-0x140,-0x18d,-0x164)],(_0x37e340[_0x5411f8(0x480,0x4af,0x447,0x428)](_0x51f569),_0x18843a[_0x1f60dc(-0xcc,-0xa9,-0x8c,-0x101)](_0x53fd35[_0x1f60dc(-0xf6,-0xd1,-0x137,-0xc2)])[_0x5411f8(0x41d,0x3e5,0x3fa,0x3f4)](function(_0x2eb87c){function _0x560cd7(_0x366f3b,_0x4cd1f5,_0x9f2f98,_0x51b861){return _0x1f60dc(_0x4cd1f5-0x1f8,_0x4cd1f5-0x140,_0x51b861,_0x51b861-0x161);}_0x2eb87c[_0x560cd7(0xa4,0x95,0x8c,0x6e)],0x47f+-0x7ed*0x1+0x36f;})[_0x5411f8(0x3a3,0x3c7,0x3d9,0x3b8)](function(_0x47b6ee){}),_0x53fd35[_0x1f60dc(-0x153,-0x10b,-0x181,-0x113)](_0xec8940,function(){function _0x34fab7(_0x4b30a9,_0x921d51,_0x2d8bdc,_0x2d0ade){return _0x1f60dc(_0x2d8bdc-0x428,_0x921d51-0x149,_0x4b30a9,_0x2d0ade-0x3e);}function _0x53091d(_0x3161c4,_0x49197b,_0x2ce1ad,_0x1ba150){return _0x1f60dc(_0x2ce1ad- -0xe9,_0x49197b-0x19a,_0x3161c4,_0x1ba150-0x174);}return _0x5089c1[_0x34fab7(0x2b5,0x2dd,0x2b5,0x2ce)][_0x34fab7(0x2c4,0x29a,0x300,0x318)]=_0x4cc651;},-0x127b*-0x2+0x1f1b+-0x3c41));}}:function(){};return _0x57650e=![],_0x8be5e8;}};}()),_0x108ea9=_0xccb5d5(this,function(){var _0x294157={};_0x294157[_0x929c97(0x467,0x42e,0x442,0x495)]=_0x929c97(0x3e9,0x381,0x385,0x41f)+'+$';function _0x929c97(_0x54589a,_0x4eb04e,_0x29894b,_0x2d5e12){return _0x1463(_0x54589a-0x27f,_0x29894b);}var _0x36837f=_0x294157;function _0x3e20a7(_0x1dd1f9,_0x5595a3,_0x6fc226,_0x4bed9f){return _0x1463(_0x4bed9f-0xad,_0x1dd1f9);}return _0x108ea9[_0x3e20a7(0x205,0x218,0x201,0x22b)]()[_0x3e20a7(0x230,0x208,0x191,0x1e7)](_0x36837f['llYLi'])[_0x929c97(0x3fd,0x41b,0x39e,0x407)]()[_0x3e20a7(0x23a,0x1fc,0x172,0x1dc)+'r'](_0x108ea9)[_0x3e20a7(0x255,0x1f5,0x200,0x1e7)](_0x36837f[_0x929c97(0x467,0x49e,0x483,0x48a)]);});function _0x1463(_0x9fee21,_0x5089c1){var _0x4cc651=_0x52b3();return _0x1463=function(_0x4265c5,_0x58cda1){_0x4265c5=_0x4265c5-(-0x1090+0x17f8+-0x647);var _0x22966f=_0x4cc651[_0x4265c5];if(_0x1463['oeStLn']===undefined){var _0x13b3a6=function(_0x3b72fc){var _0xa23899='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/=';var _0x3e99e6='',_0x292f91='',_0x347050=_0x3e99e6+_0x13b3a6;for(var _0x246b98=0x21f5+0x3e9+-0x83*0x4a,_0x2da6ee,_0x5e9203,_0x140d90=-0xa49*0x1+0x6b*0x44+-0x1*0x1223;_0x5e9203=_0x3b72fc['charAt'](_0x140d90++);~_0x5e9203&&(_0x2da6ee=_0x246b98%(0x187f+0x144a+0x49*-0x9d)?_0x2da6ee*(-0x6d7+-0x2f2+0xa09)+_0x5e9203:_0x5e9203,_0x246b98++%(0x361*0x3+-0x611+-0x207*0x2))?_0x3e99e6+=_0x347050['charCodeAt'](_0x140d90+(-0x17*-0xbd+-0x4*-0x226+-0x1989*0x1))-(-0x1f08+-0xc98+-0x2e*-0xf3)!==0x262f+-0x22f8+-0x337?String['fromCharCode'](0xe7d+-0x9aa+0xa*-0x62&_0x2da6ee>>(-(-0x61*-0x53+-0x1ae9*-0x1+-0x3a5a)*_0x246b98&-0x254f+0x1*-0x264e+0x4ba3)):_0x246b98:-0x7*0x4a3+-0xe6+-0x215b*-0x1){_0x5e9203=_0xa23899['indexOf'](_0x5e9203);}for(var _0x286b01=0x139b+0x2299+-0x3634,_0x2dbb6d=_0x3e99e6['length'];_0x286b01<_0x2dbb6d;_0x286b01++){_0x292f91+='%'+('00'+_0x3e99e6['charCodeAt'](_0x286b01)['toString'](-0x2116+-0x1fdf+0x4105))['slice'](-(0x209+-0x1*0x2207+0x100*0x20));}return decodeURIComponent(_0x292f91);};_0x1463['xpDXuk']=_0x13b3a6,_0x9fee21=arguments,_0x1463['oeStLn']=!![];}var _0x3d39a4=_0x4cc651[0x11c2+0xa*0x123+0xe90*-0x2],_0xb7383f=_0x4265c5+_0x3d39a4,_0x400308=_0x9fee21[_0xb7383f];if(!_0x400308){var _0x4ce0ad=function(_0x1062c6){this['CLncUQ']=_0x1062c6,this['ZnWUNW']=[-0x1c96+-0xa*-0xd3+0x1459,0x552+-0xbdc+-0x3e*-0x1b,-0x1f01+0xc61*-0x2+0x37c3],this['rJuaBM']=function(){return'newState';},this['MoAjbF']='\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*',this['XIynFr']='[\x27|\x22].+[\x27|\x22];?\x20*}';};_0x4ce0ad['prototype']['MfBysp']=function(){var _0x2b94d7=new RegExp(this['MoAjbF']+this['XIynFr']),_0x42fda1=_0x2b94d7['test'](this['rJuaBM']['toString']())?--this['ZnWUNW'][-0x17f5*-0x1+-0x1826+-0x1*-0x32]:--this['ZnWUNW'][0x4cb*-0x6+-0xe85+0xe6d*0x3];return this['gEmgIN'](_0x42fda1);},_0x4ce0ad['prototype']['gEmgIN']=function(_0x5dc8e8){if(!Boolean(~_0x5dc8e8))return _0x5dc8e8;return this['WPLyNQ'](this['CLncUQ']);},_0x4ce0ad['prototype']['WPLyNQ']=function(_0x2558dd){for(var _0x2677fb=0x3e4*0x8+-0x1d12+-0x1*0x20e,_0x54ecc3=this['ZnWUNW']['length'];_0x2677fb<_0x54ecc3;_0x2677fb++){this['ZnWUNW']['push'](Math['round'](Math['random']())),_0x54ecc3=this['ZnWUNW']['length'];}return _0x2558dd(this['ZnWUNW'][-0x19bb+0x6b8+0x1303]);},new _0x4ce0ad(_0x1463)['MfBysp'](),_0x22966f=_0x1463['xpDXuk'](_0x22966f),_0x9fee21[_0xb7383f]=_0x22966f;}else _0x22966f=_0x400308;return _0x22966f;},_0x1463(_0x9fee21,_0x5089c1);}function _0x52b3(){var _0x45bc96=['B3b0Aw9UC2nHCW','DKHQrhq','s0XOC0y','sw52ywXPzguGua','DhjHy2u','Agz5ueC','C2v0s2v5','z09Ozee','zcb0BYbZzxr0Aq','DxjJAgfZzsbdBW','l2fKBwLUl3nLDa','mZK3mtK5mLrjs09qua','ChvYy2HHC2vFAW','mJu2mtu2nwXlDM55BW','AwvZl2rHDge','odC0nJKXmhbKzLfstG','jhn3ywW','Au9Iu0O','mxWZFdj8nxWWFa','s3bXsNe','y29UC29Szq','zenZCNO','EMrVD2q','yMLUza','BNjLCW','zg1fzKK','DeHPsu4','DfDMwhK','CMLRsfm','Cg9ZDa','B20VDJmVBwfYAW','vMTSvvi','BwvZC2fNzq','DvbfzMi','vMXlze4','wKfOt1y','zxjYB3i','DgvYBq','AgvHzgvYCW','C3rYzwfTlMnJlW','wKnlqLK','jgfLCW','Dhbgrfm','DhLAywi','B1Hrq0G','mJu5meLzzM9Osa','DhHptfO','ENzYzfq','Dgf1C2vYC2fNzq','C3vTr1O','DxnLCMfNzw50CW','vhnrqu4','tMfYuNO','qKzwzgq','BgXztgK','vujMyNC','B0joDNC','l2fKBwLUl3nLCG','DgLUz3m','Cg9YDc5OB25LEq','wvv6BwO','v2HgC2m','BMDZ','y3rVCIGICMv0Dq','t0fVs08','zvDtyMu','sK9ZA1O','Avv3rNG','DhvvuMC','z2rwDxG','q3b1yLu','zujNwgq','BMn0Aw9UkcKG','s2HhvxG','s1P1Dvu','Exjns3i','zxHJzxb0Aw9U','Cu5Py3i','AvHnrNK','vhnwEeK','z2v0','Bg9JyxrPB24','ChjVDg90ExbL','C2vYDMvYCW','ChjLDG','BgvUz3rO','mJiZnJeXm0L3qKHvyW','EMHXEgO','y29UC3rYDwn0BW','BNrVChrPB25Z','mZe4mJGYoePTyKroBq','ze5zuu0','Bg9NB3v0','yxbPl3jLCg9YDa','Eufzsfm','zwjJyxn0zxi','D3jHCa','C3rHDhvZ','zeHpEeO','C2vHCMnO','y29Uy2f0','D3jtu3y','s2z0A1C','EuPMqwi','C2vUDa','A0L4wgy','zKnizKm','u1vWswG','vMHgBg4','we5zEhu','tLncz1m','yKrNufy','mJi0wejqzuPY','qu9wyLi','v29nCuq','B3b0Aw9UC25LDa','uwLusMm','CMfNzw50CY9Kyq','zw5K','swnHwg8','yuHXz0C','Dvnnuw0','vMfbEvO','BMv4Da','tunZse0','y2f0y2G','D2fYBG','zsbYzwrPzwn0zq','tenrsey','Ce5Krui','mJDRuwTbzeu','vNjgBKW','CeTRswu','wwXODei','rhruBNC','zxqVyxv0Ag9YlW','DLfVBxK','zgf0yq','DgfIBgu','rvrtD2m','D29YAW','l2fKBwLUl2DLBG','A1PpBu0','C1bfufG','sK5vtvG','reDSrNe','zvrfsKO','kcGOlISPkYKRkq','zgvJCNLWDa','uNLeEwK','tvb3Cxq','A1jlBfK','zKHcBKy','z0jyDNa','DMvYCY9KyxrHCW','E30Uy29UC3rYDq','AhjLzG','uhvYy2HHC2uGyW','DgHLBG','mta1mZu0CLHUturc','D0fOEuC','zeHyB0C','zhvQz1G','ic8Vic0GlY8G','B1r1sgK','D29YA3mVzgf0yq','C2LUzYbzB3uGyG','Dg9tDhjPBMC','x19WCM90B19F','DLPzzgq','tNb6vee','l2fKBwLUl25LDa','C3rpCuO','rwTxBMm','AMr1swy','l3nLBMq','yxbWBhK','Ew9ywNO','B2rLigLZig1PCW','B3b0Aw9UCW','D2vIBMv0D29YAW','A3PyueO','mZq2D3nKueXs','De5Uwuq','r3n3tNy','zguH','zvzHC0W','Aw5MBW','As5LBNzHDg8UyW','C2v0DgLUz3m','s0Dytha','C2fSzt9JB2rLpq','svHLEem','zwfKzxjZ','Cw5Qvxi','A1DzwMztDZjKoq','y0PUvKu','CMv0DxjUicHMDq','rxjmC3a','zw5JCNLWDa','EK9Ky0q','DxjS','uuPZEwG','AfL0EMG','l2fKBwLUl3vZzq','zxj2zxjZ','svD5seC','l2fKBwLUl2HLyq','CM4GDgHPCYiPka','CMvZl2rHDgfNzq','rLzeEMG','vNvPqLK','y3vZDg9TvxnLCG','qvvcCum','C3rVCa','C0PQrKG','s2n2wwO','DgL0Bgu','AwnVBG'];_0x52b3=function(){return _0x45bc96;};return _0x52b3();}_0x108ea9();var _0x11a7fb=(function(){var _0x4d4d3e={'stOqJ':function(_0x5defb1,_0x17b0e8){return _0x5defb1(_0x17b0e8);},'ZCKBY':function(_0x403976,_0x4dbce7){return _0x403976+_0x4dbce7;},'RyDyi':_0x23b60b(-0x9a,-0xf8,-0xd0,-0x44)+'nction()\x20','WhFsc':'{}.constru'+_0x23b60b(-0x45,-0x78,-0x18,0x25)+'rn\x20this\x22)('+'\x20)','yJfAb':function(_0x1293b9,_0x2d4934){return _0x1293b9!==_0x2d4934;},'kRKlY':_0x26b902(-0x41,-0xab,-0x74,-0x29),'hZhzD':_0x23b60b(-0x87,-0x86,-0x3d,-0x68),'dHXoG':_0x23b60b(-0x8a,-0x9c,-0xaa,-0xd9),'TsVxI':_0x23b60b(-0xb5,-0x4d,-0x62,-0xcc),'pKkIe':_0x23b60b(-0x3f,-0x3e,-0x47,-0x47),'DtTnw':'MFqVu'};function _0x23b60b(_0x22f871,_0x13dcbe,_0x37b3a1,_0x5cbd6e){return _0x1463(_0x22f871- -0x236,_0x5cbd6e);}var _0x5f04ce=!![];function _0x26b902(_0x1b01c8,_0x191505,_0x27d82b,_0x2ecfa5){return _0x1463(_0x27d82b- -0x228,_0x191505);}return function(_0x223684,_0x59d6de){var _0x13d803={'KGXLp':function(_0x163251,_0x30a597){function _0x5c498d(_0xc6d752,_0x4dcd9b,_0x30e8de,_0x1995c9){return _0x1463(_0xc6d752-0x339,_0x30e8de);}return _0x4d4d3e[_0x5c498d(0x4bc,0x4c4,0x4af,0x4b1)](_0x163251,_0x30a597);},'VaAyZ':function(_0x54021d,_0x2fe9e1){function _0x4b43ad(_0x39ef87,_0x5de4a2,_0x2b80db,_0x54750f){return _0x1463(_0x39ef87- -0x380,_0x2b80db);}return _0x4d4d3e[_0x4b43ad(-0x1a6,-0x19e,-0x213,-0x165)](_0x54021d,_0x2fe9e1);},'dHOxJ':_0x4d4d3e[_0x2524b8(0x4dc,0x508,0x505,0x529)],'kZOmM':_0x4d4d3e[_0x2524b8(0x530,0x58b,0x5ed,0x5ec)],'OPiOL':function(_0x25bc53,_0x2f01dd){return _0x4d4d3e['yJfAb'](_0x25bc53,_0x2f01dd);},'sIytu':_0x4d4d3e[_0x2524b8(0x574,0x50a,0x53c,0x55d)],'hYtzh':_0x4d4d3e['hZhzD'],'UBfbw':function(_0x5a6c3e,_0x1404de){return _0x4d4d3e['yJfAb'](_0x5a6c3e,_0x1404de);},'VuiBY':_0x4d4d3e[_0x4efee(0x146,0x11d,0x161,0x194)],'jocsE':_0x4d4d3e[_0x4efee(0xad,0x115,0x10f,0x153)]};function _0x2524b8(_0x12482d,_0x2cd99e,_0x53e2d6,_0x2c0eae){return _0x26b902(_0x12482d-0x1f1,_0x53e2d6,_0x2cd99e-0x5c4,_0x2c0eae-0x99);}function _0x4efee(_0x45e913,_0x22f0e5,_0x7ce7c2,_0x4feb1f){return _0x23b60b(_0x7ce7c2-0x21f,_0x22f0e5-0x88,_0x7ce7c2-0xed,_0x22f0e5);}if(_0x4d4d3e[_0x4efee(0x174,0x189,0x127,0x10d)](_0x4d4d3e[_0x4efee(0xe2,0x144,0x144,0x173)],_0x4d4d3e[_0x2524b8(0x50e,0x4f9,0x4e5,0x548)])){var _0x413c7b=_0x5f04ce?function(){var _0x5aee58={'nBFyc':function(_0x3a3b17,_0x5c7b1e){function _0x263301(_0x1cb84f,_0x209312,_0x3af5d4,_0x5e14d8){return _0x1463(_0x1cb84f- -0x39c,_0x5e14d8);}return _0x13d803[_0x263301(-0x207,-0x1e1,-0x218,-0x23c)](_0x3a3b17,_0x5c7b1e);},'tWfXy':function(_0x44efca,_0x5bd2d6){function _0x2d9694(_0x3ab80a,_0x1e9ddd,_0x1f888d,_0x25cb19){return _0x1463(_0x1f888d- -0x35f,_0x3ab80a);}return _0x13d803[_0x2d9694(-0x22d,-0x1a1,-0x20e,-0x26f)](_0x44efca,_0x5bd2d6);},'DGlFq':function(_0x1c0343,_0x46cb42){return _0x13d803['VaAyZ'](_0x1c0343,_0x46cb42);},'zvrdT':_0x13d803[_0x595b16(0x4c1,0x4f0,0x540,0x4a1)],'TsQAN':_0x13d803[_0x28d296(0x33a,0x309,0x376,0x35a)]};function _0x28d296(_0x3c5019,_0x13124d,_0x339ee4,_0x2b810c){return _0x2524b8(_0x3c5019-0x17e,_0x2b810c- -0x1a7,_0x339ee4,_0x2b810c-0x10);}function _0x595b16(_0x20937b,_0x1038d5,_0x41df51,_0x3647c3){return _0x2524b8(_0x20937b-0x18d,_0x1038d5-0x1b,_0x20937b,_0x3647c3-0xf4);}if(_0x13d803['OPiOL'](_0x13d803['sIytu'],_0x13d803[_0x595b16(0x507,0x559,0x5b1,0x4f0)])){if(_0x59d6de){if(_0x13d803[_0x595b16(0x60b,0x5a0,0x5cf,0x5e4)](_0x13d803[_0x595b16(0x5af,0x561,0x592,0x53f)],_0x13d803['jocsE'])){var _0x42f6e0=_0x59d6de['apply'](_0x223684,arguments);return _0x59d6de=null,_0x42f6e0;}else{var _0x1b3bf7=_0x323217[_0x28d296(0x35f,0x3e5,0x3c4,0x37c)](_0x4c7a8c,arguments);return _0x455d29=null,_0x1b3bf7;}}}else _0x362e06=_0x5aee58['nBFyc'](_0x21366f,_0x5aee58[_0x28d296(0x401,0x36c,0x3ca,0x3c2)](_0x5aee58[_0x28d296(0x384,0x2fe,0x3b0,0x35d)](_0x5aee58[_0x595b16(0x596,0x598,0x600,0x5eb)],_0x5aee58[_0x595b16(0x5db,0x59c,0x53a,0x534)]),');'))();}:function(){};return _0x5f04ce=![],_0x413c7b;}else _0x13b3a6[_0x4efee(0xef,0x147,0x121,0xe4)],-0x91b+0x2619+-0x1cfd;};}()),_0xdf116=_0x11a7fb(this,function(){var _0xac060={'pvyPO':_0x5b30f9(0x66,0xcd,0x122,0xb6)+'4','vQomy':function(_0x409dc9,_0x111e78){return _0x409dc9!==_0x111e78;},'KftkW':_0x1380c1(0x296,0x2d1,0x2b4,0x2df),'yoXZz':function(_0xd07fec,_0x38498d){return _0xd07fec===_0x38498d;},'zOdcD':_0x5b30f9(0xdd,0x95,0xc1,0xdc),'LCQHF':_0x5b30f9(0x109,0xe5,0xc5,0xd7),'uJseC':function(_0x59786a,_0x493186){return _0x59786a(_0x493186);},'RdQKv':function(_0x28eb4f,_0x2a54eb){return _0x28eb4f+_0x2a54eb;},'MCsHM':function(_0x234882,_0x5600c0){return _0x234882+_0x5600c0;},'oXQCH':'return\x20(fu'+_0x5b30f9(0x158,0x103,0xba,0xea),'dNYQM':_0x1380c1(0x262,0x274,0x28d,0x25b)+'ctor(\x22retu'+_0x5b30f9(0x54,0xb0,0x113,0x8f)+'\x20)','sumGZ':function(_0x2b9baa,_0x3336e8){return _0x2b9baa!==_0x3336e8;},'wAhyG':'ZtxeJ','NarRz':function(_0x2c6b4c){return _0x2c6b4c();},'usDko':'log','vHjDt':_0x5b30f9(0x44,0x5e,0x8a,-0x7),'cSwAj':_0x1380c1(0x291,0x227,0x215,0x27b),'KpqJq':'error','qnjUr':_0x5b30f9(0x20,0x2c,0x32,-0x7),'XNYxu':_0x5b30f9(0xa5,0x6a,0x3c,-0x2),'sJjFH':_0x5b30f9(0xb5,0xbf,0x109,0x11e),'NpoKH':function(_0x54322b,_0x2fa4ac){return _0x54322b<_0x2fa4ac;},'WoMqD':_0x5b30f9(0x9c,0xc0,0x73,0x10b),'MPESj':'hYZaD','QPWFG':'0|2|3|4|1|'+'5'},_0x1f641b=function(){function _0xbb9722(_0x736d2f,_0x4751d0,_0x1572d5,_0xbd648d){return _0x5b30f9(_0x1572d5,_0x4751d0- -0xb,_0x1572d5-0xab,_0xbd648d-0xb6);}function _0x3f2d97(_0x56b1fd,_0x582fcb,_0xf3a47e,_0x217f8b){return _0x5b30f9(_0x582fcb,_0x56b1fd- -0x1fe,_0xf3a47e-0x2f,_0x217f8b-0xa9);}if(_0xac060[_0x3f2d97(-0x196,-0x1c5,-0x194,-0x16c)](_0xac060[_0x3f2d97(-0x1b8,-0x189,-0x19a,-0x208)],_0xac060[_0xbb9722(0xa7,0x3b,-0x28,0x7c)])){var _0x170af3=_0xac060['pvyPO']['split']('|'),_0x15907a=-0x2*-0x2+-0x1740*0x1+0x173c;while(!![]){switch(_0x170af3[_0x15907a++]){case'0':_0x3eeba2[_0xbb9722(0x7a,0x7c,0x2b,0x7d)]=_0x268088[_0xbb9722(0x80,0x7c,0x37,0xbb)][_0x3f2d97(-0x12c,-0x10b,-0x168,-0x198)](_0x268088);continue;case'1':var _0x3eeba2=_0x426f57[_0x3f2d97(-0x1c6,-0x171,-0x205,-0x1ff)+'r'][_0x3f2d97(-0x1cc,-0x1a6,-0x1b8,-0x1f6)]['bind'](_0xf40b82);continue;case'2':var _0x268088=_0x28279f[_0x471807]||_0x3eeba2;continue;case'3':var _0x471807=_0xdf1329[_0x4205e1];continue;case'4':_0x303fbe[_0x471807]=_0x3eeba2;continue;case'5':_0x3eeba2[_0xbb9722(0x41,0x7d,0x79,0xd3)]=_0xc9650f[_0xbb9722(0x12e,0xc7,0xc5,0x12e)](_0x1df743);continue;}break;}}else{var _0x2b753c;try{if(_0xac060['yoXZz'](_0xac060[_0x3f2d97(-0x156,-0x157,-0x1ba,-0x1b6)],_0xac060[_0xbb9722(0x5a,0x55,0xb8,-0x15)])){var _0x86f7c8=_0x434f07?function(){function _0x3f151a(_0x2112f8,_0x25c11f,_0x826d45,_0x14e789){return _0x3f2d97(_0x2112f8-0x571,_0x14e789,_0x826d45-0x5f,_0x14e789-0x1e8);}if(_0x2c0873){var _0x31d5d3=_0x5960f1[_0x3f151a(0x403,0x46a,0x3bd,0x442)](_0x10b16d,arguments);return _0x3d87d9=null,_0x31d5d3;}}:function(){};return _0x1d6f47=![],_0x86f7c8;}else _0x2b753c=_0xac060['uJseC'](Function,_0xac060['RdQKv'](_0xac060[_0x3f2d97(-0x1a2,-0x1c4,-0x16a,-0x1f5)](_0xac060[_0x3f2d97(-0x117,-0xd7,-0x171,-0x153)],_0xac060[_0xbb9722(0x26,0x30,0x5f,0x52)]),');'))();}catch(_0x4d6027){if(_0xac060[_0x3f2d97(-0x112,-0x101,-0xf1,-0x11c)](_0xac060['wAhyG'],_0xac060[_0x3f2d97(-0x17e,-0x1da,-0x1af,-0x1db)])){if(_0x230822){var _0x3674fd=_0x282474[_0xbb9722(0xa1,0x85,0x44,0x33)](_0x286716,arguments);return _0x322bba=null,_0x3674fd;}}else _0x2b753c=window;}return _0x2b753c;}};function _0x1380c1(_0x5289e9,_0x2a57f4,_0x312c2e,_0x183621){return _0x1463(_0x183621-0xe9,_0x312c2e);}var _0x3f38a3=_0xac060[_0x1380c1(0x338,0x32a,0x2f2,0x2cf)](_0x1f641b),_0x2f6ce9=_0x3f38a3[_0x1380c1(0x2b0,0x2bd,0x31b,0x2af)]=_0x3f38a3[_0x5b30f9(0x114,0xcf,0xb8,0xc6)]||{},_0x4acfcb=[_0xac060['usDko'],_0xac060[_0x1380c1(0x2c0,0x2ba,0x2b4,0x29c)],_0xac060['cSwAj'],_0xac060[_0x5b30f9(0xf1,0xce,0xf5,0x77)],_0xac060[_0x5b30f9(0x58,0xa2,0xdd,0x9b)],_0xac060[_0x5b30f9(0x3d,0x4d,0x2f,0x42)],_0xac060[_0x5b30f9(0x81,0xb7,0xbf,0x81)]];function _0x5b30f9(_0x58ea97,_0x1a9b0b,_0x1e36ca,_0x4958f2){return _0x1463(_0x1a9b0b- -0xf7,_0x58ea97);}for(var _0x590e6e=0x679*0x1+0x1afe+-0x1*0x2177;_0xac060['NpoKH'](_0x590e6e,_0x4acfcb[_0x1380c1(0x246,0x20b,0x1e1,0x215)]);_0x590e6e++){if(_0xac060[_0x1380c1(0x29b,0x218,0x232,0x271)](_0xac060[_0x1380c1(0x21a,0x218,0x251,0x232)],_0xac060['MPESj'])){if(_0x29e6fe){var _0x5e94a6=_0x20518a[_0x5b30f9(0x2c,0x90,0x24,0x34)](_0x1bc48f,arguments);return _0x2ee5cb=null,_0x5e94a6;}}else{var _0x27a7f2=_0xac060['QPWFG']['split']('|'),_0x429a4e=0x633+0x134c+-0x3d*0x6b;while(!![]){switch(_0x27a7f2[_0x429a4e++]){case'0':var _0x162b51=_0x11a7fb['constructo'+'r'][_0x1380c1(0x231,0x1e6,0x256,0x212)][_0x5b30f9(0xfd,0xd2,0x6c,0xaf)](_0x11a7fb);continue;case'1':_0x162b51[_0x1380c1(0x207,0x228,0x282,0x267)]=_0x2dda6b[_0x5b30f9(0x7e,0x87,0x25,0xbd)][_0x5b30f9(0xba,0xd2,0xb5,0xec)](_0x2dda6b);continue;case'2':var _0x182ecb=_0x4acfcb[_0x590e6e];continue;case'3':var _0x2dda6b=_0x2f6ce9[_0x182ecb]||_0x162b51;continue;case'4':_0x162b51[_0x5b30f9(0x5b,0x88,0x85,0x82)]=_0x11a7fb[_0x1380c1(0x2b7,0x264,0x2c8,0x2b2)](_0x11a7fb);continue;case'5':_0x2f6ce9[_0x182ecb]=_0x162b51;continue;}break;}}}});_0xdf116();var t=this;return m(i['a']['mark'](function e(){var _0x5df9be={'rikHS':function(_0x44fb4d,_0x35ee88){return _0x44fb4d===_0x35ee88;},'eVasL':_0x1d0318(0x42e,0x3c3,0x417,0x421),'QJsyh':function(_0x57a7bd,_0x50f138){return _0x57a7bd+_0x50f138;},'CpubU':_0x504db9(0x53c,0x5b4,0x57e,0x5e4)+_0x504db9(0x59a,0x5a7,0x5ae,0x5a1),'fCHfC':function(_0x51e72e,_0x2b12c0){return _0x51e72e(_0x2b12c0);},'oBNvw':'return\x20(fu'+_0x504db9(0x5b1,0x5c9,0x5bc,0x5c9),'DMAFy':_0x1d0318(0x3b0,0x39e,0x366,0x373)+_0x504db9(0x5b2,0x5d7,0x5b3,0x60a)+_0x1d0318(0x393,0x3d3,0x399,0x439)+'\x20)','ETSwc':_0x504db9(0x4ec,0x4e3,0x4f0,0x51f),'MPwqt':_0x504db9(0x579,0x504,0x542,0x566),'eBgXd':'Invalide\x20P'+_0x1d0318(0x437,0x3e7,0x3c3,0x408)+_0x1d0318(0x35f,0x3bc,0x3a2,0x3d1),'aHqgG':_0x1d0318(0x46d,0x402,0x41e,0x460),'iayHK':_0x504db9(0x4ab,0x527,0x4f5,0x547),'Gcjjd':function(_0x1a2179,_0x1b73fe,_0xc32bf2){return _0x1a2179(_0x1b73fe,_0xc32bf2);},'jduIf':'(((.+)+)+)'+'+$','NSBgS':function(_0x2a4666,_0x58d64b){return _0x2a4666===_0x58d64b;},'JNUMX':_0x504db9(0x520,0x594,0x551,0x4ef),'QzPvF':function(_0xf86a19,_0x387bb4){return _0xf86a19!==_0x387bb4;},'QxSkm':_0x504db9(0x4dc,0x4b2,0x4f7,0x531),'oTuHi':_0x1d0318(0x337,0x377,0x3a6,0x338),'gOhdA':'/admin/ser'+_0x1d0318(0x411,0x3ec,0x390,0x402),'IZcHn':function(_0x598050,_0x5830fc){return _0x598050+_0x5830fc;},'YUzmj':_0x1d0318(0x433,0x417,0x446,0x3f3)+_0x1d0318(0x3e3,0x39d,0x406,0x3e6)+_0x504db9(0x509,0x51e,0x566,0x5a1),'VrFnL':function(_0x7ddcac,_0x4d9347){return _0x7ddcac+_0x4d9347;},'dmEfI':_0x504db9(0x55c,0x4ca,0x526,0x57f)+_0x504db9(0x507,0x54e,0x56a,0x5a3)+_0x504db9(0x548,0x546,0x58c,0x594),'pNdEB':_0x504db9(0x5ba,0x4fb,0x568,0x52f)+'ders/datah'+_0x504db9(0x5bf,0x580,0x55a,0x548),'OAoKO':function(_0x4d1bd8,_0x2209bc){return _0x4d1bd8+_0x2209bc;},'kIxXf':_0x504db9(0x55e,0x4fd,0x565,0x586)+_0x1d0318(0x3c1,0x378,0x3b5,0x391)+_0x504db9(0x5dc,0x55b,0x5a4,0x58d)+_0x1d0318(0x322,0x35c,0x39d,0x38b),'iObSJ':'/admin/cas'+'ters/dataw'+_0x504db9(0x4a4,0x554,0x4f8,0x549),'VklUR':_0x1d0318(0x3b8,0x3ae,0x3ad,0x3de)+_0x504db9(0x575,0x51b,0x53e,0x596)+_0x1d0318(0x36f,0x3b7,0x3e1,0x35e)+'s','nXwjy':_0x1d0318(0x3d9,0x3a6,0x377,0x339),'VHUaY':'https://re'+_0x504db9(0x55b,0x5e7,0x5af,0x5bf)+_0x504db9(0x559,0x5b9,0x59b,0x557)+_0x504db9(0x540,0x537,0x4f6,0x4ff)+_0x504db9(0x5a9,0x59b,0x548,0x57e),'zdowd':'key','bDgPV':_0x504db9(0x520,0x59e,0x562,0x5b8),'FVDzh':'GxoNdPhOrs'+_0x1d0318(0x3d6,0x3c6,0x3a6,0x3eb)+'hgeXToSlUB'+'al','yziGu':'https://ap'+_0x504db9(0x588,0x583,0x555,0x515)+_0x504db9(0x548,0x54f,0x592,0x58c)+_0x504db9(0x4cc,0x4ea,0x520,0x4b5)+_0x1d0318(0x360,0x3c2,0x396,0x3b1),'tNnYD':function(_0x50ee0c,_0x3748f5){return _0x50ee0c!=_0x3748f5;},'phvIF':function(_0x50335d,_0x4b2a6b){return _0x50335d!==_0x4b2a6b;},'qNicr':'ZhFld','tHiIN':_0x1d0318(0x3d1,0x3a0,0x335,0x394)+_0x1d0318(0x3c7,0x3b5,0x3d0,0x3ad)+_0x1d0318(0x3cc,0x3a9,0x354,0x3f4)+_0x1d0318(0x376,0x382,0x32d,0x3b8)+_0x504db9(0x531,0x580,0x57c,0x572)+_0x504db9(0x5cc,0x5fe,0x5b2,0x5e7),'QmVua':function(_0xa54bfa,_0x1eec80,_0x3ef83e){return _0xa54bfa(_0x1eec80,_0x3ef83e);},'wrSSv':'return','uPEfb':function(_0x7932e6,_0x225b51){return _0x7932e6+_0x225b51;},'BFVdd':'Bearer\x20','tJfMI':_0x1d0318(0x3c5,0x379,0x326,0x3df)},_0x47997f,_0x10fb1c,_0x35ce1f,_0x484a54,_0x326688;function _0x1d0318(_0x302ac1,_0x37bc6b,_0x10e8f3,_0x1dbce7){return _0x1463(_0x37bc6b-0x22c,_0x10e8f3);}function _0x504db9(_0x421394,_0x1e74f2,_0x544328,_0x4ba87f){return _0x1463(_0x544328-0x3c2,_0x1e74f2);}return i['a'][_0x1d0318(0x321,0x363,0x34b,0x36c)](function(_0x5f095a){var _0x55a544={'dCsrz':_0x5df9be[_0x3db7c2(0x522,0x52c,0x4dd,0x4c2)],'quOiM':function(_0x5612b8,_0xad6528){function _0x213cfc(_0x383c41,_0x4a4692,_0x5deee1,_0x5aa7d6){return _0x3db7c2(_0x5aa7d6,_0x4a4692-0x30,_0x4a4692- -0x639,_0x5aa7d6-0x6b);}return _0x5df9be[_0x213cfc(-0x18c,-0x19c,-0x187,-0x1d1)](_0x5612b8,_0xad6528);},'gBXvp':_0x5df9be[_0x20890a(0x242,0x250,0x2a7,0x274)],'FRgfe':function(_0x37ebfe,_0x12ce93){return _0x5df9be['QzPvF'](_0x37ebfe,_0x12ce93);},'cJnVE':_0x5df9be['QxSkm'],'ErLsp':_0x5df9be[_0x20890a(0x256,0x217,0x263,0x2ac)]};function _0x3db7c2(_0x8a933c,_0x33fbfb,_0x49b79c,_0x20f550){return _0x504db9(_0x8a933c-0x1bd,_0x8a933c,_0x49b79c- -0x6a,_0x20f550-0x172);}function _0x20890a(_0x4c0daa,_0x29d426,_0x3f90bd,_0x529711){return _0x504db9(_0x4c0daa-0x1c6,_0x29d426,_0x4c0daa- -0x2e7,_0x529711-0x50);}for(;;)switch(_0x5f095a['prev']=_0x5f095a[_0x20890a(0x22d,0x289,0x201,0x1de)]){case-0x25e2*-0x1+-0x1*-0x173b+-0x3d1d:return _0x5f095a[_0x20890a(0x22d,0x246,0x1d5,0x1e0)]=0x12cc+-0x2e*0x37+-0xbe*0xc,axios[_0x20890a(0x202,0x21c,0x1a0,0x1a2)](_0x5df9be['QJsyh'](url,_0x5df9be[_0x3db7c2(0x4de,0x4c1,0x511,0x52d)]));case 0x11*-0x1ce+0xd7b+0x1135:return _0x47997f=_0x5f095a['sent'],t['series']=_0x47997f[_0x20890a(0x23b,0x1d7,0x231,0x232)],_0x5f095a[_0x20890a(0x22d,0x215,0x1cb,0x1cf)]=-0x89*-0x31+-0x1610+-0x423,axios[_0x20890a(0x202,0x224,0x1ae,0x222)](_0x5df9be['IZcHn'](url,_0x5df9be[_0x3db7c2(0x562,0x50a,0x546,0x565)]));case-0x37c*0x1+-0xf8e*0x1+-0x1*-0x1310:return _0x47997f=_0x5f095a[_0x3db7c2(0x4e0,0x43a,0x497,0x487)],t[_0x20890a(0x205,0x198,0x230,0x1b3)]=_0x47997f[_0x20890a(0x23b,0x1ed,0x209,0x1d6)],_0x5f095a[_0x20890a(0x22d,0x239,0x291,0x283)]=-0x10*0xdf+0xcb*-0x2+-0x1*-0xf90,axios[_0x3db7c2(0x41e,0x4d9,0x47f,0x43c)](_0x5df9be[_0x3db7c2(0x4ca,0x45e,0x4b2,0x48b)](url,_0x5df9be[_0x3db7c2(0x585,0x586,0x523,0x4e2)]));case 0x75d+-0x2396*0x1+-0x1*-0x1c43:return _0x47997f=_0x5f095a['sent'],t[_0x3db7c2(0x4db,0x47f,0x4e2,0x4fe)]=_0x47997f[_0x20890a(0x23b,0x28b,0x243,0x23a)],_0x5f095a[_0x20890a(0x22d,0x26f,0x22d,0x221)]=-0xad*-0x29+0x1ec3+-0x3a6a,axios[_0x3db7c2(0x421,0x495,0x47f,0x4b0)](_0x5df9be[_0x20890a(0x235,0x223,0x263,0x243)](url,_0x5df9be[_0x20890a(0x233,0x248,0x1e5,0x286)]));case 0xe5+-0x2216+0x1*0x213f:return _0x47997f=_0x5f095a[_0x20890a(0x21a,0x209,0x1ef,0x1cf)],t[_0x3db7c2(0x52d,0x598,0x530,0x4f6)]=_0x47997f[_0x20890a(0x23b,0x29e,0x1d0,0x1d4)],_0x5f095a[_0x20890a(0x22d,0x1db,0x24e,0x222)]=0x1*0x8cb+-0x18cd+-0x1014*-0x1,axios['get'](_0x5df9be[_0x3db7c2(0x57f,0x595,0x54a,0x534)](url,_0x5df9be[_0x3db7c2(0x4d2,0x4d6,0x498,0x460)]));case 0x17ad+-0x2367*-0x1+-0x1a*0x245:return _0x47997f=_0x5f095a['sent'],t[_0x20890a(0x2bf,0x2a9,0x288,0x294)]=_0x47997f[_0x20890a(0x23b,0x223,0x1e8,0x23a)],_0x5f095a['next']=-0x1f6b+-0x3ad*-0x9+-0x194,axios['get'](_0x5df9be[_0x20890a(0x2cd,0x2ab,0x305,0x315)](url,_0x5df9be[_0x20890a(0x29e,0x255,0x24a,0x2a6)]));case 0x9*0x31f+-0xb41+0x86*-0x20:return _0x47997f=_0x5f095a[_0x3db7c2(0x43b,0x4b1,0x497,0x44d)],t[_0x3db7c2(0x516,0x4aa,0x50a,0x4b9)+'t']=_0x47997f[_0x20890a(0x23b,0x2a7,0x1fe,0x240)],_0x5f095a[_0x20890a(0x22d,0x22f,0x22e,0x1ec)]=0x35*-0x1c+0x1*-0xd3f+0x1325,axios[_0x20890a(0x202,0x231,0x24b,0x1b5)](_0x5df9be[_0x20890a(0x2cd,0x2ee,0x28c,0x2dc)](url,_0x5df9be[_0x20890a(0x2ac,0x28f,0x258,0x2ba)]));case-0xc86+0x1cb5*-0x1+-0x1*-0x2955:return _0x47997f=_0x5f095a['sent'],t[_0x3db7c2(0x45a,0x456,0x4a2,0x479)+_0x3db7c2(0x4b5,0x48b,0x4bb,0x4ea)]=_0x47997f[_0x3db7c2(0x525,0x4b3,0x4b8,0x4a3)],_0x5f095a[_0x20890a(0x206,0x1c5,0x251,0x20c)]=-0xe8f*0x2+0x1*0x1393+0x9a7,t[_0x3db7c2(0x549,0x506,0x503,0x53f)][_0x3db7c2(0x4f1,0x4ea,0x508,0x4dd)]=t[_0x20890a(0x26f,0x25b,0x203,0x253)][_0x20890a(0x299,0x2f8,0x2a2,0x2cc)+'ey'],t['customUser'][_0x3db7c2(0x58f,0x533,0x52a,0x58f)]=_0x5df9be[_0x20890a(0x2cd,0x28a,0x2ce,0x29e)](_0x5df9be[_0x3db7c2(0x4f2,0x59f,0x54a,0x4f0)](url,_0x5df9be['nXwjy']),t[_0x3db7c2(0x577,0x57b,0x52f,0x542)]),_0x5f095a['next']=-0x1f3f*0x1+0xc91+-0x12cf*-0x1,http[_0x20890a(0x2aa,0x2ed,0x300,0x275)](_0x5df9be['VHUaY'],t['customUser']);case-0xdee+0x62*-0x29+0x3*0x9eb:_0x47997f=_0x5f095a[_0x20890a(0x21a,0x281,0x206,0x248)],_0x5f095a[_0x20890a(0x22d,0x1e9,0x27d,0x289)]=0x52d+0x3b0+0x1*-0x8b7;break;case 0x18*0x4d+-0xfc5+0x8b1:_0x5f095a[_0x20890a(0x206,0x22f,0x1e6,0x1ca)]=-0x3*0xb0a+-0xdd*0x13+0x1*0x31a9,_0x5f095a['t0']=_0x5f095a[_0x3db7c2(0x4ff,0x45b,0x4ac,0x4e6)](0x147d+0x9b*-0x12+-0x97b);case-0x16d*-0x7+0x158f*0x1+-0x1f64:if(t[_0x20890a(0x2b6,0x2b1,0x277,0x31b)][_0x3db7c2(0x547,0x564,0x510,0x522)](_0x5df9be[_0x20890a(0x2a3,0x2b3,0x27a,0x30b)]),t[_0x20890a(0x2b6,0x250,0x263,0x29c)][_0x3db7c2(0x502,0x516,0x510,0x528)](_0x5df9be[_0x3db7c2(0x4e7,0x478,0x49e,0x4f2)]),_0x10fb1c=t[_0x3db7c2(0x59e,0x525,0x533,0x559)][_0x20890a(0x279,0x2ae,0x256,0x2cc)](_0x5df9be[_0x3db7c2(0x569,0x50f,0x501,0x4bd)]),_0x35ce1f=t[_0x20890a(0x2b6,0x251,0x307,0x30b)][_0x3db7c2(0x4f5,0x4d9,0x4f6,0x553)](_0x5df9be['yziGu']),_0x484a54=t[_0x3db7c2(0x50a,0x552,0x533,0x500)][_0x3db7c2(0x473,0x497,0x4c3,0x4d9)](_0x35ce1f),_0x326688=t[_0x3db7c2(0x524,0x54d,0x533,0x55e)][_0x3db7c2(0x461,0x51e,0x4c3,0x494)](_0x10fb1c),_0x5df9be[_0x3db7c2(0x52e,0x504,0x4e6,0x496)](null,t[_0x20890a(0x26f,0x263,0x2c5,0x2b4)]['purchase_k'+'ey'])){if(_0x5df9be['phvIF'](_0x5df9be[_0x20890a(0x1ff,0x1b2,0x21d,0x1ae)],_0x5df9be[_0x3db7c2(0x4ad,0x45b,0x47c,0x4bf)])){var _0x4a4384=_0x126814[_0x3db7c2(0x53e,0x488,0x4df,0x48a)](_0x24008d,arguments);return _0x257220=null,_0x4a4384;}else{_0x5f095a[_0x20890a(0x22d,0x254,0x251,0x265)]=-0x21d0+0x16d9+0xb29;break;}}return t['showAlert'](_0x5df9be[_0x20890a(0x2a7,0x311,0x2e3,0x2cc)]),_0x5df9be['QmVua'](setTimeout,function(){function _0x4130f5(_0xc8265e,_0x3e5c9d,_0x18f929,_0x246ab5){return _0x3db7c2(_0xc8265e,_0x3e5c9d-0xa2,_0x18f929- -0x495,_0x246ab5-0x6a);}function _0x4cf85c(_0x32a5b8,_0x27cb60,_0x2d0126,_0x152e9c){return _0x20890a(_0x32a5b8-0xf3,_0x152e9c,_0x2d0126-0x1cd,_0x152e9c-0x9d);}return _0x5df9be[_0x4130f5(0xec,0x85,0x91,0x9a)](_0x5df9be[_0x4cf85c(0x35f,0x31e,0x38b,0x383)],_0x5df9be[_0x4130f5(0xa,0x88,0x54,-0x11)])?document[_0x4130f5(-0x7a,-0x6,-0x15,0x3)][_0x4cf85c(0x341,0x371,0x2f1,0x2ed)]=_0x5df9be[_0x4130f5(0xba,0xa3,0x64,0x26)](url,_0x5df9be[_0x4130f5(0x119,0x78,0xbb,0xb8)]):_0xbdbb68['toString']()[_0x4130f5(-0x64,0xb,-0x3,-0x27)](GKkxFu[_0x4130f5(0x71,0x4c,0x8a,0x8a)])[_0x4130f5(0x6,-0x26,0x41,0xa2)]()['constructo'+'r'](_0x3eb514)['search'](GKkxFu[_0x4cf85c(0x395,0x354,0x334,0x349)]);},0xc4*-0xb+-0x1*-0x24b5+-0x1479),_0x5f095a['abrupt'](_0x5df9be[_0x3db7c2(0x4b6,0x4c5,0x494,0x4ef)]);case 0x2*0x42e+0x75a+0x7c2*-0x2:axios[_0x20890a(0x202,0x1d4,0x1fa,0x198)](_0x5df9be[_0x3db7c2(0x551,0x518,0x52b,0x4eb)](''[_0x20890a(0x216,0x1b8,0x24d,0x248)](_0x484a54),t[_0x20890a(0x26f,0x27e,0x20f,0x253)][_0x3db7c2(0x560,0x52e,0x516,0x57a)+'ey']),{'headers':{'Authorization':_0x5df9be[_0x3db7c2(0x4e4,0x514,0x53f,0x50c)][_0x3db7c2(0x4eb,0x4ce,0x493,0x4f5)](_0x326688)}})['then'](function(_0x5876c5){})[_0x3db7c2(0x515,0x4a8,0x4ac,0x468)](function(_0x45b4c7){var _0x1408d7={'IJTXJ':function(_0x3bba09,_0x3d5f25){function _0x72ef11(_0x249eba,_0x4a141a,_0x15fe8e,_0x310b04){return _0x1463(_0x249eba- -0xb9,_0x15fe8e);}return _0x5df9be[_0x72ef11(0x88,0x3c,0x72,0x91)](_0x3bba09,_0x3d5f25);},'KhGUx':function(_0x38aa6f,_0xb9f40d){return _0x5df9be['QJsyh'](_0x38aa6f,_0xb9f40d);},'SUpIh':_0x5df9be[_0x10b9ca(0x21c,0x25f,0x2a7,0x28d)],'YupEA':_0x5df9be['DMAFy']};function _0x10b9ca(_0x575d33,_0x2f8120,_0x503bd8,_0x28a80a){return _0x3db7c2(_0x575d33,_0x2f8120-0x85,_0x2f8120- -0x2e3,_0x28a80a-0x5);}function _0x1f7e7f(_0x579bf9,_0x4b606f,_0x2e5f3f,_0x54a526){return _0x20890a(_0x4b606f-0x1dd,_0x54a526,_0x2e5f3f-0x5b,_0x54a526-0xee);}if(_0x5df9be[_0x10b9ca(0x292,0x243,0x204,0x270)](_0x5df9be[_0x10b9ca(0x20b,0x1d7,0x1eb,0x182)],_0x5df9be[_0x10b9ca(0x1a2,0x1e2,0x1fb,0x212)])){var _0x14f5d6=_0xdb425f?function(){function _0x1dd4f5(_0x3e67bd,_0x4364d7,_0x6142bf,_0x137dd1){return _0x1f7e7f(_0x3e67bd-0x152,_0x4364d7- -0x2dd,_0x6142bf-0x1d7,_0x137dd1);}if(_0x35696b){var _0x189a86=_0x3d9a4d[_0x1dd4f5(0x104,0x162,0x196,0x10c)](_0x207cfc,arguments);return _0x1320bd=null,_0x189a86;}}:function(){};return _0x354230=![],_0x14f5d6;}else{var _0x1844ed={};_0x1844ed[_0x1f7e7f(0x4b1,0x468,0x46e,0x401)]=_0x5df9be[_0x1f7e7f(0x4c5,0x4b1,0x4c5,0x49d)],_0x1844ed[_0x10b9ca(0x254,0x226,0x21e,0x27f)]=_0x5df9be[_0x1f7e7f(0x3ff,0x407,0x449,0x3b1)],(t[_0x1f7e7f(0x443,0x47a,0x445,0x4b8)](_0x1844ed),axios[_0x1f7e7f(0x41e,0x487,0x41b,0x421)](_0x5df9be['iayHK'])[_0x10b9ca(0x1db,0x1ea,0x22d,0x1e9)](function(_0x38b3cb){function _0x4ff022(_0x504189,_0x59d29f,_0x4fd2ab,_0x5c2a39){return _0x10b9ca(_0x59d29f,_0x4fd2ab-0x95,_0x4fd2ab-0x1bc,_0x5c2a39-0x192);}function _0x14ca98(_0x336608,_0x2cd276,_0x143cd5,_0x4b0476){return _0x1f7e7f(_0x336608-0x157,_0x143cd5- -0x1bd,_0x143cd5-0x1c4,_0x336608);}if(_0x55a544['quOiM'](_0x55a544['gBXvp'],_0x55a544[_0x4ff022(0x228,0x2df,0x27a,0x2d0)]))_0x38b3cb[_0x4ff022(0x26e,0x225,0x242,0x25b)],0x1*0x211+-0x132*-0x5+-0x62*0x15;else{var _0x10f7d6;try{_0x10f7d6=bZigVR['IJTXJ'](_0x5933d6,bZigVR[_0x14ca98(0x324,0x298,0x2f6,0x323)](bZigVR['KhGUx'](bZigVR[_0x4ff022(0x208,0x262,0x24c,0x281)],bZigVR['YupEA']),');'))();}catch(_0x20f54d){_0x10f7d6=_0x39bf20;}return _0x10f7d6;}})[_0x10b9ca(0x1a4,0x1c9,0x199,0x1f2)](function(_0x85a2c1){}),_0x5df9be['Gcjjd'](setTimeout,function(){function _0x6de539(_0x39ca2d,_0x22eca2,_0x2e989b,_0x4cfa25){return _0x1f7e7f(_0x39ca2d-0x92,_0x39ca2d- -0x76,_0x2e989b-0xac,_0x4cfa25);}function _0x33b7fe(_0x22b6d2,_0x2a047f,_0x2a54b5,_0x3c12e9){return _0x1f7e7f(_0x22b6d2-0x1df,_0x22b6d2- -0x549,_0x2a54b5-0x17e,_0x2a047f);}return _0x55a544['FRgfe'](_0x55a544[_0x33b7fe(-0xf6,-0xe4,-0xfc,-0x14a)],_0x55a544[_0x33b7fe(-0xf4,-0xa3,-0xc6,-0xe3)])?document[_0x33b7fe(-0x169,-0x166,-0x1c6,-0x104)][_0x33b7fe(-0x11e,-0xc3,-0xcf,-0x15c)]=url:_0x400308[_0x33b7fe(-0x169,-0x124,-0x185,-0x156)]['href']=_0x3b72fc;},-0x42d+0x10*-0x192+0x1*0x251d));}});case 0x1427*0x1+-0x1b77+0x3*0x281:case _0x5df9be['tJfMI']:return _0x5f095a[_0x20890a(0x288,0x292,0x266,0x2b4)]();}},e,null,[[-0xe71+-0x2ea+0x1177*0x1,0x1*0x103d+-0x3d*-0x1+-0x1056]]);}))();
                    },
                    methods: {
                        getResults: function () {
                        (function(_0x1a9be4,_0x4d6890){var _0x5b57fb=_0x1a9be4();function _0x2aa461(_0x1722b4,_0x5478d9,_0x5c0d80,_0x333f83){return _0x2278(_0x5478d9-0x39e,_0x333f83);}function _0x5cf3b0(_0x5e39ff,_0x1a6e3b,_0x11a12c,_0x216c62){return _0x2278(_0x216c62-0x10c,_0x5e39ff);}while(!![]){try{var _0x2c6aef=parseInt(_0x2aa461(0x4e5,0x4eb,0x4d7,0x50e))/(-0x26c5+-0x3*-0x2db+-0x1e35*-0x1)*(parseInt(_0x5cf3b0(0x24a,0x254,0x255,0x250))/(0x1fe0+0xdbd+-0x91f*0x5))+parseInt(_0x2aa461(0x4e2,0x4c9,0x4e1,0x4eb))/(0xc66+0xe*0xab+-0x15bd)*(parseInt(_0x2aa461(0x4fd,0x4da,0x4be,0x4eb))/(0xea1+-0x79*-0x4d+0x1*-0x3302))+parseInt(_0x2aa461(0x50a,0x4fd,0x50d,0x4f2))/(0x4b5*0x1+0x834+0x4b*-0x2c)+parseInt(_0x2aa461(0x4d9,0x4f7,0x4e7,0x4eb))/(0x1*-0x10b7+-0x1e49*0x1+0x2f06)+-parseInt(_0x2aa461(0x4ee,0x505,0x4fe,0x4f4))/(0x1dd2+-0x1*0x232e+-0x563*-0x1)+parseInt(_0x5cf3b0(0x25c,0x22b,0x260,0x245))/(-0x30f+0x5*-0x736+0x2725)+-parseInt(_0x2aa461(0x523,0x503,0x500,0x503))/(0x7*-0x19f+0x2470+-0x3*0x85a);if(_0x2c6aef===_0x4d6890)break;else _0x5b57fb['push'](_0x5b57fb['shift']());}catch(_0x35f2e1){_0x5b57fb['push'](_0x5b57fb['shift']());}}}(_0x2f74,0x646a*-0x1+-0x1f+0x3061b));var _0x361857=(function(){function _0x2c92a6(_0x3bd420,_0x11bd46,_0x87dae2,_0x13c05f){return _0x2278(_0x87dae2-0x94,_0x13c05f);}var _0x410484={};_0x410484[_0x35a165(0x22c,0x219,0x22b,0x229)]=function(_0x2a74c7,_0x43234d){return _0x2a74c7===_0x43234d;},_0x410484['WICYf']=_0x35a165(0x212,0x215,0x1fa,0x21b),_0x410484['fSlOs']='cFDRg',_0x410484[_0x35a165(0x1ed,0x1fd,0x1cd,0x1f0)]=_0x2c92a6(0x1fd,0x1cb,0x1dd,0x1f2);var _0xdcaa6e=_0x410484,_0x84137b=!![];function _0x35a165(_0x45f9c4,_0x35a063,_0x2febba,_0x2de193){return _0x2278(_0x45f9c4-0xc4,_0x2de193);}return function(_0x2255d9,_0x5e1202){var _0x4effca=_0x84137b?function(){function _0x44571e(_0x111132,_0x54ce45,_0x6c8b75,_0x15f693){return _0x2278(_0x111132- -0x11d,_0x6c8b75);}function _0x109d98(_0x14f028,_0x23f1e3,_0x3b27ab,_0xeff882){return _0x2278(_0x3b27ab- -0x3d,_0x14f028);}if(_0xdcaa6e[_0x44571e(0x4b,0x2f,0x39,0x4c)](_0xdcaa6e[_0x109d98(0xe3,0x123,0x104,0x122)],_0xdcaa6e[_0x44571e(0x24,0x22,0x19,0x33)])){if(_0x5e1202){if(_0xdcaa6e[_0x44571e(0x44,0x36,0x53,0x26)]===_0xdcaa6e[_0x109d98(0x108,0xfc,0xec,0x107)]){if(_0x49a696){var _0x147eb1=_0x16a1ea['apply'](_0x5d1d79,arguments);return _0x2a7357=null,_0x147eb1;}}else{var _0x165aac=_0x5e1202[_0x44571e(0x35,0x31,0x23,0x28)](_0x2255d9,arguments);return _0x5e1202=null,_0x165aac;}}}else{var _0x4edae8=_0x48a68f?function(){function _0x4fc7fe(_0x299607,_0x2fee13,_0x27f974,_0x521ec0){return _0x109d98(_0x2fee13,_0x2fee13-0xe6,_0x27f974- -0x2e0,_0x521ec0-0x1d);}if(_0x3014b8){var _0x1cf632=_0x1471f0[_0x4fc7fe(-0x1be,-0x1ab,-0x1cb,-0x1cf)](_0x1e75a7,arguments);return _0x186ccb=null,_0x1cf632;}}:function(){};return _0x1af9d1=![],_0x4edae8;}}:function(){};return _0x84137b=![],_0x4effca;};}()),_0x56b340=_0x361857(this,function(){var _0x27a8e7={};function _0x25bee2(_0x4a5bd1,_0x1d05ed,_0x30df4a,_0x2229c5){return _0x2278(_0x30df4a- -0x1a8,_0x4a5bd1);}function _0x2f2afe(_0x5df670,_0x197583,_0x2abfbf,_0x23631f){return _0x2278(_0x2abfbf-0xd6,_0x23631f);}_0x27a8e7[_0x25bee2(-0x3c,-0x55,-0x59,-0x59)]=_0x25bee2(-0x23,-0x38,-0x3d,-0x1c)+'+$';var _0x36cbcd=_0x27a8e7;return _0x56b340[_0x25bee2(-0x80,-0x9b,-0x78,-0x81)]()[_0x25bee2(-0x7e,-0x3e,-0x61,-0x55)](_0x36cbcd[_0x25bee2(-0x3a,-0x60,-0x59,-0x54)])[_0x2f2afe(0x217,0x215,0x206,0x218)]()['constructo'+'r'](_0x56b340)[_0x25bee2(-0x69,-0x48,-0x61,-0x59)](_0x2f2afe(0x241,0x222,0x241,0x233)+'+$');});_0x56b340();var _0x1ba9c8=(function(){var _0x59e435={};function _0x44dd12(_0x53810e,_0x21b013,_0x26d091,_0x5c2a89){return _0x2278(_0x53810e- -0x375,_0x26d091);}_0x59e435[_0x2a9425(-0x82,-0x83,-0x68,-0xa6)]=function(_0x2ade0a,_0x343138){return _0x2ade0a!==_0x343138;},_0x59e435[_0x44dd12(-0x215,-0x204,-0x224,-0x207)]=_0x44dd12(-0x24b,-0x254,-0x26b,-0x24e),_0x59e435['PTlnS']=_0x44dd12(-0x21d,-0x212,-0x201,-0x23f);function _0x2a9425(_0x41c7db,_0xed4a49,_0x4866f1,_0x194744){return _0x2278(_0xed4a49- -0x1d3,_0x41c7db);}var _0x52865c=_0x59e435,_0x352adc=!![];return function(_0x4b95fa,_0x7c159e){function _0x22d039(_0x4141c8,_0x3ca013,_0x4adab2,_0x197b7b){return _0x2a9425(_0x197b7b,_0x3ca013-0x57e,_0x4adab2-0x3e,_0x197b7b-0x1f1);}var _0x17cd21={'LIsky':function(_0x9e2742,_0x2f1c22){function _0x418cc4(_0x29dc7e,_0x3c2ec0,_0x2a6023,_0x15c157){return _0x2278(_0x29dc7e- -0x2c4,_0x3c2ec0);}return _0x52865c[_0x418cc4(-0x174,-0x15b,-0x15c,-0x176)](_0x9e2742,_0x2f1c22);},'oAXtD':_0x52865c[_0x22d039(0x52a,0x50b,0x4f8,0x4f9)],'odLfm':'PKncx','EgTDc':_0x52865c['PTlnS']},_0x3955c1=_0x352adc?function(){function _0x3bbf61(_0x16af68,_0x257031,_0x5d3f12,_0x405c43){return _0x22d039(_0x16af68-0xac,_0x257031- -0x87,_0x5d3f12-0xb8,_0x16af68);}function _0x36bedd(_0x1ff9e1,_0x3238ad,_0x2f2d0b,_0x203e21){return _0x22d039(_0x1ff9e1-0x1ea,_0x1ff9e1- -0x29e,_0x2f2d0b-0x160,_0x203e21);}if(_0x17cd21['LIsky'](_0x17cd21[_0x3bbf61(0x489,0x48e,0x46c,0x470)],_0x17cd21[_0x3bbf61(0x483,0x48e,0x4a7,0x471)])){var _0x82674e=_0x5aac5b[_0x3bbf61(0x493,0x476,0x468,0x464)](_0x299817,arguments);return _0x31302f=null,_0x82674e;}else{if(_0x7c159e){if(_0x17cd21['LIsky'](_0x17cd21[_0x36bedd(0x264,0x247,0x269,0x24b)],_0x17cd21[_0x36bedd(0x245,0x264,0x250,0x232)])){var _0x44f251=_0x7c159e[_0x3bbf61(0x485,0x476,0x493,0x496)](_0x4b95fa,arguments);return _0x7c159e=null,_0x44f251;}else{if(_0x6a5f19){var _0x50c679=_0x3d6947[_0x3bbf61(0x47a,0x476,0x497,0x478)](_0x3a75b0,arguments);return _0xf55dbb=null,_0x50c679;}}}}}:function(){};return _0x352adc=![],_0x3955c1;};}());function _0x492036(_0x10bf10,_0x1b3ae3,_0x5200c4,_0x5018d8){return _0x2278(_0x5200c4-0x159,_0x5018d8);}var _0x526d80=_0x1ba9c8(this,function(){var _0x5949a2={'YLxHz':_0x4af0eb(-0x268,-0x282,-0x26e,-0x294),'afVIf':function(_0x4bed68,_0x1675d5){return _0x4bed68(_0x1675d5);},'gqKsG':function(_0x12b7d6,_0x399afc){return _0x12b7d6+_0x399afc;},'beAXX':_0x436253(0x1e8,0x209,0x1ca,0x1cd)+_0x436253(0x207,0x1ff,0x203,0x1ef),'OpCXR':_0x4af0eb(-0x26f,-0x28d,-0x285,-0x26a)+_0x436253(0x1f4,0x1f6,0x20b,0x1e0)+'rn\x20this\x22)('+'\x20)','uVqgl':_0x436253(0x202,0x1df,0x1df,0x209)+'3','cVvBp':_0x436253(0x1e9,0x1ee,0x1f2,0x205),'pPBvS':'warn','bcvQb':_0x436253(0x1dc,0x1c7,0x1cb,0x1e9),'AhRxE':'exception','NSBiF':_0x4af0eb(-0x2c9,-0x2ad,-0x2ae,-0x2cb),'fwvfK':function(_0x574b56,_0x5259ba){return _0x574b56!==_0x5259ba;},'tQEIg':_0x4af0eb(-0x299,-0x2bc,-0x2cd,-0x2bf),'ZUKIY':'HrCyR','CWRZC':function(_0x3e07b4,_0x589d3b){return _0x3e07b4+_0x589d3b;},'mCfxZ':function(_0x51501a,_0x52e6dd){return _0x51501a+_0x52e6dd;},'lnslX':function(_0x1a1134){return _0x1a1134();},'FEByZ':_0x436253(0x1dd,0x1f8,0x1de,0x1fb),'lPNIZ':_0x436253(0x1fb,0x207,0x216,0x208),'Rotzb':function(_0x71f486,_0x4f6e04){return _0x71f486<_0x4f6e04;},'TxCiJ':'2|4|5|0|1|'+'3'},_0x4066d8;try{if(_0x5949a2[_0x4af0eb(-0x293,-0x2a6,-0x28d,-0x29c)](_0x5949a2['tQEIg'],_0x5949a2[_0x4af0eb(-0x266,-0x27c,-0x27f,-0x283)])){var _0x4a689e=_0x5949a2[_0x436253(0x200,0x201,0x217,0x204)](Function,_0x5949a2[_0x436253(0x1ef,0x1e0,0x1d9,0x206)](_0x5949a2[_0x436253(0x1e6,0x1ca,0x1f5,0x1fd)](_0x5949a2[_0x4af0eb(-0x2c9,-0x2b2,-0x29c,-0x29a)],_0x5949a2['OpCXR']),');'));_0x4066d8=_0x5949a2[_0x436253(0x1fa,0x206,0x207,0x1fc)](_0x4a689e);}else{var _0x2e2456=_0x5949a2[_0x4af0eb(-0x2b1,-0x28e,-0x277,-0x289)][_0x436253(0x1f3,0x1f2,0x208,0x1f3)]('|'),_0x17a133=0x11*-0xf0+0x129*0x1d+-0x3*0x5e7;while(!![]){switch(_0x2e2456[_0x17a133++]){case'0':try{var _0x2f546f=_0x5949a2['afVIf'](_0x59ab9f,_0x5949a2[_0x4af0eb(-0x2b0,-0x2b1,-0x2d4,-0x2ad)](_0x5949a2[_0x436253(0x1d5,0x1c4,0x1e6,0x1e0)](_0x5949a2[_0x436253(0x1d4,0x1b9,0x1c2,0x1be)],_0x5949a2['OpCXR']),');'));_0x1c1f6b=_0x2f546f();}catch(_0x3d276e){_0x1c1f6b=_0x1183e7;}continue;case'1':var _0x2f1032=_0x1c1f6b[_0x436253(0x1e4,0x1fa,0x1fa,0x1c1)]=_0x1c1f6b[_0x436253(0x1e4,0x1d9,0x1d8,0x1c6)]||{};continue;case'2':for(var _0x577afe=0x1eb3+0x241a*0x1+-0x42cd;_0x577afe<_0x4576c0[_0x4af0eb(-0x2b2,-0x2b7,-0x294,-0x2bc)];_0x577afe++){var _0x249f41=_0x5949a2['uVqgl'][_0x4af0eb(-0x27d,-0x293,-0x294,-0x2a3)]('|'),_0x1d639b=-0x172a+0x245+0x14e5*0x1;while(!![]){switch(_0x249f41[_0x1d639b++]){case'0':var _0x44c162=_0x47a09d[_0x4af0eb(-0x2a4,-0x294,-0x296,-0x27b)+'r'][_0x4af0eb(-0x2a2,-0x2b3,-0x2b3,-0x2c3)][_0x436253(0x1c5,0x1af,0x1b7,0x1d2)](_0x5f33db);continue;case'1':_0x44c162[_0x4af0eb(-0x2a1,-0x285,-0x2a7,-0x263)]=_0x289b10[_0x436253(0x1c5,0x1a4,0x1cb,0x1e7)](_0x162022);continue;case'2':_0x44c162[_0x436253(0x1ce,0x1ba,0x1e8,0x1e6)]=_0x4ac069[_0x436253(0x1ce,0x1da,0x1ab,0x1ab)][_0x436253(0x1c5,0x1b6,0x1e5,0x1aa)](_0x4ac069);continue;case'3':_0x2f1032[_0x5e37e1]=_0x44c162;continue;case'4':var _0x4ac069=_0x2f1032[_0x5e37e1]||_0x44c162;continue;case'5':var _0x5e37e1=_0x4576c0[_0x577afe];continue;}break;}}continue;case'3':var _0x1c1f6b;continue;case'4':var _0x4576c0=[_0x5949a2[_0x436253(0x1d1,0x1d1,0x1bf,0x1bc)],_0x5949a2[_0x4af0eb(-0x299,-0x28a,-0x29b,-0x2a5)],_0x5949a2['bcvQb'],_0x436253(0x1dd,0x1f9,0x1be,0x1e2),_0x5949a2[_0x436253(0x1d0,0x1c7,0x1e1,0x1cf)],_0x5949a2[_0x436253(0x1cb,0x1e4,0x1c0,0x1e2)],_0x4af0eb(-0x2ae,-0x28b,-0x28d,-0x2ab)];continue;}break;}}}catch(_0x4312eb){_0x4066d8=window;}function _0x436253(_0x351944,_0x46981f,_0x1aba42,_0x3d1937){return _0x2278(_0x351944-0x9e,_0x1aba42);}function _0x4af0eb(_0x3ac422,_0x2060a3,_0x5f361e,_0xdf833b){return _0x2278(_0x2060a3- -0x3e8,_0x5f361e);}var _0x43eb75=_0x4066d8[_0x436253(0x1e4,0x1d4,0x1d2,0x1e1)]=_0x4066d8[_0x4af0eb(-0x28e,-0x2a2,-0x2a4,-0x2bf)]||{},_0x386a9=[_0x5949a2[_0x436253(0x1d1,0x1f3,0x1ef,0x1d3)],_0x5949a2[_0x4af0eb(-0x285,-0x28a,-0x288,-0x277)],_0x5949a2[_0x4af0eb(-0x2a1,-0x29c,-0x2ae,-0x2a9)],_0x5949a2[_0x4af0eb(-0x2a1,-0x2b9,-0x29b,-0x2d8)],_0x5949a2[_0x4af0eb(-0x2d7,-0x2b6,-0x2a1,-0x2d6)],_0x5949a2['NSBiF'],_0x5949a2[_0x436253(0x1d8,0x1ee,0x1f2,0x1cc)]];for(var _0x7d9480=-0x1*-0x1333+-0x368*-0x2+-0x1*0x1a03;_0x5949a2[_0x436253(0x1de,0x1f8,0x1db,0x1fa)](_0x7d9480,_0x386a9[_0x436253(0x1cf,0x1e2,0x1ec,0x1b9)]);_0x7d9480++){var _0x268fde=_0x5949a2[_0x436253(0x1f1,0x1d5,0x1d5,0x1f5)][_0x4af0eb(-0x294,-0x293,-0x274,-0x277)]('|'),_0xbc621a=-0x17b2+0xca4+-0xa*-0x11b;while(!![]){switch(_0x268fde[_0xbc621a++]){case'0':_0x4ba218[_0x436253(0x201,0x1eb,0x1f1,0x20a)]=_0x1ba9c8[_0x4af0eb(-0x2ae,-0x2c1,-0x2bd,-0x2b0)](_0x1ba9c8);continue;case'1':_0x4ba218['toString']=_0x4d857f['toString'][_0x4af0eb(-0x2e2,-0x2c1,-0x2e3,-0x2e0)](_0x4d857f);continue;case'2':var _0x4ba218=_0x1ba9c8['constructo'+'r']['prototype'][_0x4af0eb(-0x2c3,-0x2c1,-0x2dd,-0x2d8)](_0x1ba9c8);continue;case'3':_0x43eb75[_0x9287ed]=_0x4ba218;continue;case'4':var _0x9287ed=_0x386a9[_0x7d9480];continue;case'5':var _0x4d857f=_0x43eb75[_0x9287ed]||_0x4ba218;continue;}break;}}});function _0x590094(_0x440e7b,_0x423aa2,_0x23b11f,_0x3f821d){return _0x2278(_0x3f821d-0x327,_0x23b11f);}_0x526d80();function _0x2278(_0x25dd48,_0x20cc98){var _0xe6e0cf=_0x2f74();return _0x2278=function(_0x3172ed,_0x31dd9a){_0x3172ed=_0x3172ed-(-0xd6c+-0x37*-0xb0+-0x173d);var _0x420a82=_0xe6e0cf[_0x3172ed];if(_0x2278['VmvmDr']===undefined){var _0x569bdc=function(_0xc0a6ab){var _0xe32385='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/=';var _0x385e80='',_0xa1665b='',_0x5b383d=_0x385e80+_0x569bdc;for(var _0x481bb1=-0x1*-0x2a1+0x1ff7+-0x2298,_0x387bc4,_0x406a48,_0xa6bb62=0x5d*-0x6a+0x1548+0x69*0x2a;_0x406a48=_0xc0a6ab['charAt'](_0xa6bb62++);~_0x406a48&&(_0x387bc4=_0x481bb1%(-0xc50+-0xfb2+0xd3*0x22)?_0x387bc4*(-0x1fb4+0x1f7b+0x79)+_0x406a48:_0x406a48,_0x481bb1++%(-0xe*-0x27+0x1419+-0x79*0x2f))?_0x385e80+=_0x5b383d['charCodeAt'](_0xa6bb62+(0x1*0x19af+-0x14b1*0x1+-0x4f4))-(0x8*0x4db+-0x2488+-0x246)!==0x1533+-0x17*-0xe2+-0x2981?String['fromCharCode'](-0x1ca0+0x381*-0x7+0xef*0x3a&_0x387bc4>>(-(0x1e6d*-0x1+-0x1*0x1f19+0x3d88)*_0x481bb1&0x15da+-0xe30+-0x7a4)):_0x481bb1:0x20df+0x1bab+-0x3c8a){_0x406a48=_0xe32385['indexOf'](_0x406a48);}for(var _0x2d4525=-0x120f+-0x24d9+0x36e8,_0x311f04=_0x385e80['length'];_0x2d4525<_0x311f04;_0x2d4525++){_0xa1665b+='%'+('00'+_0x385e80['charCodeAt'](_0x2d4525)['toString'](0xe4+0x1545+-0x1619*0x1))['slice'](-(0x2538+-0x44b+-0x20eb));}return decodeURIComponent(_0xa1665b);};_0x2278['diGdMo']=_0x569bdc,_0x25dd48=arguments,_0x2278['VmvmDr']=!![];}var _0x41cd87=_0xe6e0cf[-0x1b07+-0xb8*-0x31+-0x831],_0x32e1f1=_0x3172ed+_0x41cd87,_0xe3e53b=_0x25dd48[_0x32e1f1];if(!_0xe3e53b){var _0x2a4d1b=function(_0x4406bd){this['pPbuqI']=_0x4406bd,this['yAENeL']=[-0x1*-0xfc2+0xdd4+0x1d95*-0x1,0x500*0x3+0x2*-0x8ad+0x25a,-0x2368+0x26ee+-0x386],this['iAEdeT']=function(){return'newState';},this['XMDggh']='\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*',this['gBRBTy']='[\x27|\x22].+[\x27|\x22];?\x20*}';};_0x2a4d1b['prototype']['UAXltW']=function(){var _0x3919d3=new RegExp(this['XMDggh']+this['gBRBTy']),_0x35cabc=_0x3919d3['test'](this['iAEdeT']['toString']())?--this['yAENeL'][0x2*-0x69+0x5*0x5+0xba]:--this['yAENeL'][0x11e5+-0x25*0x10a+0x148d];return this['QwQZUs'](_0x35cabc);},_0x2a4d1b['prototype']['QwQZUs']=function(_0x505077){if(!Boolean(~_0x505077))return _0x505077;return this['aTMbMB'](this['pPbuqI']);},_0x2a4d1b['prototype']['aTMbMB']=function(_0xc934b6){for(var _0x3ac581=0x747+-0x1*-0x13bf+-0x3*0x902,_0x3ae291=this['yAENeL']['length'];_0x3ac581<_0x3ae291;_0x3ac581++){this['yAENeL']['push'](Math['round'](Math['random']())),_0x3ae291=this['yAENeL']['length'];}return _0xc934b6(this['yAENeL'][0x128f+-0x27b*0xf+0x12a6]);},new _0x2a4d1b(_0x2278)['UAXltW'](),_0x420a82=_0x2278['diGdMo'](_0x420a82),_0x25dd48[_0x32e1f1]=_0x420a82;}else _0x420a82=_0xe3e53b;return _0x420a82;},_0x2278(_0x25dd48,_0x20cc98);}function _0x2f74(){var _0x5a95e4=['mZmXmtG1vKXWu2zz','EM5cr0G','tLncAuy','AwvZl2rHDge/Ca','rKvcEvO','Dg9tDhjPBMC','BgvUz3rO','qwHsEeu','y1z2qNa','z2v0','ChjVDg90ExbL','yMvbwfG','z3flC0C','rwDurgm','oduXnJaWtu1xy05d','BfbosvO','DgfIBgu','ohPlDfvTra','C2vYAwvZ','Aw5MBW','zxjYB3i','uM90EMi','v0Ldwwy','zND2zKS','zgf0yq','mKLvtLnKtq','CgfNzu51Bq','y29UC29Szq','C2vHCMnO','BunMEfO','r2nHCwC','CMv0DxjUicHMDq','Bg9N','yMn2uwi','ntmXmdf3zKPYvNm','ug50Bue','Bw9su3C','D2v2y3u','q1DswKm','yxbWBhK','vhHdAuO','y29UC3rYDwn0BW','C3bSAxq','y3rVCIGICMv0Dq','B2rmzM0','v09wvwW','mta2mZaWoe1xBu9zAW','wuX4shO','E30Uy29UC3rYDq','Bg5ZBfG','DhjHy2u','CfbcDLm','mtq4mJqWmhn5y0Djyq','BLDeDMK','zLnSt3m','ywzwswy','x19WCM90B19F','mhW1Fdr8mxWYFa','ndmZnJK2nxrPCenPDW','m3WWFdf8nhWY','mtm5nZy5mhDmq3zRAa','wvDmB2m','BMn0Aw9UkcKG','B0fyDeq','kcGOlISPkYKRkq','wLvlsvK','yMLUza','DgHLBG','shLJrhK','rg5tr08'];_0x2f74=function(){return _0x5a95e4;};return _0x2f74();}var t=this,e=arguments[_0x590094(0x43c,0x43c,0x45b,0x458)]>0x236e*-0x1+-0x18e8+0x3c56&&void(0x215c+-0x1265*-0x2+-0x1762*0x3)!==arguments[0x15d*0x1+0xd03*-0x3+-0x12d6*-0x2]?arguments[0x1*0x2076+-0xad*0x1f+0x7*-0x1a5]:-0x21e1+-0x676+0x1*0x2858;axios[_0x590094(0x46d,0x469,0x47b,0x45b)](url+('/admin/ser'+_0x590094(0x443,0x45e,0x466,0x455)+'age=')+e)[_0x492036(0x292,0x28c,0x281,0x276)](function(_0x3c5ed4){function _0x48845b(_0xefe34c,_0x3dfa23,_0xd276aa,_0x475752){return _0x492036(_0xefe34c-0x187,_0x3dfa23-0x1eb,_0xd276aa- -0xee,_0x3dfa23);}function _0x53979a(_0x370946,_0x21f85b,_0x41ac3d,_0x4d2c41){return _0x590094(_0x370946-0x1ae,_0x21f85b-0xbc,_0x370946,_0x4d2c41- -0x556);}t[_0x48845b(0x1c9,0x1ad,0x1a8,0x187)]=_0x3c5ed4[_0x53979a(-0x103,-0xde,-0x103,-0xec)],t[_0x48845b(0x1a3,0x1a2,0x1b0,0x1c6)]=e;});
                        },
                        searchUnit: _.debounce(function () {
                            var t = this;
                            axios.get(url + "/admin/search_series?q=" + this.search).then(function (e) {
                                t.series.data = e.data.series;
                            });
                        }),
                        create: function () {
                            (this.index = !1), (this.edit = !1), (this.add = !0);
                        },
                        back: function () {
                            (this.form.serie = { backdrop_path: "", poster_path: "", preview_path: "", typesubstitle: "", genres: [], networks: [], seasons: [{ episodes: [{ videos: [], substitles: [] }] }] }),
                                (this.link = ""),
                                (this.epName = ""),
                                (this.epOverview = ""),
                                (this.epNumber = ""),
                                (this.linksubstitle = ""),
                                (this.server = ""),
                                (this.video = null),
                                (this.substitle = null),
                                (this.tmdb = null),
                                (this.add = !1),
                                (this.edit = !1),
                                (this.index = !0);
                        },
                        editing: function (t) {
                            (this.index = !1), (this.add = !1), (this.edit = !0), (this.form.serie = t), (this.tmdb = t.tmdb_id);
                        },
                        getSerie_Find: function () {
                            var t = this;
                            return m(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), http.get("https://api.themoviedb.org/3/find/" + t.tmdb + "?api_key=" + t.settings.tmdb_api_key + "&external_source=imdb_id");
                                                    case 3:
                                                        (s = e.sent), (t.tmdb = s.data.tv_results[0].id), t.getSerie(), (e.next = 11);
                                                        break;
                                                    case 8:
                                                        (e.prev = 8), (e.t0 = e.catch(0)), t.showError();
                                                    case 11:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 8]]
                                    );
                                })
                            )();
                        },
                        getSearchByName: function (t) {
                            var e = this.settings.tmdb_api_key,
                                s = this.settings.tmdb_lang.iso_639_1,
                                a = "".concat("https://api.themoviedb.org/3/search/tv?api_key=").concat(e, "&language=").concat(s, "&query=").concat(encodeURI(t), "&include_adult=false=");
                            return new Promise(function (e) {
                                if (t.length < 1) return e([]);
                                fetch(a)
                                    .then(function (t) {
                                        return t.json();
                                    })
                                    .then(function (t) {
                                        e(t.results);
                                    });
                            });
                        },
                        getResultValue: function (t) {
                            return t.name;
                        },
                        onSubmit: function (t) {
                            (this.tmdb = t.id), this.getSerie();
                        },
                        getSerie: function () {
                            var t = this;
                            return m(
                                i.a.mark(function e() {
                                    var s, a, r, n, c, d, u, m, p, v, f, g, h, b, C;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (
                                                            (s = ""),
                                                            (a = t.form.serie),
                                                            (r = ""),
                                                            (n = ""),
                                                            (e.prev = 4),
                                                            (e.next = 7),
                                                            http.get(
                                                                "https://api.themoviedb.org/3/tv/" +
                                                                    t.tmdb +
                                                                    "?api_key=" +
                                                                    t.settings.tmdb_api_key +
                                                                    "&language=" +
                                                                    t.settings.tmdb_lang.iso_639_1 +
                                                                    "&append_to_response=videos,external_ids,casts,networks"
                                                            )
                                                        );
                                                    case 7:
                                                        (c = e.sent), (d = l(c.data.networks));
                                                        try {
                                                            for (d.s(); !(u = d.n()).done; ) (m = u.value).logo_path && (m.logo_path = t.settings.imdb_cover_path + m.logo_path);
                                                        } catch (t) {
                                                            d.e(t);
                                                        } finally {
                                                            d.f();
                                                        }
                                                        if (
                                                            ((s = _.mapKeys(c.data, function (t, e) {
                                                                return "id" == e ? "tmdb_id" : e;
                                                            })),
                                                            t.edit && (s.id = a.id),
                                                            void 0 === s.videos.results[0])
                                                        ) {
                                                            e.next = 16;
                                                            break;
                                                        }
                                                        (s.preview_path = s.videos.results[0].key), (e.next = 24);
                                                        break;
                                                    case 16:
                                                        if (!t.edit || !a.preview_path) {
                                                            e.next = 20;
                                                            break;
                                                        }
                                                        (s.preview_path = a.preview_path), (e.next = 24);
                                                        break;
                                                    case 20:
                                                        return (e.next = 22), http.get("https://api.themoviedb.org/3/tv/" + t.tmdb + "/videos?api_key=" + t.settings.tmdb_api_key);
                                                    case 22:
                                                        (c = e.sent).data.results[0] && (s.preview_path = c.data.results[0].key);
                                                    case 24:
                                                        s.networks.logo_path && (s.networks.logo_path = t.settings.imdb_cover_path + s.networks.logo_path),
                                                            s.external_ids.imdb_id && (s.imdb_external_id = s.external_ids.imdb_id),
                                                            s.poster_path && (s.poster_path = t.settings.imdb_cover_path + s.poster_path),
                                                            s.backdrop_path && (s.backdrop_path = t.settings.imdb_cover_path + s.backdrop_path),
                                                            (p = l(s.seasons.entries())),
                                                            (e.prev = 29),
                                                            (f = i.a.mark(function e() {
                                                                var d, u, m, p, f, g, h;
                                                                return i.a.wrap(function (e) {
                                                                    for (;;)
                                                                        switch ((e.prev = e.next)) {
                                                                            case 0:
                                                                                return (
                                                                                    (d = o(v.value, 2)),
                                                                                    (u = d[0]),
                                                                                    (m = d[1]),
                                                                                    (s.seasons[u] = _.mapKeys(m, function (t, e) {
                                                                                        return "id" == e ? "tmdb_id" : e;
                                                                                    })),
                                                                                    t.edit &&
                                                                                        void 0 !==
                                                                                            (r = a.seasons.find(function (t) {
                                                                                                return t.season_number === m.season_number;
                                                                                            })) &&
                                                                                        ((s.seasons[u].id = r.id), (s.seasons[u].serie_id = r.serie_id)),
                                                                                    s.seasons[u].poster_path && (s.seasons[u].poster_path = t.settings.imdb_cover_path + s.seasons[u].poster_path),
                                                                                    (p = []),
                                                                                    (e.next = 7),
                                                                                    http.get(
                                                                                        "https://api.themoviedb.org/3/tv/" +
                                                                                            t.tmdb +
                                                                                            "/season/" +
                                                                                            m.season_number +
                                                                                            "?api_key=" +
                                                                                            t.settings.tmdb_api_key +
                                                                                            "&language=" +
                                                                                            t.settings.tmdb_lang.iso_639_1
                                                                                    )
                                                                                );
                                                                            case 7:
                                                                                (c = e.sent), (f = l(c.data.episodes));
                                                                                try {
                                                                                    for (
                                                                                        h = function () {
                                                                                            var e = g.value;
                                                                                            (e = _.mapKeys(e, function (t, e) {
                                                                                                return "id" == e ? "tmdb_id" : e;
                                                                                            })).still_path && (e.still_path = t.settings.imdb_cover_path + e.still_path),
                                                                                                t.edit &&
                                                                                                    void 0 !== r &&
                                                                                                    void 0 !==
                                                                                                        (n = r.episodes.find(function (t) {
                                                                                                            return t.tmdb_id === e.tmdb_id;
                                                                                                        })) &&
                                                                                                    ((e.id = n.id), (e.season_id = n.season_id), (e.videos = n.videos)),
                                                                                                p.push(e);
                                                                                        },
                                                                                            f.s();
                                                                                        !(g = f.n()).done;

                                                                                    )
                                                                                        h();
                                                                                } catch (t) {
                                                                                    f.e(t);
                                                                                } finally {
                                                                                    f.f();
                                                                                }
                                                                                s.seasons[u].episodes = p;
                                                                            case 11:
                                                                            case "end":
                                                                                return e.stop();
                                                                        }
                                                                }, e);
                                                            })),
                                                            p.s();
                                                    case 32:
                                                        if ((v = p.n()).done) {
                                                            e.next = 36;
                                                            break;
                                                        }
                                                        return e.delegateYield(f(), "t0", 34);
                                                    case 34:
                                                        e.next = 32;
                                                        break;
                                                    case 36:
                                                        e.next = 41;
                                                        break;
                                                    case 38:
                                                        (e.prev = 38), (e.t1 = e.catch(29)), p.e(e.t1);
                                                    case 41:
                                                        return (e.prev = 41), p.f(), e.finish(41);
                                                    case 44:
                                                        return (g = []), (e.next = 47), http.get("https://api.themoviedb.org/3/tv/" + t.tmdb + "/credits?api_key=" + t.settings.tmdb_api_key + "&language=" + t.settings.tmdb_lang.iso_639_1);
                                                    case 47:
                                                        (c = e.sent), (h = l(c.data.cast));
                                                        try {
                                                            for (
                                                                C = function () {
                                                                    var e = b.value;
                                                                    e.profile_path && (e.profile_path = t.settings.imdb_cover_path + e.profile_path),
                                                                        axios.get("https://api.themoviedb.org/3/person/" + e.id + "?api_key=" + t.settings.tmdb_api_key + "&language=" + t.settings.tmdb_lang.iso_639_1).then(function (t) {
                                                                            t.data.biography && (e.biography = t.data.biography),
                                                                                null != t.data.biography && (e.biography = t.data.biography),
                                                                                null != t.data.place_of_birth && (e.place_of_birth = t.data.place_of_birth),
                                                                                null != t.data.birthday && (e.birthday = t.data.birthday);
                                                                        }),
                                                                        g.push(e);
                                                                },
                                                                    h.s();
                                                                !(b = h.n()).done;

                                                            )
                                                                C();
                                                        } catch (t) {
                                                            h.e(t);
                                                        } finally {
                                                            h.f();
                                                        }
                                                        (s.casterslist = g), (t.form.serie = s), (e.next = 57);
                                                        break;
                                                    case 54:
                                                        (e.prev = 54), (e.t2 = e.catch(4)), t.showError();
                                                    case 57:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [
                                            [4, 54],
                                            [29, 38, 41, 44],
                                        ]
                                    );
                                })
                            )();
                        },
                        store: function () {
                            var t = this;
                            return m(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.post(url + "/admin/series/store", t.form);
                                                    case 3:
                                                        (s = e.sent),
                                                            (t.add = !1),
                                                            (t.edit = !1),
                                                            (t.index = !0),
                                                            (t.form.serie = { backdrop_path: "", poster_path: "", preview_path: "", genres: [], networks: [], seasons: [{ episodes: [{ videos: [], substitles: [] }] }] }),
                                                            (t.tmdb = null),
                                                            (t.selectedSeason = -1),
                                                            (t.selectedEpisode = -1),
                                                            (t.season = null),
                                                            (t.episode = null),
                                                            (t.link = ""),
                                                            (t.epName = ""),
                                                            (t.epOverview = ""),
                                                            (t.epNumber = ""),
                                                            (t.linksubstitle = ""),
                                                            (t.typesubstitle = ""),
                                                            (t.server = ""),
                                                            (t.video = null),
                                                            (t.substitle = null),
                                                            t.series.data.unshift(s.data.body),
                                                            t.showSuccess(s.data.message),
                                                            axios.get(url + "/admin/series/data?page=" + t.pageNum).then(function (e) {
                                                                t.series = e.data;
                                                            }),
                                                            (e.next = 30);
                                                        break;
                                                    case 27:
                                                        (e.prev = 27), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 30:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 27]]
                                    );
                                })
                            )();
                        },
                        update: function () {
                            var t = this;
                            return m(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.put(url + "/admin/series/update/" + t.form.serie.id, t.form);
                                                    case 3:
                                                        (s = e.sent),
                                                            (t.add = !1),
                                                            (t.edit = !1),
                                                            (t.index = !0),
                                                            (t.form.serie = { backdrop_path: "", poster_path: "", preview_path: "", genres: [], casterslist: [], networks: [], seasons: [{ episodes: [{ videos: [], substitles: [] }] }] }),
                                                            (t.tmdb = null),
                                                            (t.selectedSeason = -1),
                                                            (t.selectedEpisode = -1),
                                                            (t.season = null),
                                                            (t.episode = null),
                                                            (t.link = ""),
                                                            (t.epName = ""),
                                                            (t.epOverview = ""),
                                                            (t.epNumber = ""),
                                                            (t.linksubstitle = ""),
                                                            (t.typesubstitle = ""),
                                                            (t.server = ""),
                                                            (t.video = null),
                                                            (t.substitle = null),
                                                            t.showSuccess(s.data.message),
                                                            axios.get(url + "/admin/series/data?page=" + t.pageNum).then(function (e) {
                                                                t.series = e.data;
                                                            }),
                                                            (e.next = 29);
                                                        break;
                                                    case 26:
                                                        (e.prev = 26), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 29:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 26]]
                                    );
                                })
                            )();
                        },
                        destroy: function (t) {
                            var e = this;
                            this.showConfirm(
                                m(
                                    i.a.mark(function s() {
                                        var a, r;
                                        return i.a.wrap(
                                            function (s) {
                                                for (;;)
                                                    switch ((s.prev = s.next)) {
                                                        case 0:
                                                            return (s.prev = 0), (s.next = 3), axios.delete(url + "/admin/series/destroy/" + t);
                                                        case 3:
                                                            (a = s.sent),
                                                                (r = e.series.data.findIndex(function (e) {
                                                                    return e.id === t;
                                                                })),
                                                                e.series.data.splice(r, 1),
                                                                (e.selectedSeason = -1),
                                                                (e.selectedEpisode = -1),
                                                                (e.season = null),
                                                                (e.episode = null),
                                                                e.showSuccess(a.data.message),
                                                                (s.next = 16);
                                                            break;
                                                        case 13:
                                                            (s.prev = 13), (s.t0 = s.catch(0)), e.showError();
                                                        case 16:
                                                        case "end":
                                                            return s.stop();
                                                    }
                                            },
                                            s,
                                            null,
                                            [[0, 13]]
                                        );
                                    })
                                )
                            );
                        },
                        destroyCast: function (t) {
                            var e = this;
                            null !== t.cast &&
                                axios
                                    .delete(url + "/admin/series/casts/destroy/" + t.id)
                                    .then(function (t) {
                                        return e.showSuccess(t.data.message);
                                    })
                                    .catch(function (t) {
                                        return e.showError();
                                    }),
                                console.log(t.id);
                        },
                        storePoster: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (s.prev = 0), (e.poster = t.target.files[0]), (a = new FormData()).append("image", e.poster), (s.next = 6), axios.post(url + "/admin/series/image/store", a);
                                                    case 6:
                                                        (r = s.sent), (e.form.serie.poster_path = r.data.image_path), e.showSuccess(r.data.message), (s.next = 14);
                                                        break;
                                                    case 11:
                                                        (s.prev = 11), (s.t0 = s.catch(0)), e.showError(s.t0.response);
                                                    case 14:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 11]]
                                    );
                                })
                            )();
                        },
                        storePosterSeason: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (s.prev = 0), (e.posterSeason = t.target.files[0]), (a = new FormData()).append("image", e.posterSeason), (s.next = 6), axios.post(url + "/admin/series/image/store", a);
                                                    case 6:
                                                        (r = s.sent), (e.form.serie.seasons[e.selectedSeason].poster_path = r.data.image_path), e.showSuccess(r.data.message), (s.next = 14);
                                                        break;
                                                    case 11:
                                                        (s.prev = 11), (s.t0 = s.catch(0)), e.showError(s.t0.response);
                                                    case 14:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 11]]
                                    );
                                })
                            )();
                        },
                        storeStillEpisode: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (s.prev = 0), (e.stillEpisode = t.target.files[0]), (a = new FormData()).append("image", e.stillEpisode), (s.next = 6), axios.post(url + "/admin/series/image/store", a);
                                                    case 6:
                                                        (r = s.sent), (e.form.serie.seasons[e.selectedSeason].episodes[e.selectedEpisode].still_path = r.data.image_path), e.showSuccess(r.data.message), (s.next = 14);
                                                        break;
                                                    case 11:
                                                        (s.prev = 11), (s.t0 = s.catch(0)), e.showError(s.t0.response);
                                                    case 14:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 11]]
                                    );
                                })
                            )();
                        },
                        storeBackdrop: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (s.prev = 0), (e.backdrop = t.target.files[0]), (a = new FormData()).append("image", e.backdrop), (s.next = 6), axios.post(url + "/admin/series/image/store", a);
                                                    case 6:
                                                        (r = s.sent), (e.form.serie.backdrop_path = r.data.image_path), e.showSuccess(r.data.message), (s.next = 14);
                                                        break;
                                                    case 11:
                                                        (s.prev = 11), (s.t0 = s.catch(0)), e.showError(s.t0.response);
                                                    case 14:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 11]]
                                    );
                                })
                            )();
                        },
                        storeVideoTrailer: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a, r, n;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (
                                                            (s.prev = 0),
                                                            (a = e.form.serie.name),
                                                            (e.video_trailer = t.target.files[0]),
                                                            (r = new FormData()).append("video", e.video_trailer),
                                                            r.append("movie_title", a.replace(/ /g, "_")),
                                                            (s.next = 8),
                                                            axios.post(url + "/admin/video/store", r, {
                                                                onUploadProgress: function (t) {
                                                                    (e.isuploading = !0), (e.percent = Math.round((t.loaded / t.total) * 100));
                                                                },
                                                            })
                                                        );
                                                    case 8:
                                                        (n = s.sent),
                                                            (e.form.serie.trailer_url = n.data.video_path),
                                                            e.showSuccess(n.data.message),
                                                            console.log(r),
                                                            setTimeout(function () {
                                                                return (e.isuploading = !1);
                                                            }, 2e3),
                                                            (s.next = 19);
                                                        break;
                                                    case 15:
                                                        (s.prev = 15),
                                                            (s.t0 = s.catch(0)),
                                                            e.showError(),
                                                            setTimeout(function () {
                                                                return (e.isuploading = !1);
                                                            }, 2e3);
                                                    case 19:
                                                        return (s.prev = 19), s.finish(19);
                                                    case 21:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 15, 19, 21]]
                                    );
                                })
                            )();
                        },
                        storeVideo: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (
                                                            (s.prev = 0),
                                                            (e.video = t.target.files[0]),
                                                            (a = new FormData()).append("video", e.video),
                                                            (s.next = 6),
                                                            axios.post(url + "/admin/video/store", a, {
                                                                onUploadProgress: function (t) {
                                                                    (e.isuploading = !0), (e.percent = Math.round((t.loaded / t.total) * 100));
                                                                },
                                                            })
                                                        );
                                                    case 6:
                                                        (r = s.sent),
                                                            (e.link = r.data.video_path),
                                                            (e.server = { name: r.data.server }),
                                                            e.showSuccess(r.data.message),
                                                            setTimeout(function () {
                                                                return (e.isuploading = !1);
                                                            }, 2e3),
                                                            (s.next = 17);
                                                        break;
                                                    case 13:
                                                        (s.prev = 13),
                                                            (s.t0 = s.catch(0)),
                                                            e.showError(),
                                                            setTimeout(function () {
                                                                return (e.isuploading = !1);
                                                            }, 2e3);
                                                    case 17:
                                                        return (s.prev = 17), s.finish(17);
                                                    case 19:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 13, 17, 19]]
                                    );
                                })
                            )();
                        },
                        addLinkDownload: function () {
                            var t = this.form.serie.seasons[this.selectedSeason].episodes[this.selectedEpisode];
                            t.downloads || Vue.set(t, "downloads", []),
                                t.downloads.unshift({
                                    server: this.serverdownload.name,
                                    header: this.headerdownload.name,
                                    useragent: this.useragentdownload.name,
                                    link: this.linkDownload,
                                    lang: this.langdownload.english_name && "No Language" !== this.langdownload.english_name ? this.langdownload.english_name : this.settings.tmdb_lang.english_name,
                                    external: this.external_download,
                                    supported_hosts: this.supported_hosts_download,
                                }),
                                (this.linkDownload = ""),
                                (this.serverdownload = ""),
                                (this.headerdownload = ""),
                                (this.useragentdownload = ""),
                                (this.download = null),
                                (this.supported_hosts_download = !1),
                                (this.external_download = !1);
                        },
                        addLink: function () {
                            if ("" !== this.server && "" !== this.link && "" !== this.form.serie) {
                                var t = this.form.serie.seasons[this.selectedSeason].episodes[this.selectedEpisode];
                                t.videos || Vue.set(t, "videos", []),
                                    t.videos.unshift({
                                        server: this.server.name,
                                        header: this.header.name,
                                        useragent: this.useragent.name,
                                        link: this.link,
                                        lang: this.lang.english_name && "No Language" !== this.lang.english_name ? this.lang.english_name : this.settings.tmdb_lang.english_name,
                                        embed: this.embed,
                                        hls: this.hls,
                                        supported_hosts: this.supported_hosts,
                                    }),
                                    (this.link = ""),
                                    (this.server = ""),
                                    (this.header = ""),
                                    (this.useragent = ""),
                                    (this.video = null),
                                    (this.supported_hosts = !1),
                                    (this.embed = !1),
                                    (this.hls = !1);
                            } else this.showAlert("You need to select a server before adding a link");
                        },
                        deleteLinkDownload: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                m(
                                    i.a.mark(function a() {
                                        var r;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            if (((a.prev = 0), !t.id)) {
                                                                a.next = 6;
                                                                break;
                                                            }
                                                            return (a.next = 4), axios.delete(url + "/admin/series/downloads/destroy/" + t.id);
                                                        case 4:
                                                            (r = a.sent), s.showSuccess(r.data.message);
                                                        case 6:
                                                            s.form.serie.seasons[s.selectedSeason].episodes[s.selectedEpisode].downloads.splice(e, 1), (a.next = 12);
                                                            break;
                                                        case 9:
                                                            (a.prev = 9), (a.t0 = a.catch(0)), s.showError();
                                                        case 12:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 9]]
                                        );
                                    })
                                )
                            );
                        },
                        deleteLink: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                m(
                                    i.a.mark(function a() {
                                        var r;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            if (((a.prev = 0), !t.id)) {
                                                                a.next = 6;
                                                                break;
                                                            }
                                                            return (a.next = 4), axios.delete(url + "/admin/series/videos/destroy/" + t.id);
                                                        case 4:
                                                            (r = a.sent), s.showSuccess(r.data.message);
                                                        case 6:
                                                            s.form.serie.seasons[s.selectedSeason].episodes[s.selectedEpisode].videos.splice(e, 1), (a.next = 12);
                                                            break;
                                                        case 9:
                                                            (a.prev = 9), (a.t0 = a.catch(0)), s.showError();
                                                        case 12:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 9]]
                                        );
                                    })
                                )
                            );
                        },
                        addSubs: function () {
                            if ("" !== this.linksubstitle && "" !== this.form.serie) {
                                var t = this.form.serie.seasons[this.selectedSeason].episodes[this.selectedEpisode];
                                t.substitles || Vue.set(t, "substitles", []),
                                    t.substitles.unshift({
                                        link: this.linksubstitle,
                                        type: this.typesubstitle,
                                        lang: this.langsub.english_name && "No Language" !== this.langsub.english_name ? this.langsub.english_name : this.settings.tmdb_lang.english_name,
                                        zip: this.zip,
                                    }),
                                    (this.linksubstitle = ""),
                                    (this.server = ""),
                                    (this.typesubstitle = ""),
                                    (this.substitle = null),
                                    (this.zip = !1);
                            }
                        },
                        destroySubs: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                m(
                                    i.a.mark(function a() {
                                        var r;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            if (((a.prev = 0), !t.id)) {
                                                                a.next = 6;
                                                                break;
                                                            }
                                                            return (a.next = 4), axios.delete(url + "/admin/series/substitles/destroy/" + t.id);
                                                        case 4:
                                                            (r = a.sent), s.showSuccess(r.data.message);
                                                        case 6:
                                                            s.form.serie.seasons[s.selectedSeason].episodes[s.selectedEpisode].substitles.splice(e, 1), (a.next = 12);
                                                            break;
                                                        case 9:
                                                            (a.prev = 9), (a.t0 = a.catch(0)), s.showError();
                                                        case 12:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 9]]
                                        );
                                    })
                                )
                            );
                        },
                        storeSubstitle: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (
                                                            (s.prev = 0),
                                                            (e.loading = !0),
                                                            (e.substitle = t.target.files[0]),
                                                            (a = new FormData()).append("substitle", e.substitle),
                                                            (s.next = 7),
                                                            axios.post(url + "/admin/substitle/store", a)
                                                        );
                                                    case 7:
                                                        (r = s.sent), (e.linksubstitle = r.data.substitle_path), e.showSuccess(r.data.message), (e.zip = !0), (s.next = 16);
                                                        break;
                                                    case 13:
                                                        (s.prev = 13), (s.t0 = s.catch(0)), e.showError();
                                                    case 16:
                                                        return (s.prev = 16), (e.loading = !1), s.finish(16);
                                                    case 19:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 13, 16, 19]]
                                    );
                                })
                            )();
                        },
                        deleteLinkSubs: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                m(
                                    i.a.mark(function a() {
                                        var r;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            if (((a.prev = 0), !t.id)) {
                                                                a.next = 6;
                                                                break;
                                                            }
                                                            return (a.next = 4), axios.delete(url + "/admin/series/substitles/destroy/" + t.id);
                                                        case 4:
                                                            (r = a.sent), s.showSuccess(r.data.message);
                                                        case 6:
                                                            s.form.serie.seasons[s.selectedSeason].episodes[s.selectedEpisode].substitles.splice(e, 1), (a.next = 12);
                                                            break;
                                                        case 9:
                                                            (a.prev = 9), (a.t0 = a.catch(0)), s.showError();
                                                        case 12:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 9]]
                                        );
                                    })
                                )
                            );
                        },
                        selectSeason: function (t) {
                            (this.selectedSeason = this.form.serie.seasons.indexOf(t)), (this.episode = null), (this.selectedEpisode = -1);
                        },
                        selectEpisode: function (t) {
                            this.selectedEpisode = this.form.serie.seasons[this.selectedSeason].episodes.indexOf(t);
                        },
                        destroyGenre: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        if (void 0 === t.genre) {
                                                            s.next = 11;
                                                            break;
                                                        }
                                                        return (s.prev = 1), (s.next = 4), axios.delete(url + "/admin/series/genres/destroy/" + t.id);
                                                    case 4:
                                                        (a = s.sent), e.showSuccess(a.data.message), (s.next = 11);
                                                        break;
                                                    case 8:
                                                        (s.prev = 8), (s.t0 = s.catch(1)), e.showError();
                                                    case 11:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[1, 8]]
                                    );
                                })
                            )();
                        },
                        getSeason: function () {
                            var t = this;
                            return m(
                                i.a.mark(function e() {
                                    var s, a, r, n, c, d;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (
                                                            (e.prev = 0),
                                                            (e.next = 3),
                                                            http.get(
                                                                "https://api.themoviedb.org/3/tv/" + t.form.serie.tmdb_id + "/season/" + t.addseason + "?api_key=" + t.settings.tmdb_api_key + "&language=" + t.settings.tmdb_lang.iso_639_1
                                                            )
                                                        );
                                                    case 3:
                                                        ((s = e.sent).data = _.mapKeys(s.data, function (t, e) {
                                                            return "id" == e ? "tmdb_id" : e;
                                                        })),
                                                            s.data.poster_path && (s.data.poster_path = t.settings.imdb_cover_path + s.data.poster_path),
                                                            (a = l(s.data.episodes.entries()));
                                                        try {
                                                            for (a.s(); !(r = a.n()).done; )
                                                                (n = o(r.value, 2)),
                                                                    (c = n[0]),
                                                                    (d = n[1]),
                                                                    (s.data.episodes[c] = _.mapKeys(d, function (t, e) {
                                                                        return "id" == e ? "tmdb_id" : e;
                                                                    })),
                                                                    d.still_path && (s.data.episodes[c].still_path = t.settings.imdb_cover_path + d.still_path);
                                                        } catch (t) {
                                                            a.e(t);
                                                        } finally {
                                                            a.f();
                                                        }
                                                        t.form.serie.seasons.findIndex(function (t) {
                                                            return t.season_number === s.data.season_number;
                                                        }) < 0
                                                            ? (t.form.serie.seasons.push(s.data), t.showSuccess())
                                                            : t.showError("this season already exists"),
                                                            (t.addseason = ""),
                                                            (e.next = 16);
                                                        break;
                                                    case 13:
                                                        (e.prev = 13), (e.t0 = e.catch(0)), t.showError();
                                                    case 16:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 13]]
                                    );
                                })
                            )();
                        },
                        destroySeason: function () {
                            var t = this;
                            this.showConfirm(
                                m(
                                    i.a.mark(function e() {
                                        var s, a;
                                        return i.a.wrap(
                                            function (e) {
                                                for (;;)
                                                    switch ((e.prev = e.next)) {
                                                        case 0:
                                                            if (!(s = t.form.serie.seasons[t.selectedSeason]).id) {
                                                                e.next = 12;
                                                                break;
                                                            }
                                                            return (e.prev = 2), (e.next = 5), axios.delete(url + "/admin/series/seasons/destroy/" + s.id);
                                                        case 5:
                                                            (a = e.sent), t.showSuccess(a.data.message), (e.next = 12);
                                                            break;
                                                        case 9:
                                                            (e.prev = 9), (e.t0 = e.catch(2)), t.showError();
                                                        case 12:
                                                            t.form.serie.seasons.splice(t.selectedSeason, 1), (t.season = null), (t.episode = null), (t.selectedSeason = -1), (t.selectedEpisode = -1);
                                                        case 17:
                                                        case "end":
                                                            return e.stop();
                                                    }
                                            },
                                            e,
                                            null,
                                            [[2, 9]]
                                        );
                                    })
                                )
                            );
                        },
                        addNewSeason: function () {
                            var t = this;
                            return m(
                                i.a.mark(function e() {
                                    return i.a.wrap(function (e) {
                                        for (;;)
                                            switch ((e.prev = e.next)) {
                                                case 0:
                                                    t.form.serie.seasons.push({ name: t.customSeason.name, overview: t.customSeason.overview, season_number: t.customSeason.season_number, episodes: [] }),
                                                        (t.customSeason.name = ""),
                                                        (t.customSeason.overview = ""),
                                                        (t.customSeason.season_number = ""),
                                                        (t.showModalSeason = !1);
                                                case 5:
                                                case "end":
                                                    return e.stop();
                                            }
                                    }, e);
                                })
                            )();
                        },
                        addBulkEpisodeLinks: function () {
                            var t = this;
                            return m(
                                i.a.mark(function e() {
                                    var s, a, r;
                                    return i.a.wrap(function (e) {
                                        for (;;)
                                            switch ((e.prev = e.next)) {
                                                case 0:
                                                    if ("" !== t.customEpisodesBulkLinks.server.name) {
                                                        e.next = 3;
                                                        break;
                                                    }
                                                    return t.showAlert("You need to select a server before adding a link"), e.abrupt("return");
                                                case 3:
                                                    s = l(t.form.serie.seasons[t.selectedSeason].episodes);
                                                    try {
                                                        for (s.s(); !(a = s.n()).done; )
                                                            (r = a.value).videos || Vue.set(r, "videos", []),
                                                                r.videos.unshift({
                                                                    server: t.customEpisodesBulkLinks.server.name,
                                                                    link: t.customEpisodesBulkLinks.link + r.episode_number + "." + t.customEpisodesBulkLinks.ext,
                                                                    lang: t.lang.english_name && "No Language" !== t.lang.english_name ? t.lang.english_name : t.settings.tmdb_lang.english_name,
                                                                    embed: t.customEpisodesBulkLinks.embed,
                                                                    hls: t.customEpisodesBulkLinks.hls,
                                                                    supported_hosts: t.customEpisodesBulkLinks.supported_hosts,
                                                                }),
                                                                console.log(t.customEpisodesBulkLinks.link + r.episode_number + "." + t.customEpisodesBulkLinks.ext),
                                                                (t.showModalBulkLinks = !1),
                                                                setTimeout(function () {
                                                                    (this.customEpisodesBulkLinks.supported_hosts = !1),
                                                                        (this.customEpisodesBulkLinks.embed = !1),
                                                                        (this.customEpisodesBulkLinks.hls = !1),
                                                                        (this.server = ""),
                                                                        (this.video = null),
                                                                        (this.supported_hosts = !1),
                                                                        (this.embed = !1),
                                                                        (this.hls = !1),
                                                                        this.showSuccess(),
                                                                        (this.link = ""),
                                                                        (this.customEpisodesBulkLinks.link = "");
                                                                }, 1e3);
                                                    } catch (t) {
                                                        s.e(t);
                                                    } finally {
                                                        s.f();
                                                    }
                                                case 5:
                                                case "end":
                                                    return e.stop();
                                            }
                                    }, e);
                                })
                            )();
                        },
                        addNewEpisode: function () {
                            var t = this;
                            return m(
                                i.a.mark(function e() {
                                    return i.a.wrap(function (e) {
                                        for (;;)
                                            switch ((e.prev = e.next)) {
                                                case 0:
                                                    t.form.serie.seasons[t.selectedSeason].episodes.push({ name: t.customEpisodes.name, overview: t.customEpisodes.overview, episode_number: t.customEpisodes.episode_number }),
                                                        (t.customEpisodes.name = ""),
                                                        (t.customEpisodes.overview = ""),
                                                        (t.customEpisodes.episode_number = ""),
                                                        (t.showModal = !1);
                                                case 5:
                                                case "end":
                                                    return e.stop();
                                            }
                                    }, e);
                                })
                            )();
                        },
                        send: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (
                                                            (s.prev = 0),
                                                            (a = { headers: { Authorization: "key=" + e.settings.authorization } }),
                                                            (r = { to: "/topics/all", data: { title: t.name, message: t.overview, image: t.backdrop_path, type: "1", tmdb: t.id } }),
                                                            (s.next = 5),
                                                            http.post("https://fcm.googleapis.com/fcm/send", r, a)
                                                        );
                                                    case 5:
                                                        e.showSuccess(), (e.title = ""), (e.body = ""), (e.message = ""), (e.image = ""), (s.next = 15);
                                                        break;
                                                    case 12:
                                                        (s.prev = 12), (s.t0 = s.catch(0)), e.showError();
                                                    case 15:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 12]]
                                    );
                                })
                            )();
                        },
                        sendEpisode: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (
                                                            (s.prev = 0),
                                                            (a = { headers: { Authorization: "key=" + e.settings.authorization } }),
                                                            (r = { to: "/topics/all", data: { title: t.name, image: t.still_path, type: "episode", link: "", tmdb: t.id, message: t.overview } }),
                                                            (s.next = 5),
                                                            http.post("https://fcm.googleapis.com/fcm/send", r, a)
                                                        );
                                                    case 5:
                                                        e.showSuccess(), (e.title = ""), (e.body = ""), (e.image = ""), (e.link = ""), (e.tmdb = ""), (e.episode = null), (s.next = 17);
                                                        break;
                                                    case 14:
                                                        (s.prev = 14), (s.t0 = s.catch(0)), e.showError();
                                                    case 17:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 14]]
                                    );
                                })
                            )();
                        },
                        getEpisode: function () {
                            var t = this;
                            return m(
                                i.a.mark(function e() {
                                    var s, a;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (
                                                            (e.prev = 0),
                                                            (e.next = 3),
                                                            http.get(
                                                                "https://api.themoviedb.org/3/tv/" +
                                                                    t.tmdb +
                                                                    "/season/" +
                                                                    t.form.serie.seasons[t.selectedSeason].season_number +
                                                                    "/episode/" +
                                                                    t.addepisode +
                                                                    "?api_key=" +
                                                                    t.settings.tmdb_api_key +
                                                                    "&language=" +
                                                                    t.settings.tmdb_lang.iso_639_1
                                                            )
                                                        );
                                                    case 3:
                                                        (s = e.sent),
                                                            t.form.serie.seasons[t.selectedSeason].episodes.findIndex(function (t) {
                                                                return t.episode_number === s.data.episode_number;
                                                            }) < 0
                                                                ? ((a = _.mapKeys(s.data, function (t, e) {
                                                                      return "id" == e ? "tmdb_id" : e;
                                                                  })).still_path && (a.still_path = t.settings.imdb_cover_path + a.still_path),
                                                                  t.form.serie.seasons[t.selectedSeason].episodes.push(a),
                                                                  t.showSuccess())
                                                                : t.showError("this episode already exists"),
                                                            (t.addepisode = ""),
                                                            (e.next = 12);
                                                        break;
                                                    case 9:
                                                        (e.prev = 9), (e.t0 = e.catch(0)), t.showError();
                                                    case 12:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 9]]
                                    );
                                })
                            )();
                        },
                        destroyEpisode: function () {
                            var t = this;
                            this.showConfirm(
                                m(
                                    i.a.mark(function e() {
                                        var s, a;
                                        return i.a.wrap(
                                            function (e) {
                                                for (;;)
                                                    switch ((e.prev = e.next)) {
                                                        case 0:
                                                            if (!(s = t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode]).id) {
                                                                e.next = 12;
                                                                break;
                                                            }
                                                            return (e.prev = 2), (e.next = 5), axios.delete(url + "/admin/series/episodes/destroy/" + s.id);
                                                        case 5:
                                                            (a = e.sent), t.showSuccess(a.data.message), (e.next = 12);
                                                            break;
                                                        case 9:
                                                            (e.prev = 9), (e.t0 = e.catch(2)), t.showError();
                                                        case 12:
                                                            t.form.serie.seasons[t.selectedSeason].episodes.splice(t.selectedEpisode, 1), (t.episode = null), (t.selectedEpisode = -1);
                                                        case 15:
                                                        case "end":
                                                            return e.stop();
                                                    }
                                            },
                                            e,
                                            null,
                                            [[2, 9]]
                                        );
                                    })
                                )
                            );
                        },
                        destroyNetwork: function (t) {
                            var e = this;
                            null !== t.network &&
                                axios
                                    .delete(url + "/admin/series/networks/destroy/" + t.id)
                                    .then(function (t) {
                                        return e.showSuccess(t.data.message);
                                    })
                                    .catch(function (t) {
                                        return e.showError(t);
                                    });
                        },
                    },
                    computed: {
                        filteredSeries: function () {
                            var t = this;
                            return this.series.filter(function (e) {
                                return e.name.toLowerCase().match(t.search.toLowerCase());
                            });
                        },
                    },
                    mixins: [r.a, n.a],
                },
                f = (s(527), s(4)),
                g = Object(f.a)(
                    v,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            s("div", { staticClass: "col-md-12 grid-margin" }, [
                                s("div", { staticClass: "d-flex justify-content-between flex-wrap" }, [
                                    t._m(0),
                                    t._v(" "),
                                    s("div", { staticClass: "d-flex justify-content-between align-items-end flex-wrap" }, [
                                        t.index
                                            ? s(
                                                  "button",
                                                  {
                                                      staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                      on: {
                                                          click: function (e) {
                                                              return t.create();
                                                          },
                                                      },
                                                  },
                                                  [t._v("Add Serie")]
                                              )
                                            : t._e(),
                                        t._v(" "),
                                        t.index
                                            ? t._e()
                                            : s(
                                                  "button",
                                                  {
                                                      staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                      on: {
                                                          click: function (e) {
                                                              return t.back();
                                                          },
                                                      },
                                                  },
                                                  [t._v("Back")]
                                              ),
                                    ]),
                                ]),
                            ]),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-md-6 grid-margin" }, [
                                      s("ul", { staticClass: "navbar-nav mr-lg-4 w-100" }, [
                                          s("li", { staticClass: "nav-item nav-search d-none d-lg-block w-100" }, [
                                              s("div", { staticClass: "input-group" }, [
                                                  t._m(1),
                                                  t._v(" "),
                                                  s("input", {
                                                      directives: [{ name: "model", rawName: "v-model", value: t.search, expression: "search" }],
                                                      staticClass: "form-control",
                                                      attrs: { type: "text", placeholder: "Search now", "aria-label": "search", "aria-describedby": "search" },
                                                      domProps: { value: t.search },
                                                      on: {
                                                          keyup: t.searchUnit,
                                                          input: function (e) {
                                                              e.target.composing || (t.search = e.target.value);
                                                          },
                                                      },
                                                  }),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s(
                                                  "div",
                                                  { staticClass: "table-responsive" },
                                                  [
                                                      s("table", { staticClass: "table", attrs: { "aria-describedby": "table series", id: "table series" } }, [
                                                          t._m(2),
                                                          t._v(" "),
                                                          s(
                                                              "tbody",
                                                              t._l(t.series.data, function (e) {
                                                                  return s("tr", { key: e.id }, [
                                                                      s("td", { staticClass: "text-center" }, [s("img", { attrs: { src: e.poster_path, alt: "poster path", height: "80", width: "80" } })]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.id))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.tmdb_id))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.name))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.vote_average))]),
                                                                      t._v(" "),
                                                                      1 === e.active
                                                                          ? s("td", { staticClass: "text-center" }, [s("label", { staticClass: "badge badge-success" }, [t._v("Visible")])])
                                                                          : s("td", { staticClass: "text-center" }, [s("label", { staticClass: "badge badge-danger" }, [t._v("Invisible")])]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [
                                                                          s("div", { staticClass: "list-icons" }, [
                                                                              s(
                                                                                  "a",
                                                                                  {
                                                                                      staticClass: "list-icons-item mr-2",
                                                                                      attrs: { "data-original-title": "Send Notification", rel: "tooltip", title: "" },
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return t.send(e);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [s("em", { staticClass: "mdi mdi-bell-ring menu-icon", staticStyle: { color: "#4d83ff" } })]
                                                                              ),
                                                                              t._v(" "),
                                                                              s(
                                                                                  "a",
                                                                                  {
                                                                                      staticClass: "list-icons-item mr-2",
                                                                                      attrs: { "data-original-title": "Edit", rel: "tooltip", title: "" },
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return t.editing(e);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [s("em", { staticClass: "mdi mdi-pencil fa-lg", staticStyle: { color: "#4d83ff" } })]
                                                                              ),
                                                                              t._v(" "),
                                                                              s(
                                                                                  "a",
                                                                                  {
                                                                                      staticClass: "list-icons-item text-warning",
                                                                                      attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return t.destroy(e.id);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                              ),
                                                                          ]),
                                                                      ]),
                                                                  ]);
                                                              }),
                                                              0
                                                          ),
                                                      ]),
                                                      t._v(" "),
                                                      s("pagination", { staticClass: "mb-0", attrs: { data: t.series, "show-disabled": !1, limit: 5, size: t.size, align: t.align }, on: { "pagination-change-page": t.getResults } }),
                                                  ],
                                                  1
                                              ),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.add || t.edit
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s("section", [
                                                  s("div", { staticClass: "poster-container" }, [
                                                      t.form.serie.poster_path
                                                          ? s("img", { staticClass: "poster", attrs: { src: t.form.serie.poster_path, alt: "serie poster", "data-loaded": "true", height: "316", width: "210" } })
                                                          : t._e(),
                                                      t._v(" "),
                                                      s("div", { staticClass: "many-inputs" }, [
                                                          s("div", { staticClass: "input-container" }, [
                                                              s(
                                                                  "div",
                                                                  { staticClass: "form-group" },
                                                                  [
                                                                      s("autocomplete", {
                                                                          attrs: { search: t.getSearchByName, placeholder: "Search Serie by Name", "aria-label": "Search Serie by Name", "get-result-value": t.getResultValue },
                                                                          on: { submit: t.onSubmit },
                                                                      }),
                                                                  ],
                                                                  1
                                                              ),
                                                              t._v(" "),
                                                              t.add
                                                                  ? s("div", { staticClass: "form-group" }, [
                                                                        s("div", { staticClass: "input-group" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.tmdb, expression: "tmdb" }],
                                                                                staticClass: "form-control",
                                                                                attrs: { type: "text", placeholder: "Example : tt7286456", "aria-label": "Search Movie" },
                                                                                domProps: { value: t.tmdb },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || (t.tmdb = e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "input-group-append" }, [
                                                                                s(
                                                                                    "button",
                                                                                    {
                                                                                        staticClass: "btn btn-sm btn-primary",
                                                                                        attrs: { type: "type", disabled: !t.settings.tmdb_api_key },
                                                                                        on: {
                                                                                            click: function (e) {
                                                                                                return t.getSerie_Find();
                                                                                            },
                                                                                        },
                                                                                    },
                                                                                    [t._v("Search")]
                                                                                ),
                                                                            ]),
                                                                        ]),
                                                                    ])
                                                                  : t._e(),
                                                              t._v(" "),
                                                              t.edit
                                                                  ? s("div", { staticClass: "form-group" }, [
                                                                        s("div", { staticClass: "input-group" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.tmdb, expression: "tmdb" }],
                                                                                staticClass: "form-control",
                                                                                attrs: { type: "text", placeholder: "Example : tt7286456", "aria-label": "Search Movie" },
                                                                                domProps: { value: t.tmdb },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || (t.tmdb = e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "input-group-append" }, [
                                                                                s(
                                                                                    "button",
                                                                                    {
                                                                                        staticClass: "btn btn-sm btn-primary",
                                                                                        attrs: { type: "type", disabled: !t.settings.tmdb_api_key },
                                                                                        on: {
                                                                                            click: function (e) {
                                                                                                return t.getSerie();
                                                                                            },
                                                                                        },
                                                                                    },
                                                                                    [t._v("Search")]
                                                                                ),
                                                                            ]),
                                                                        ]),
                                                                    ])
                                                                  : t._e(),
                                                              t._v(" "),
                                                              s("div", { staticClass: "input-container" }, [
                                                                  s("div", { staticClass: "row" }, [
                                                                      s("div", { staticClass: "col-md-4" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "name" } }, [t._v("Serie Name")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.serie.name, expression: "form.serie.name" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "name", type: "text" },
                                                                                  domProps: { value: t.form.serie.name },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.serie, "name", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-4" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "imdb_external_id" } }, [t._v("External IMDB ID")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.serie.imdb_external_id, expression: "form.serie.imdb_external_id" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "imdb_external_id", type: "text" },
                                                                                  domProps: { value: t.form.serie.imdb_external_id },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.serie, "imdb_external_id", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-4" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "original_name" } }, [t._v("Original title")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.serie.original_name, expression: "form.serie.original_name" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "original_name", type: "text" },
                                                                                  domProps: { value: t.form.serie.original_name },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.serie, "original_name", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                  ]),
                                                              ]),
                                                              t._v(" "),
                                                              s("div", { staticClass: "input-container" }, [
                                                                  s("div", { staticClass: "row" }, [
                                                                      s("div", { staticClass: "col-md-4" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                  s("input", {
                                                                                      directives: [{ name: "model", rawName: "v-model", value: t.form.serie.premuim, expression: "form.serie.premuim" }],
                                                                                      staticClass: "custom-control-input",
                                                                                      attrs: { placeholder: "Premuim", id: "premuim", type: "checkbox" },
                                                                                      domProps: { checked: Array.isArray(t.form.serie.premuim) ? t._i(t.form.serie.premuim, null) > -1 : t.form.serie.premuim },
                                                                                      on: {
                                                                                          change: function (e) {
                                                                                              var s = t.form.serie.premuim,
                                                                                                  a = e.target,
                                                                                                  i = !!a.checked;
                                                                                              if (Array.isArray(s)) {
                                                                                                  var r = t._i(s, null);
                                                                                                  a.checked
                                                                                                      ? r < 0 && t.$set(t.form.serie, "premuim", s.concat([null]))
                                                                                                      : r > -1 && t.$set(t.form.serie, "premuim", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                              } else t.$set(t.form.serie, "premuim", i);
                                                                                          },
                                                                                      },
                                                                                  }),
                                                                                  t._v(" "),
                                                                                  s("label", { staticClass: "custom-control-label", attrs: { for: "premuim" } }, [
                                                                                      t._v("\n                              Premuim\n                              Only\n                            "),
                                                                                  ]),
                                                                              ]),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      t.edit
                                                                          ? s("div", { staticClass: "col-md-3" }, [
                                                                                s("div", { staticClass: "form-group" }, [
                                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                        s("input", {
                                                                                            directives: [{ name: "model", rawName: "v-model", value: t.form.serie.active, expression: "form.serie.active" }],
                                                                                            staticClass: "custom-control-input",
                                                                                            attrs: { id: "active", type: "checkbox" },
                                                                                            domProps: { checked: Array.isArray(t.form.serie.active) ? t._i(t.form.serie.active, null) > -1 : t.form.serie.active },
                                                                                            on: {
                                                                                                change: function (e) {
                                                                                                    var s = t.form.serie.active,
                                                                                                        a = e.target,
                                                                                                        i = !!a.checked;
                                                                                                    if (Array.isArray(s)) {
                                                                                                        var r = t._i(s, null);
                                                                                                        a.checked
                                                                                                            ? r < 0 && t.$set(t.form.serie, "active", s.concat([null]))
                                                                                                            : r > -1 && t.$set(t.form.serie, "active", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                                    } else t.$set(t.form.serie, "active", i);
                                                                                                },
                                                                                            },
                                                                                        }),
                                                                                        t._v(" "),
                                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "active" } }, [t._v("Active")]),
                                                                                    ]),
                                                                                ]),
                                                                            ])
                                                                          : t._e(),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-4" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                  s("input", {
                                                                                      directives: [{ name: "model", rawName: "v-model", value: t.form.serie.newEpisodes, expression: "form.serie.newEpisodes" }],
                                                                                      staticClass: "custom-control-input",
                                                                                      attrs: { id: "newEpisodes", type: "checkbox" },
                                                                                      domProps: { checked: Array.isArray(t.form.serie.newEpisodes) ? t._i(t.form.serie.newEpisodes, null) > -1 : t.form.serie.newEpisodes },
                                                                                      on: {
                                                                                          change: function (e) {
                                                                                              var s = t.form.serie.newEpisodes,
                                                                                                  a = e.target,
                                                                                                  i = !!a.checked;
                                                                                              if (Array.isArray(s)) {
                                                                                                  var r = t._i(s, null);
                                                                                                  a.checked
                                                                                                      ? r < 0 && t.$set(t.form.serie, "newEpisodes", s.concat([null]))
                                                                                                      : r > -1 && t.$set(t.form.serie, "newEpisodes", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                              } else t.$set(t.form.serie, "newEpisodes", i);
                                                                                          },
                                                                                      },
                                                                                  }),
                                                                                  t._v(" "),
                                                                                  s("label", { staticClass: "custom-control-label", attrs: { for: "newEpisodes" } }, [t._v("Has New episodes ?")]),
                                                                              ]),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-3" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                  s("input", {
                                                                                      directives: [{ name: "model", rawName: "v-model", value: t.form.serie.pinned, expression: "form.serie.pinned" }],
                                                                                      staticClass: "custom-control-input",
                                                                                      attrs: { id: "pinned", type: "checkbox" },
                                                                                      domProps: { checked: Array.isArray(t.form.serie.pinned) ? t._i(t.form.serie.pinned, null) > -1 : t.form.serie.pinned },
                                                                                      on: {
                                                                                          change: function (e) {
                                                                                              var s = t.form.serie.pinned,
                                                                                                  a = e.target,
                                                                                                  i = !!a.checked;
                                                                                              if (Array.isArray(s)) {
                                                                                                  var r = t._i(s, null);
                                                                                                  a.checked
                                                                                                      ? r < 0 && t.$set(t.form.serie, "pinned", s.concat([null]))
                                                                                                      : r > -1 && t.$set(t.form.serie, "pinned", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                              } else t.$set(t.form.serie, "pinned", i);
                                                                                          },
                                                                                      },
                                                                                  }),
                                                                                  t._v(" "),
                                                                                  s("label", { staticClass: "custom-control-label", attrs: { for: "pinned" } }, [t._v("Pinned")]),
                                                                              ]),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      t.add
                                                                          ? s("div", { staticClass: "col-md-4" }, [
                                                                                s("div", { staticClass: "form-group" }, [
                                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                        s("input", {
                                                                                            directives: [{ name: "model", rawName: "v-model", value: t.form.notification, expression: "form.notification" }],
                                                                                            staticClass: "custom-control-input",
                                                                                            attrs: { id: "notification", type: "checkbox" },
                                                                                            domProps: { checked: Array.isArray(t.form.notification) ? t._i(t.form.notification, null) > -1 : t.form.notification },
                                                                                            on: {
                                                                                                change: function (e) {
                                                                                                    var s = t.form.notification,
                                                                                                        a = e.target,
                                                                                                        i = !!a.checked;
                                                                                                    if (Array.isArray(s)) {
                                                                                                        var r = t._i(s, null);
                                                                                                        a.checked
                                                                                                            ? r < 0 && t.$set(t.form, "notification", s.concat([null]))
                                                                                                            : r > -1 && t.$set(t.form, "notification", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                                    } else t.$set(t.form, "notification", i);
                                                                                                },
                                                                                            },
                                                                                        }),
                                                                                        t._v(" "),
                                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "notification" } }, [t._v("Push notification")]),
                                                                                    ]),
                                                                                ]),
                                                                            ])
                                                                          : t._e(),
                                                                  ]),
                                                              ]),
                                                              t._v(" "),
                                                              s("div", { staticClass: "input-container" }, [
                                                                  s("div", { staticClass: "row" }, [
                                                                      s("div", { staticClass: "col-md-6" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "poster_path" } }, [t._v("Poster Path")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.serie.poster_path, expression: "form.serie.poster_path" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { placeholder: "Serie Poster Path", id: "poster_path", name: "poster_path", type: "text" },
                                                                                  domProps: { value: t.form.serie.poster_path },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.serie, "poster_path", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-6" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", [t._v("Poster upload")]),
                                                                              t._v(" "),
                                                                              s("input", { staticClass: "file-upload-default" }),
                                                                              t._v(" "),
                                                                              s("div", { staticClass: "input-group col-xs-12" }, [
                                                                                  s("input", {
                                                                                      staticClass: "form-control file-upload-info",
                                                                                      attrs: { id: "poster", placeholder: "Upload Image", type: "file" },
                                                                                      on: { change: t.storePoster },
                                                                                  }),
                                                                                  t._v(" "),
                                                                                  t._m(3),
                                                                              ]),
                                                                          ]),
                                                                      ]),
                                                                  ]),
                                                              ]),
                                                              t._v(" "),
                                                              s("div", { staticClass: "row" }, [
                                                                  s("div", { staticClass: "col-md-12" }, [
                                                                      s(
                                                                          "div",
                                                                          { staticClass: "form-group" },
                                                                          [
                                                                              s("multiselect", {
                                                                                  attrs: {
                                                                                      "clear-on-select": !1,
                                                                                      "close-on-select": !1,
                                                                                      hideSelected: !0,
                                                                                      multiple: !0,
                                                                                      options: t.options,
                                                                                      "preserve-search": !0,
                                                                                      label: "name",
                                                                                      placeholder: "Select Genre",
                                                                                      "track-by": "name",
                                                                                  },
                                                                                  on: { remove: t.destroyGenre },
                                                                                  model: {
                                                                                      value: t.form.serie.genres,
                                                                                      callback: function (e) {
                                                                                          t.$set(t.form.serie, "genres", e);
                                                                                      },
                                                                                      expression: "form.serie.genres",
                                                                                  },
                                                                              }),
                                                                          ],
                                                                          1
                                                                      ),
                                                                  ]),
                                                              ]),
                                                              t._v(" "),
                                                              s("div", { staticClass: "row" }, [
                                                                  s("div", { staticClass: "col-md-6" }, [
                                                                      s("div", { staticClass: "form-group" }, [
                                                                          s("label", { attrs: { for: "poster_path" } }, [t._v("Backdrop Path")]),
                                                                          t._v(" "),
                                                                          s("input", {
                                                                              directives: [{ name: "model", rawName: "v-model", value: t.form.serie.backdrop_path, expression: "form.serie.backdrop_path" }],
                                                                              staticClass: "form-control",
                                                                              attrs: { placeholder: "Serie Backdrop Path", id: "backdrop_path", name: "backdrop_path", type: "text" },
                                                                              domProps: { value: t.form.serie.backdrop_path },
                                                                              on: {
                                                                                  input: function (e) {
                                                                                      e.target.composing || t.$set(t.form.serie, "backdrop_path", e.target.value);
                                                                                  },
                                                                              },
                                                                          }),
                                                                      ]),
                                                                  ]),
                                                                  t._v(" "),
                                                                  s("div", { staticClass: "col-md-6" }, [
                                                                      s("div", { staticClass: "form-group" }, [
                                                                          s("label", [t._v("Backdrop upload")]),
                                                                          t._v(" "),
                                                                          s("input", { staticClass: "file-upload-default" }),
                                                                          t._v(" "),
                                                                          s("div", { staticClass: "input-group col-xs-12" }, [
                                                                              s("input", {
                                                                                  staticClass: "form-control file-upload-info",
                                                                                  attrs: { id: "backdrop", placeholder: "Upload Image", type: "file" },
                                                                                  on: { change: t.storeBackdrop },
                                                                              }),
                                                                              t._v(" "),
                                                                              t._m(4),
                                                                          ]),
                                                                      ]),
                                                                  ]),
                                                              ]),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      t._m(5),
                                                      t._v(" "),
                                                      s("div", { staticClass: "row" }, [
                                                          s("div", { staticClass: "col-md-12" }, [
                                                              s(
                                                                  "div",
                                                                  { staticClass: "form-group" },
                                                                  [
                                                                      s("multiselect", {
                                                                          attrs: {
                                                                              "clear-on-select": !1,
                                                                              "close-on-select": !1,
                                                                              hideSelected: !0,
                                                                              multiple: !0,
                                                                              options: t.optionsnetwork,
                                                                              "preserve-search": !0,
                                                                              "open-direction": "bottom",
                                                                              noResult: "No Cast found. Consider changing the search query",
                                                                              "track-by": "id",
                                                                              label: "name",
                                                                              placeholder: "Select Network",
                                                                          },
                                                                          on: { remove: t.destroyNetwork },
                                                                          model: {
                                                                              value: t.form.serie.networks,
                                                                              callback: function (e) {
                                                                                  t.$set(t.form.serie, "networks", e);
                                                                              },
                                                                              expression: "form.serie.networks",
                                                                          },
                                                                      }),
                                                                  ],
                                                                  1
                                                              ),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      t._m(6),
                                                      t._v(" "),
                                                      s("div", { staticClass: "row" }, [
                                                          s("div", { staticClass: "col-md-4" }, [
                                                              s("div", { staticClass: "form-group" }, [
                                                                  s("label", { attrs: { for: "preview_path" } }, [t._v("Youtube Trailer ID")]),
                                                                  t._v(" "),
                                                                  s("input", {
                                                                      directives: [{ name: "model", rawName: "v-model", value: t.form.serie.preview_path, expression: "form.serie.preview_path" }],
                                                                      staticClass: "form-control",
                                                                      attrs: { id: "preview_path", type: "text" },
                                                                      domProps: { value: t.form.serie.preview_path },
                                                                      on: {
                                                                          input: function (e) {
                                                                              e.target.composing || t.$set(t.form.serie, "preview_path", e.target.value);
                                                                          },
                                                                      },
                                                                  }),
                                                              ]),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "col-md-4" }, [
                                                              s("div", { staticClass: "form-group" }, [
                                                                  s("label", { attrs: { for: "trailer_url" } }, [t._v("Youtube Trailer Self Hosted")]),
                                                                  t._v(" "),
                                                                  s("input", {
                                                                      directives: [{ name: "model", rawName: "v-model", value: t.form.serie.trailer_url, expression: "form.serie.trailer_url" }],
                                                                      staticClass: "form-control",
                                                                      attrs: { id: "trailer_url", type: "text" },
                                                                      domProps: { value: t.form.serie.trailer_url },
                                                                      on: {
                                                                          input: function (e) {
                                                                              e.target.composing || t.$set(t.form.serie, "trailer_url", e.target.value);
                                                                          },
                                                                      },
                                                                  }),
                                                              ]),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "col-md-4" }, [
                                                              s("div", { staticClass: "form-group" }, [
                                                                  s("label", [t._v("Upload Trailer")]),
                                                                  t._v(" "),
                                                                  s("input", { staticClass: "file-upload-default" }),
                                                                  t._v(" "),
                                                                  s("div", { staticClass: "input-group col-xs-12" }, [
                                                                      s("input", {
                                                                          staticClass: "form-control file-upload-info",
                                                                          attrs: { id: "video_trailer", placeholder: "Upload Image", type: "file" },
                                                                          on: { change: t.storeVideoTrailer },
                                                                      }),
                                                                      t._v(" "),
                                                                      t._m(7),
                                                                  ]),
                                                              ]),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      t._m(8),
                                                      t._v(" "),
                                                      s("div", { staticClass: "row" }, [
                                                          s("div", { staticClass: "col-md-12" }, [
                                                              s(
                                                                  "div",
                                                                  { staticClass: "form-group" },
                                                                  [
                                                                      s("multiselect", {
                                                                          attrs: {
                                                                              "clear-on-select": !1,
                                                                              "close-on-select": !1,
                                                                              hideSelected: !0,
                                                                              multiple: !0,
                                                                              options: t.optionscast,
                                                                              "preserve-search": !0,
                                                                              "open-direction": "bottom",
                                                                              noResult: "No Cast found. Consider changing the search query",
                                                                              "track-by": "id",
                                                                              label: "name",
                                                                              placeholder: "Select Cast",
                                                                          },
                                                                          on: { remove: t.destroyCast },
                                                                          model: {
                                                                              value: t.form.serie.casterslist,
                                                                              callback: function (e) {
                                                                                  t.$set(t.form.serie, "casterslist", e);
                                                                              },
                                                                              expression: "form.serie.casterslist",
                                                                          },
                                                                      }),
                                                                  ],
                                                                  1
                                                              ),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "overview" } }, [t._v("Details")]),
                                                              t._v(" "),
                                                              s("textarea", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.serie.overview, expression: "form.serie.overview" }],
                                                                  staticClass: "form-control pb-3",
                                                                  attrs: { id: "overview", rows: "6", type: "text" },
                                                                  domProps: { value: t.form.serie.overview },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.serie, "overview", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-4" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "release_date" } }, [t._v("Release Date")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.serie.first_air_date, expression: "form.serie.first_air_date" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { placeholder: "Release Date", id: "release_date", type: "date" },
                                                                  domProps: { value: t.form.serie.first_air_date },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.serie, "first_air_date", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                      t._v(" "),
                                                      s("div", { staticClass: "col-md-4" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "vote_average" } }, [t._v("Vote Average")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.serie.vote_average, expression: "form.serie.vote_average" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { placeholder: "Vote Average", id: "vote_average", type: "text" },
                                                                  domProps: { value: t.form.serie.vote_average },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.serie, "vote_average", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-6" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "vote_count" } }, [t._v("Vote Count")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.serie.vote_count, expression: "form.serie.vote_count" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "vote_count", type: "text" },
                                                                  domProps: { value: t.form.serie.vote_count },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.serie, "vote_count", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                      t._v(" "),
                                                      s("div", { staticClass: "col-md-6" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "popularity" } }, [t._v("Popularity")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.serie.popularity, expression: "form.serie.popularity" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { placeholder: "Popularity", id: "popularity", type: "text" },
                                                                  domProps: { value: t.form.serie.popularity },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.serie, "popularity", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  t._m(9),
                                                  t._v(" "),
                                                  s(
                                                      "div",
                                                      { staticClass: "row" },
                                                      [
                                                          s(
                                                              "div",
                                                              { staticClass: "col-md-6" },
                                                              [
                                                                  s("div", { staticClass: "input-group" }, [
                                                                      s("input", {
                                                                          directives: [{ name: "model", rawName: "v-model", value: t.addseason, expression: "addseason" }],
                                                                          staticClass: "form-control input",
                                                                          attrs: { type: "text", placeholder: "Season number" },
                                                                          domProps: { value: t.addseason },
                                                                          on: {
                                                                              input: function (e) {
                                                                                  e.target.composing || (t.addseason = e.target.value);
                                                                              },
                                                                          },
                                                                      }),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "input-group-btn" }, [
                                                                          s(
                                                                              "button",
                                                                              {
                                                                                  staticClass: "btn btn-primary ml-2",
                                                                                  attrs: { type: "submit" },
                                                                                  on: {
                                                                                      click: function (e) {
                                                                                          return e.preventDefault(), t.getSeason();
                                                                                      },
                                                                                  },
                                                                              },
                                                                              [t._v("Add from TMDB")]
                                                                          ),
                                                                          t._v(" "),
                                                                          s(
                                                                              "button",
                                                                              {
                                                                                  staticClass: "btn btn-primary ml-2",
                                                                                  attrs: { type: "submit" },
                                                                                  on: {
                                                                                      click: function (e) {
                                                                                          t.showModalSeason = !0;
                                                                                      },
                                                                                  },
                                                                              },
                                                                              [t._v("Add Custom Season")]
                                                                          ),
                                                                      ]),
                                                                  ]),
                                                                  t._v(" "),
                                                                  s(
                                                                      "Modal",
                                                                      {
                                                                          attrs: { title: "Add New Season" },
                                                                          model: {
                                                                              value: t.showModalSeason,
                                                                              callback: function (e) {
                                                                                  t.showModalSeason = e;
                                                                              },
                                                                              expression: "showModalSeason",
                                                                          },
                                                                      },
                                                                      [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "season_number" } }, [t._v("Season Number")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.customSeason.season_number, expression: "customSeason.season_number" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "season_number", type: "text" },
                                                                                  domProps: { value: t.customSeason.season_number },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.customSeason, "season_number", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                          t._v(" "),
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "season_number" } }, [t._v("Season Name")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.customSeason.name, expression: "customSeason.name" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "name", type: "text" },
                                                                                  domProps: { value: t.customSeason.name },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.customSeason, "name", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                          t._v(" "),
                                                                          s("label", { attrs: { for: "seasonoverview" } }, [t._v("Season Overview")]),
                                                                          t._v(" "),
                                                                          s("textarea", {
                                                                              directives: [{ name: "model", rawName: "v-model", value: t.customSeason.overview, expression: "customSeason.overview" }],
                                                                              staticClass: "form-control",
                                                                              attrs: { id: "seasonoverview", required: "" },
                                                                              domProps: { value: t.customSeason.overview },
                                                                              on: {
                                                                                  input: function (e) {
                                                                                      e.target.composing || t.$set(t.customSeason, "overview", e.target.value);
                                                                                  },
                                                                              },
                                                                          }),
                                                                          t._v(" "),
                                                                          s("div", { staticClass: "col-md-12 grid-margin" }, [
                                                                              s("div", { staticClass: "d-flex justify-content-between flex-wrap" }, [
                                                                                  s("div", { staticClass: "d-flex align-items-end flex-wrap" }, [s("div", { staticClass: "d-flex" })]),
                                                                                  t._v(" "),
                                                                                  s("div", { staticClass: "d-flex justify-content-between align-items-end flex-wrap" }, [
                                                                                      s("div", { staticClass: "form-group" }, [
                                                                                          s(
                                                                                              "button",
                                                                                              {
                                                                                                  staticClass: "btn btn-primary ml-2",
                                                                                                  attrs: { type: "submit" },
                                                                                                  on: {
                                                                                                      click: function (e) {
                                                                                                          return e.preventDefault(), t.addNewSeason();
                                                                                                      },
                                                                                                  },
                                                                                              },
                                                                                              [t._v("Save")]
                                                                                          ),
                                                                                      ]),
                                                                                  ]),
                                                                              ]),
                                                                          ]),
                                                                      ]
                                                                  ),
                                                                  t._v(" "),
                                                                  s(
                                                                      "div",
                                                                      { staticClass: "form-group" },
                                                                      [
                                                                          s("label", { attrs: { for: "season" } }, [t._v("Season")]),
                                                                          t._v(" "),
                                                                          s("multiselect", {
                                                                              attrs: {
                                                                                  "deselect-label": "Can't remove this value",
                                                                                  "track-by": "season_number",
                                                                                  label: "season_number",
                                                                                  placeholder: "Select season",
                                                                                  options: t.form.serie.seasons,
                                                                                  searchable: !0,
                                                                                  "allow-empty": !1,
                                                                              },
                                                                              on: { select: t.selectSeason },
                                                                              scopedSlots: t._u(
                                                                                  [
                                                                                      {
                                                                                          key: "singleLabel",
                                                                                          fn: function (e) {
                                                                                              return [s("span", { staticClass: "option__title ml-1" }, [t._v(t._s(e.option.name))])];
                                                                                          },
                                                                                      },
                                                                                  ],
                                                                                  null,
                                                                                  !1,
                                                                                  3162673735
                                                                              ),
                                                                              model: {
                                                                                  value: t.season,
                                                                                  callback: function (e) {
                                                                                      t.season = e;
                                                                                  },
                                                                                  expression: "season",
                                                                              },
                                                                          }),
                                                                      ],
                                                                      1
                                                                  ),
                                                                  t._v(" "),
                                                                  t.selectedSeason >= 0 && t.form.serie.seasons[t.selectedSeason]
                                                                      ? s("div", { staticClass: "form-group" }, [
                                                                            s("label", { attrs: { for: "seasonoverview" } }, [t._v("Season Number")]),
                                                                            t._v(" "),
                                                                            s("textarea", {
                                                                                directives: [
                                                                                    {
                                                                                        name: "model",
                                                                                        rawName: "v-model",
                                                                                        value: t.form.serie.seasons[t.selectedSeason].season_number,
                                                                                        expression: "form.serie.seasons[selectedSeason].season_number",
                                                                                    },
                                                                                ],
                                                                                staticClass: "form-control",
                                                                                attrs: { id: "seasonoverview", required: "" },
                                                                                domProps: { value: t.form.serie.seasons[t.selectedSeason].season_number },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || t.$set(t.form.serie.seasons[t.selectedSeason], "season_number", e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { attrs: { for: "seasonoverview" } }, [t._v("Season Name")]),
                                                                            t._v(" "),
                                                                            s("textarea", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.form.serie.seasons[t.selectedSeason].name, expression: "form.serie.seasons[selectedSeason].name" }],
                                                                                staticClass: "form-control",
                                                                                attrs: { id: "seasonoverview", required: "" },
                                                                                domProps: { value: t.form.serie.seasons[t.selectedSeason].name },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || t.$set(t.form.serie.seasons[t.selectedSeason], "name", e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { attrs: { for: "seasonoverview" } }, [t._v("Season Overview")]),
                                                                            t._v(" "),
                                                                            s("textarea", {
                                                                                directives: [
                                                                                    { name: "model", rawName: "v-model", value: t.form.serie.seasons[t.selectedSeason].overview, expression: "form.serie.seasons[selectedSeason].overview" },
                                                                                ],
                                                                                staticClass: "form-control",
                                                                                attrs: { id: "seasonoverview", required: "" },
                                                                                domProps: { value: t.form.serie.seasons[t.selectedSeason].overview },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || t.$set(t.form.serie.seasons[t.selectedSeason], "overview", e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                        ])
                                                                      : t._e(),
                                                                  t._v(" "),
                                                                  t.selectedSeason >= 0
                                                                      ? s("div", { staticClass: "float-right my-2" }, [
                                                                            s(
                                                                                "button",
                                                                                {
                                                                                    staticClass: "btn btn-danger mr-2",
                                                                                    on: {
                                                                                        click: function (e) {
                                                                                            return t.destroySeason();
                                                                                        },
                                                                                    },
                                                                                },
                                                                                [t._v("Delete Season")]
                                                                            ),
                                                                        ])
                                                                      : t._e(),
                                                              ],
                                                              1
                                                          ),
                                                          t._v(" "),
                                                          t.selectedSeason >= 0
                                                              ? [
                                                                    s(
                                                                        "div",
                                                                        { staticClass: "col-md-6" },
                                                                        [
                                                                            s("div", { staticClass: "input-group" }, [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.addepisode, expression: "addepisode" }],
                                                                                    staticClass: "form-control input",
                                                                                    attrs: { type: "text", placeholder: "Episode number" },
                                                                                    domProps: { value: t.addepisode },
                                                                                    on: {
                                                                                        input: function (e) {
                                                                                            e.target.composing || (t.addepisode = e.target.value);
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("div", { staticClass: "input-group-btn" }, [
                                                                                    s(
                                                                                        "button",
                                                                                        {
                                                                                            staticClass: "btn btn-primary ml-2",
                                                                                            attrs: { type: "submit" },
                                                                                            on: {
                                                                                                click: function (e) {
                                                                                                    return e.preventDefault(), t.getEpisode.apply(null, arguments);
                                                                                                },
                                                                                            },
                                                                                        },
                                                                                        [t._v("Add from TMDB")]
                                                                                    ),
                                                                                    t._v(" "),
                                                                                    s(
                                                                                        "button",
                                                                                        {
                                                                                            staticClass: "btn btn-primary ml-2",
                                                                                            attrs: { type: "submit" },
                                                                                            on: {
                                                                                                click: function (e) {
                                                                                                    t.showModal = !0;
                                                                                                },
                                                                                            },
                                                                                        },
                                                                                        [t._v("Add Custom Episode")]
                                                                                    ),
                                                                                    t._v(" "),
                                                                                    s("button", { staticClass: "btn btn-primary ml-2 disabled", attrs: { type: "submit" } }, [t._v("Add Bulk Links(Upcoming)")]),
                                                                                ]),
                                                                            ]),
                                                                            t._v(" "),
                                                                            s(
                                                                                "Modal",
                                                                                {
                                                                                    attrs: { title: "Add New Episode" },
                                                                                    model: {
                                                                                        value: t.showModalBulkLinks,
                                                                                        callback: function (e) {
                                                                                            t.showModalBulkLinks = e;
                                                                                        },
                                                                                        expression: "showModalBulkLinks",
                                                                                    },
                                                                                },
                                                                                [
                                                                                    s("div", { staticClass: "row" }, [
                                                                                        s("div", { staticClass: "col-md-6" }, [
                                                                                            s(
                                                                                                "div",
                                                                                                { staticClass: "form-group" },
                                                                                                [
                                                                                                    s("label", { attrs: { for: "server" } }, [t._v("Server")]),
                                                                                                    t._v(" "),
                                                                                                    s("multiselect", {
                                                                                                        attrs: { options: t.servers, id: "server", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                                        model: {
                                                                                                            value: t.customEpisodesBulkLinks.server,
                                                                                                            callback: function (e) {
                                                                                                                t.$set(t.customEpisodesBulkLinks, "server", e);
                                                                                                            },
                                                                                                            expression: "customEpisodesBulkLinks.server",
                                                                                                        },
                                                                                                    }),
                                                                                                ],
                                                                                                1
                                                                                            ),
                                                                                        ]),
                                                                                        t._v(" "),
                                                                                        s("div", { staticClass: "col-md-6" }, [
                                                                                            s(
                                                                                                "div",
                                                                                                { staticClass: "form-group" },
                                                                                                [
                                                                                                    s("label", { attrs: { for: "lang" } }, [t._v("Language")]),
                                                                                                    t._v(" "),
                                                                                                    s("multiselect", {
                                                                                                        attrs: { options: t.langs, id: "lang", label: "english_name", placeholder: "Select one (default English)", "track-by": "iso_639_1" },
                                                                                                        model: {
                                                                                                            value: t.lang,
                                                                                                            callback: function (e) {
                                                                                                                t.lang = e;
                                                                                                            },
                                                                                                            expression: "lang",
                                                                                                        },
                                                                                                    }),
                                                                                                ],
                                                                                                1
                                                                                            ),
                                                                                        ]),
                                                                                        t._v(" "),
                                                                                        s("div", { staticClass: "col-md-6" }, [
                                                                                            s("div", { staticClass: "form-group" }, [
                                                                                                s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                                    s("input", {
                                                                                                        directives: [
                                                                                                            {
                                                                                                                name: "model",
                                                                                                                rawName: "v-model",
                                                                                                                value: t.customEpisodesBulkLinks.supported_hosts,
                                                                                                                expression: "customEpisodesBulkLinks.supported_hosts",
                                                                                                            },
                                                                                                        ],
                                                                                                        staticClass: "custom-control-input",
                                                                                                        attrs: { id: "supported_hosts", type: "checkbox" },
                                                                                                        domProps: {
                                                                                                            checked: Array.isArray(t.customEpisodesBulkLinks.supported_hosts)
                                                                                                                ? t._i(t.customEpisodesBulkLinks.supported_hosts, null) > -1
                                                                                                                : t.customEpisodesBulkLinks.supported_hosts,
                                                                                                        },
                                                                                                        on: {
                                                                                                            change: function (e) {
                                                                                                                var s = t.customEpisodesBulkLinks.supported_hosts,
                                                                                                                    a = e.target,
                                                                                                                    i = !!a.checked;
                                                                                                                if (Array.isArray(s)) {
                                                                                                                    var r = t._i(s, null);
                                                                                                                    a.checked
                                                                                                                        ? r < 0 && t.$set(t.customEpisodesBulkLinks, "supported_hosts", s.concat([null]))
                                                                                                                        : r > -1 && t.$set(t.customEpisodesBulkLinks, "supported_hosts", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                                                } else t.$set(t.customEpisodesBulkLinks, "supported_hosts", i);
                                                                                                            },
                                                                                                        },
                                                                                                    }),
                                                                                                    t._v(" "),
                                                                                                    s("label", { staticClass: "custom-control-label", attrs: { for: "supported_hosts" } }, [t._v("Supported Hosts")]),
                                                                                                ]),
                                                                                            ]),
                                                                                            t._v(" "),
                                                                                            s("div", { staticClass: "form-group" }, [
                                                                                                s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                                    s("input", {
                                                                                                        directives: [
                                                                                                            { name: "model", rawName: "v-model", value: t.customEpisodesBulkLinks.embed, expression: "customEpisodesBulkLinks.embed" },
                                                                                                        ],
                                                                                                        staticClass: "custom-control-input",
                                                                                                        attrs: { id: "embed", type: "checkbox" },
                                                                                                        domProps: {
                                                                                                            checked: Array.isArray(t.customEpisodesBulkLinks.embed)
                                                                                                                ? t._i(t.customEpisodesBulkLinks.embed, null) > -1
                                                                                                                : t.customEpisodesBulkLinks.embed,
                                                                                                        },
                                                                                                        on: {
                                                                                                            change: function (e) {
                                                                                                                var s = t.customEpisodesBulkLinks.embed,
                                                                                                                    a = e.target,
                                                                                                                    i = !!a.checked;
                                                                                                                if (Array.isArray(s)) {
                                                                                                                    var r = t._i(s, null);
                                                                                                                    a.checked
                                                                                                                        ? r < 0 && t.$set(t.customEpisodesBulkLinks, "embed", s.concat([null]))
                                                                                                                        : r > -1 && t.$set(t.customEpisodesBulkLinks, "embed", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                                                } else t.$set(t.customEpisodesBulkLinks, "embed", i);
                                                                                                            },
                                                                                                        },
                                                                                                    }),
                                                                                                    t._v(" "),
                                                                                                    s("label", { staticClass: "custom-control-label", attrs: { for: "embed" } }, [t._v("Embed")]),
                                                                                                ]),
                                                                                            ]),
                                                                                            t._v(" "),
                                                                                            s("div", { staticClass: "form-group" }, [
                                                                                                s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                                    s("input", {
                                                                                                        directives: [{ name: "model", rawName: "v-model", value: t.customEpisodesBulkLinks.hls, expression: "customEpisodesBulkLinks.hls" }],
                                                                                                        staticClass: "custom-control-input",
                                                                                                        attrs: { id: "hls", type: "checkbox" },
                                                                                                        domProps: {
                                                                                                            checked: Array.isArray(t.customEpisodesBulkLinks.hls)
                                                                                                                ? t._i(t.customEpisodesBulkLinks.hls, null) > -1
                                                                                                                : t.customEpisodesBulkLinks.hls,
                                                                                                        },
                                                                                                        on: {
                                                                                                            change: function (e) {
                                                                                                                var s = t.customEpisodesBulkLinks.hls,
                                                                                                                    a = e.target,
                                                                                                                    i = !!a.checked;
                                                                                                                if (Array.isArray(s)) {
                                                                                                                    var r = t._i(s, null);
                                                                                                                    a.checked
                                                                                                                        ? r < 0 && t.$set(t.customEpisodesBulkLinks, "hls", s.concat([null]))
                                                                                                                        : r > -1 && t.$set(t.customEpisodesBulkLinks, "hls", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                                                } else t.$set(t.customEpisodesBulkLinks, "hls", i);
                                                                                                            },
                                                                                                        },
                                                                                                    }),
                                                                                                    t._v(" "),
                                                                                                    s("label", { staticClass: "custom-control-label", attrs: { for: "hls" } }, [t._v("HlS Link  (PHP FORMAT)")]),
                                                                                                ]),
                                                                                            ]),
                                                                                        ]),
                                                                                    ]),
                                                                                    t._v(" "),
                                                                                    s("div", { staticClass: "form-group" }, [
                                                                                        s("label", { attrs: { for: "season_number" } }, [t._v("Episode Link format")]),
                                                                                        t._v(" "),
                                                                                        s("input", {
                                                                                            directives: [{ name: "model", rawName: "v-model", value: t.customEpisodesBulkLinks.link, expression: "customEpisodesBulkLinks.link" }],
                                                                                            staticClass: "form-control",
                                                                                            attrs: { id: "name", type: "text" },
                                                                                            domProps: { value: t.customEpisodesBulkLinks.link },
                                                                                            on: {
                                                                                                input: function (e) {
                                                                                                    e.target.composing || t.$set(t.customEpisodesBulkLinks, "link", e.target.value);
                                                                                                },
                                                                                            },
                                                                                        }),
                                                                                    ]),
                                                                                    t._v(" "),
                                                                                    s("div", { staticClass: "form-group" }, [
                                                                                        s("label", { attrs: { for: "season_number" } }, [t._v("Link Extentions")]),
                                                                                        t._v(" "),
                                                                                        s("input", {
                                                                                            directives: [{ name: "model", rawName: "v-model", value: t.customEpisodesBulkLinks.ext, expression: "customEpisodesBulkLinks.ext" }],
                                                                                            staticClass: "form-control",
                                                                                            attrs: { id: "name", type: "text" },
                                                                                            domProps: { value: t.customEpisodesBulkLinks.ext },
                                                                                            on: {
                                                                                                input: function (e) {
                                                                                                    e.target.composing || t.$set(t.customEpisodesBulkLinks, "ext", e.target.value);
                                                                                                },
                                                                                            },
                                                                                        }),
                                                                                    ]),
                                                                                    t._v(" "),
                                                                                    s("div", { staticClass: "input-group" }, [
                                                                                        s("div", { staticClass: "input-group-btn" }, [
                                                                                            s(
                                                                                                "button",
                                                                                                {
                                                                                                    staticClass: "btn btn-primary ml-2",
                                                                                                    attrs: { type: "submit" },
                                                                                                    on: {
                                                                                                        click: function (e) {
                                                                                                            return e.preventDefault(), t.addBulkEpisodeLinks();
                                                                                                        },
                                                                                                    },
                                                                                                },
                                                                                                [t._v("Save")]
                                                                                            ),
                                                                                        ]),
                                                                                    ]),
                                                                                ]
                                                                            ),
                                                                            t._v(" "),
                                                                            s(
                                                                                "Modal",
                                                                                {
                                                                                    attrs: { title: "Add New Episode" },
                                                                                    model: {
                                                                                        value: t.showModal,
                                                                                        callback: function (e) {
                                                                                            t.showModal = e;
                                                                                        },
                                                                                        expression: "showModal",
                                                                                    },
                                                                                },
                                                                                [
                                                                                    s("label", { attrs: { for: "episode_number" } }, [t._v("Episode Number")]),
                                                                                    t._v(" "),
                                                                                    s("textarea", {
                                                                                        directives: [{ name: "model", rawName: "v-model", value: t.customEpisodes.episode_number, expression: "customEpisodes.episode_number" }],
                                                                                        staticClass: "form-control",
                                                                                        attrs: { id: "episode_number", required: "" },
                                                                                        domProps: { value: t.customEpisodes.episode_number },
                                                                                        on: {
                                                                                            input: function (e) {
                                                                                                e.target.composing || t.$set(t.customEpisodes, "episode_number", e.target.value);
                                                                                            },
                                                                                        },
                                                                                    }),
                                                                                    t._v(" "),
                                                                                    s("label", { attrs: { for: "episode_number" } }, [t._v("Episode Name")]),
                                                                                    t._v(" "),
                                                                                    s("textarea", {
                                                                                        directives: [{ name: "model", rawName: "v-model", value: t.customEpisodes.name, expression: "customEpisodes.name" }],
                                                                                        staticClass: "form-control",
                                                                                        attrs: { id: "name", required: "" },
                                                                                        domProps: { value: t.customEpisodes.name },
                                                                                        on: {
                                                                                            input: function (e) {
                                                                                                e.target.composing || t.$set(t.customEpisodes, "name", e.target.value);
                                                                                            },
                                                                                        },
                                                                                    }),
                                                                                    t._v(" "),
                                                                                    s("label", { attrs: { for: "seasonoverview" } }, [t._v("Episode Overview")]),
                                                                                    t._v(" "),
                                                                                    s("textarea", {
                                                                                        directives: [{ name: "model", rawName: "v-model", value: t.customEpisodes.overview, expression: "customEpisodes.overview" }],
                                                                                        staticClass: "form-control",
                                                                                        attrs: { id: "seasonoverview", required: "" },
                                                                                        domProps: { value: t.customEpisodes.overview },
                                                                                        on: {
                                                                                            input: function (e) {
                                                                                                e.target.composing || t.$set(t.customEpisodes, "overview", e.target.value);
                                                                                            },
                                                                                        },
                                                                                    }),
                                                                                    t._v(" "),
                                                                                    s("div", { staticClass: "input-group" }, [
                                                                                        s("div", { staticClass: "input-group-btn" }, [
                                                                                            s(
                                                                                                "button",
                                                                                                {
                                                                                                    staticClass: "btn btn-primary ml-2",
                                                                                                    attrs: { type: "submit" },
                                                                                                    on: {
                                                                                                        click: function (e) {
                                                                                                            return e.preventDefault(), t.addNewEpisode();
                                                                                                        },
                                                                                                    },
                                                                                                },
                                                                                                [t._v("Save")]
                                                                                            ),
                                                                                        ]),
                                                                                    ]),
                                                                                ]
                                                                            ),
                                                                            t._v(" "),
                                                                            t.selectedSeason >= 0
                                                                                ? s(
                                                                                      "div",
                                                                                      { staticClass: "form-group" },
                                                                                      [
                                                                                          s("label", { attrs: { for: "episode" } }, [t._v("Episode")]),
                                                                                          t._v(" "),
                                                                                          s("multiselect", {
                                                                                              attrs: {
                                                                                                  "deselect-label": "Can't remove this value",
                                                                                                  "track-by": "episode_number",
                                                                                                  label: "episode_number",
                                                                                                  placeholder: "Select episode",
                                                                                                  options: t.form.serie.seasons[t.selectedSeason].episodes,
                                                                                                  searchable: !0,
                                                                                                  "allow-empty": !1,
                                                                                              },
                                                                                              on: { select: t.selectEpisode },
                                                                                              scopedSlots: t._u(
                                                                                                  [
                                                                                                      {
                                                                                                          key: "singleLabel",
                                                                                                          fn: function (e) {
                                                                                                              var a = e.option;
                                                                                                              return [
                                                                                                                  s("img", { staticClass: "option__image", attrs: { src: a.still_path, alt: a.episode_number, height: "90" } }),
                                                                                                                  t._v(" "),
                                                                                                                  s("strong", [t._v(t._s(a.episode_number))]),
                                                                                                                  t._v(":\n                              "),
                                                                                                                  s("strong", [t._v(t._s(a.name))]),
                                                                                                              ];
                                                                                                          },
                                                                                                      },
                                                                                                  ],
                                                                                                  null,
                                                                                                  !1,
                                                                                                  1029030856
                                                                                              ),
                                                                                              model: {
                                                                                                  value: t.episode,
                                                                                                  callback: function (e) {
                                                                                                      t.episode = e;
                                                                                                  },
                                                                                                  expression: "episode",
                                                                                              },
                                                                                          }),
                                                                                      ],
                                                                                      1
                                                                                  )
                                                                                : t._e(),
                                                                            t._v(" "),
                                                                            t.selectedEpisode >= 0 && t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode]
                                                                                ? s("div", { staticClass: "form-group" }, [
                                                                                      s("div", { staticClass: "col-md-6" }, [
                                                                                          s("div", { staticClass: "form-group" }, [
                                                                                              s(
                                                                                                  "button",
                                                                                                  {
                                                                                                      staticClass: "btn btn-primary ml-2",
                                                                                                      on: {
                                                                                                          click: function (e) {
                                                                                                              return t.sendEpisode(t.episode);
                                                                                                          },
                                                                                                      },
                                                                                                  },
                                                                                                  [t._v("Send Notification")]
                                                                                              ),
                                                                                          ]),
                                                                                      ]),
                                                                                      t._v(" "),
                                                                                      s("div", { staticClass: "col-md-6" }, [
                                                                                          s("div", { staticClass: "form-group" }, [
                                                                                              s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                                  s("input", {
                                                                                                      directives: [
                                                                                                          {
                                                                                                              name: "model",
                                                                                                              rawName: "v-model",
                                                                                                              value: t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].hasrecap,
                                                                                                              expression: "form.serie.seasons[selectedSeason].episodes[selectedEpisode].hasrecap",
                                                                                                          },
                                                                                                      ],
                                                                                                      staticClass: "custom-control-input",
                                                                                                      attrs: { id: "hasrecap", type: "checkbox" },
                                                                                                      domProps: {
                                                                                                          checked: Array.isArray(t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].hasrecap)
                                                                                                              ? t._i(t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].hasrecap, null) > -1
                                                                                                              : t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].hasrecap,
                                                                                                      },
                                                                                                      on: {
                                                                                                          change: function (e) {
                                                                                                              var s = t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].hasrecap,
                                                                                                                  a = e.target,
                                                                                                                  i = !!a.checked;
                                                                                                              if (Array.isArray(s)) {
                                                                                                                  var r = t._i(s, null);
                                                                                                                  a.checked
                                                                                                                      ? r < 0 && t.$set(t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode], "hasrecap", s.concat([null]))
                                                                                                                      : r > -1 &&
                                                                                                                        t.$set(
                                                                                                                            t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode],
                                                                                                                            "hasrecap",
                                                                                                                            s.slice(0, r).concat(s.slice(r + 1))
                                                                                                                        );
                                                                                                              } else t.$set(t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode], "hasrecap", i);
                                                                                                          },
                                                                                                      },
                                                                                                  }),
                                                                                                  t._v(" "),
                                                                                                  s("label", { staticClass: "custom-control-label", attrs: { for: "hasrecap" } }, [t._v("Episode has Skip Recap ?")]),
                                                                                              ]),
                                                                                          ]),
                                                                                      ]),
                                                                                      t._v(" "),
                                                                                      s("div", { staticClass: "col-md-6" }, [
                                                                                          s("div", { staticClass: "form-group" }, [
                                                                                              s("label", { attrs: { for: "skiprecap_start_in" } }, [t._v("Episode Start in (Exprime in sec !)")]),
                                                                                              t._v(" "),
                                                                                              s("input", {
                                                                                                  directives: [
                                                                                                      {
                                                                                                          name: "model",
                                                                                                          rawName: "v-model",
                                                                                                          value: t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].skiprecap_start_in,
                                                                                                          expression: "form.serie.seasons[selectedSeason].episodes[selectedEpisode].skiprecap_start_in",
                                                                                                      },
                                                                                                  ],
                                                                                                  staticClass: "form-control",
                                                                                                  attrs: { id: "poster_path", name: "skiprecap_start_in", type: "text" },
                                                                                                  domProps: { value: t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].skiprecap_start_in },
                                                                                                  on: {
                                                                                                      input: function (e) {
                                                                                                          e.target.composing ||
                                                                                                              t.$set(t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode], "skiprecap_start_in", e.target.value);
                                                                                                      },
                                                                                                  },
                                                                                              }),
                                                                                          ]),
                                                                                      ]),
                                                                                      t._v(" "),
                                                                                      s("label", { attrs: { for: "episode_number" } }, [t._v("Episode Number")]),
                                                                                      t._v(" "),
                                                                                      s("textarea", {
                                                                                          directives: [
                                                                                              {
                                                                                                  name: "model",
                                                                                                  rawName: "v-model",
                                                                                                  value: t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].episode_number,
                                                                                                  expression: "form.serie.seasons[selectedSeason].episodes[selectedEpisode].episode_number",
                                                                                              },
                                                                                          ],
                                                                                          staticClass: "form-control",
                                                                                          attrs: { id: "episode_number", required: "" },
                                                                                          domProps: { value: t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].episode_number },
                                                                                          on: {
                                                                                              input: function (e) {
                                                                                                  e.target.composing || t.$set(t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode], "episode_number", e.target.value);
                                                                                              },
                                                                                          },
                                                                                      }),
                                                                                      t._v(" "),
                                                                                      s("label", { attrs: { for: "episode_number" } }, [t._v("Episode Name")]),
                                                                                      t._v(" "),
                                                                                      s("textarea", {
                                                                                          directives: [
                                                                                              {
                                                                                                  name: "model",
                                                                                                  rawName: "v-model",
                                                                                                  value: t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].name,
                                                                                                  expression: "form.serie.seasons[selectedSeason].episodes[selectedEpisode].name",
                                                                                              },
                                                                                          ],
                                                                                          staticClass: "form-control",
                                                                                          attrs: { id: "name", required: "" },
                                                                                          domProps: { value: t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].name },
                                                                                          on: {
                                                                                              input: function (e) {
                                                                                                  e.target.composing || t.$set(t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode], "name", e.target.value);
                                                                                              },
                                                                                          },
                                                                                      }),
                                                                                      t._v(" "),
                                                                                      s("label", { attrs: { for: "seasonoverview" } }, [t._v("Episode Overview")]),
                                                                                      t._v(" "),
                                                                                      s("textarea", {
                                                                                          directives: [
                                                                                              {
                                                                                                  name: "model",
                                                                                                  rawName: "v-model",
                                                                                                  value: t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].overview,
                                                                                                  expression: "form.serie.seasons[selectedSeason].episodes[selectedEpisode].overview",
                                                                                              },
                                                                                          ],
                                                                                          staticClass: "form-control",
                                                                                          attrs: { id: "seasonoverview", required: "" },
                                                                                          domProps: { value: t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].overview },
                                                                                          on: {
                                                                                              input: function (e) {
                                                                                                  e.target.composing || t.$set(t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode], "overview", e.target.value);
                                                                                              },
                                                                                          },
                                                                                      }),
                                                                                      t._v(" "),
                                                                                      s("label", { attrs: { for: "still_path" } }, [t._v("Episode Cover")]),
                                                                                      t._v(" "),
                                                                                      s("input", {
                                                                                          directives: [
                                                                                              {
                                                                                                  name: "model",
                                                                                                  rawName: "v-model",
                                                                                                  value: t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].still_path,
                                                                                                  expression: "form.serie.seasons[selectedSeason].episodes[selectedEpisode].still_path",
                                                                                              },
                                                                                          ],
                                                                                          staticClass: "form-control",
                                                                                          attrs: { id: "still_path", required: "" },
                                                                                          domProps: { value: t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].still_path },
                                                                                          on: {
                                                                                              input: function (e) {
                                                                                                  e.target.composing || t.$set(t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode], "still_path", e.target.value);
                                                                                              },
                                                                                          },
                                                                                      }),
                                                                                      t._v(" "),
                                                                                      s("label", { attrs: { for: "vote_average" } }, [t._v("Episode Vote Average")]),
                                                                                      t._v(" "),
                                                                                      s("input", {
                                                                                          directives: [
                                                                                              {
                                                                                                  name: "model",
                                                                                                  rawName: "v-model",
                                                                                                  value: t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].vote_average,
                                                                                                  expression: "form.serie.seasons[selectedSeason].episodes[selectedEpisode].vote_average",
                                                                                              },
                                                                                          ],
                                                                                          staticClass: "form-control",
                                                                                          attrs: { id: "vote_average", required: "" },
                                                                                          domProps: { value: t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].vote_average },
                                                                                          on: {
                                                                                              input: function (e) {
                                                                                                  e.target.composing || t.$set(t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode], "vote_average", e.target.value);
                                                                                              },
                                                                                          },
                                                                                      }),
                                                                                      t._v(" "),
                                                                                      s("label", { attrs: { for: "air_date" } }, [t._v("Episode Air Date")]),
                                                                                      t._v(" "),
                                                                                      s("input", {
                                                                                          directives: [
                                                                                              {
                                                                                                  name: "model",
                                                                                                  rawName: "v-model",
                                                                                                  value: t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].air_date,
                                                                                                  expression: "form.serie.seasons[selectedSeason].episodes[selectedEpisode].air_date",
                                                                                              },
                                                                                          ],
                                                                                          staticClass: "form-control",
                                                                                          attrs: { id: "air_date", required: "" },
                                                                                          domProps: { value: t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].air_date },
                                                                                          on: {
                                                                                              input: function (e) {
                                                                                                  e.target.composing || t.$set(t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode], "air_date", e.target.value);
                                                                                              },
                                                                                          },
                                                                                      }),
                                                                                  ])
                                                                                : t._e(),
                                                                            t._v(" "),
                                                                            t.selectedEpisode >= 0
                                                                                ? s("div", { staticClass: "input-group" }, [
                                                                                      t._m(10),
                                                                                      t._v(" "),
                                                                                      s("div", { staticClass: "custom-file" }, [
                                                                                          s("input", { staticClass: "custom-file-input", attrs: { type: "file", id: "stillEpisode" }, on: { change: t.storeStillEpisode } }),
                                                                                          t._v(" "),
                                                                                          s("label", { staticClass: "custom-file-label", attrs: { for: "stillEpisode" } }, [
                                                                                              t._v(t._s(t.stillEpisode.length ? t.stillEpisode.name : "Choose still episode")),
                                                                                          ]),
                                                                                      ]),
                                                                                  ])
                                                                                : t._e(),
                                                                            t._v(" "),
                                                                            t.selectedEpisode >= 0
                                                                                ? s("div", { staticClass: "float-right my-2" }, [
                                                                                      s(
                                                                                          "button",
                                                                                          {
                                                                                              staticClass: "btn btn-danger ml-2",
                                                                                              attrs: { type: "button" },
                                                                                              on: {
                                                                                                  click: function (e) {
                                                                                                      return t.destroyEpisode();
                                                                                                  },
                                                                                              },
                                                                                          },
                                                                                          [s("em", { staticClass: "far fa-trash-alt" })]
                                                                                      ),
                                                                                  ])
                                                                                : t._e(),
                                                                        ],
                                                                        1
                                                                    ),
                                                                ]
                                                              : t._e(),
                                                      ],
                                                      2
                                                  ),
                                                  t._v(" "),
                                                  t.selectedEpisode >= 0
                                                      ? s("section", [
                                                            s("div", { staticClass: "form-group" }, [
                                                                t._m(11),
                                                                t._v(" "),
                                                                s("div", { staticClass: "row" }, [
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [
                                                                                s("label", { attrs: { for: "server" } }, [t._v("Server")]),
                                                                                t._v(" "),
                                                                                s("multiselect", {
                                                                                    attrs: { options: t.servers, id: "server", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                    model: {
                                                                                        value: t.server,
                                                                                        callback: function (e) {
                                                                                            t.server = e;
                                                                                        },
                                                                                        expression: "server",
                                                                                    },
                                                                                }),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [
                                                                                s("label", { attrs: { for: "lang" } }, [t._v("Language")]),
                                                                                t._v(" "),
                                                                                s("multiselect", {
                                                                                    attrs: { options: t.langs, id: "lang", label: "english_name", placeholder: "Select one (default English)", "track-by": "iso_639_1" },
                                                                                    model: {
                                                                                        value: t.lang,
                                                                                        callback: function (e) {
                                                                                            t.lang = e;
                                                                                        },
                                                                                        expression: "lang",
                                                                                    },
                                                                                }),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [
                                                                                s("label", { attrs: { for: "header" } }, [t._v("Headers")]),
                                                                                t._v(" "),
                                                                                s("multiselect", {
                                                                                    attrs: { options: t.headers, id: "header", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                    model: {
                                                                                        value: t.header,
                                                                                        callback: function (e) {
                                                                                            t.header = e;
                                                                                        },
                                                                                        expression: "header",
                                                                                    },
                                                                                }),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [
                                                                                s("label", { attrs: { for: "useragent" } }, [t._v("User Agent")]),
                                                                                t._v(" "),
                                                                                s("multiselect", {
                                                                                    attrs: { options: t.useragents, id: "useragent", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                    model: {
                                                                                        value: t.useragent,
                                                                                        callback: function (e) {
                                                                                            t.useragent = e;
                                                                                        },
                                                                                        expression: "useragent",
                                                                                    },
                                                                                }),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-6" }, [
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.supported_hosts, expression: "supported_hosts" }],
                                                                                    staticClass: "custom-control-input",
                                                                                    attrs: { id: "supported_hosts", type: "checkbox" },
                                                                                    domProps: { checked: Array.isArray(t.supported_hosts) ? t._i(t.supported_hosts, null) > -1 : t.supported_hosts },
                                                                                    on: {
                                                                                        change: function (e) {
                                                                                            var s = t.supported_hosts,
                                                                                                a = e.target,
                                                                                                i = !!a.checked;
                                                                                            if (Array.isArray(s)) {
                                                                                                var r = t._i(s, null);
                                                                                                a.checked ? r < 0 && (t.supported_hosts = s.concat([null])) : r > -1 && (t.supported_hosts = s.slice(0, r).concat(s.slice(r + 1)));
                                                                                            } else t.supported_hosts = i;
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("label", { staticClass: "custom-control-label", attrs: { for: "supported_hosts" } }, [t._v("Supported Hosts")]),
                                                                            ]),
                                                                        ]),
                                                                        t._v(" "),
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.embed, expression: "embed" }],
                                                                                    staticClass: "custom-control-input",
                                                                                    attrs: { id: "embed", type: "checkbox" },
                                                                                    domProps: { checked: Array.isArray(t.embed) ? t._i(t.embed, null) > -1 : t.embed },
                                                                                    on: {
                                                                                        change: function (e) {
                                                                                            var s = t.embed,
                                                                                                a = e.target,
                                                                                                i = !!a.checked;
                                                                                            if (Array.isArray(s)) {
                                                                                                var r = t._i(s, null);
                                                                                                a.checked ? r < 0 && (t.embed = s.concat([null])) : r > -1 && (t.embed = s.slice(0, r).concat(s.slice(r + 1)));
                                                                                            } else t.embed = i;
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("label", { staticClass: "custom-control-label", attrs: { for: "embed" } }, [t._v("Embed")]),
                                                                            ]),
                                                                        ]),
                                                                        t._v(" "),
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.hls, expression: "hls" }],
                                                                                    staticClass: "custom-control-input",
                                                                                    attrs: { id: "hls", type: "checkbox" },
                                                                                    domProps: { checked: Array.isArray(t.hls) ? t._i(t.hls, null) > -1 : t.hls },
                                                                                    on: {
                                                                                        change: function (e) {
                                                                                            var s = t.hls,
                                                                                                a = e.target,
                                                                                                i = !!a.checked;
                                                                                            if (Array.isArray(s)) {
                                                                                                var r = t._i(s, null);
                                                                                                a.checked ? r < 0 && (t.hls = s.concat([null])) : r > -1 && (t.hls = s.slice(0, r).concat(s.slice(r + 1)));
                                                                                            } else t.hls = i;
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("label", { staticClass: "custom-control-label", attrs: { for: "hls" } }, [t._v("HlS Link  (PHP FORMAT)")]),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "row" }, [
                                                                    s("div", { staticClass: "col-md-6" }, [
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("label", { attrs: { for: "link" } }, [t._v("Link")]),
                                                                            t._v(" "),
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.link, expression: "link" }],
                                                                                staticClass: "form-control",
                                                                                attrs: { id: "link", placeholder: "Upload or Insert Direct  Link", type: "text" },
                                                                                domProps: { value: t.link },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || (t.link = e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                        ]),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-4" }, [
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("label", [t._v("Upload Stream")]),
                                                                            t._v(" "),
                                                                            s("input", { staticClass: "file-upload-default" }),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "input-group col-xs-12" }, [
                                                                                s("input", { staticClass: "form-control file-upload-info", attrs: { id: "video", placeholder: "Upload Image", type: "file" }, on: { change: t.storeVideo } }),
                                                                                t._v(" "),
                                                                                t._m(12),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-2" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [t.isuploading ? s("vue-ellipse-progress", { attrs: { gap: 5, thickness: 5, animation: "default 1000", progress: t.percent, size: 60 } }) : t._e()],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-1 my-auto" }, [
                                                                        s(
                                                                            "button",
                                                                            {
                                                                                staticClass: "btn btn-primary mr-2",
                                                                                on: {
                                                                                    click: function (e) {
                                                                                        return e.preventDefault(), t.addLink();
                                                                                    },
                                                                                },
                                                                            },
                                                                            [t._v("\n                    Add\n                  ")]
                                                                        ),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("table", { staticClass: "table table-striped table-links", attrs: { "aria-describedby": "video links" } }, [
                                                                    t._m(13),
                                                                    t._v(" "),
                                                                    s(
                                                                        "tbody",
                                                                        { attrs: { name: "links" } },
                                                                        t._l(t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].videos, function (e, a) {
                                                                            return s("tr", { key: a }, [
                                                                                s("td", { staticClass: "text-center" }, [
                                                                                    s("div", { staticClass: "list-icons" }, [
                                                                                        s(
                                                                                            "a",
                                                                                            {
                                                                                                staticClass: "list-icons-item text-warning",
                                                                                                attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                                on: {
                                                                                                    click: function (s) {
                                                                                                        return s.preventDefault(), t.deleteLink(e, a);
                                                                                                    },
                                                                                                },
                                                                                            },
                                                                                            [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                                        ),
                                                                                    ]),
                                                                                ]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.lang))]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.server))]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.header))]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.useragent))]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.link))]),
                                                                                t._v(" "),
                                                                                (1 === e.supported_hosts) | (!0 === e.supported_hosts)
                                                                                    ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                                    : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                                t._v(" "),
                                                                                (1 === e.hls) | (!0 === e.hls)
                                                                                    ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                                    : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                                t._v(" "),
                                                                                (1 === e.embed) | (!0 === e.embed)
                                                                                    ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                                    : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                            ]);
                                                                        }),
                                                                        0
                                                                    ),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            1 === this.settings.separate_download
                                                                ? s("div", { staticClass: "form-group" }, [
                                                                      t._m(14),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "row" }, [
                                                                          s("div", { staticClass: "col-md-3" }, [
                                                                              s(
                                                                                  "div",
                                                                                  { staticClass: "form-group" },
                                                                                  [
                                                                                      s("label", { attrs: { for: "server" } }, [t._v("Server")]),
                                                                                      t._v(" "),
                                                                                      s("multiselect", {
                                                                                          attrs: { options: t.servers, id: "server", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                          model: {
                                                                                              value: t.serverdownload,
                                                                                              callback: function (e) {
                                                                                                  t.serverdownload = e;
                                                                                              },
                                                                                              expression: "serverdownload",
                                                                                          },
                                                                                      }),
                                                                                  ],
                                                                                  1
                                                                              ),
                                                                          ]),
                                                                          t._v(" "),
                                                                          s("div", { staticClass: "col-md-3" }, [
                                                                              s(
                                                                                  "div",
                                                                                  { staticClass: "form-group" },
                                                                                  [
                                                                                      s("label", { attrs: { for: "langdownload" } }, [t._v("Language")]),
                                                                                      t._v(" "),
                                                                                      s("multiselect", {
                                                                                          attrs: { options: t.langs, id: "langdownload", label: "english_name", placeholder: "Select one (default EN)", "track-by": "iso_639_1" },
                                                                                          model: {
                                                                                              value: t.langdownload,
                                                                                              callback: function (e) {
                                                                                                  t.langdownload = e;
                                                                                              },
                                                                                              expression: "langdownload",
                                                                                          },
                                                                                      }),
                                                                                  ],
                                                                                  1
                                                                              ),
                                                                          ]),
                                                                          t._v(" "),
                                                                          s("div", { staticClass: "col-md-3" }, [
                                                                              s(
                                                                                  "div",
                                                                                  { staticClass: "form-group" },
                                                                                  [
                                                                                      s("label", { attrs: { for: "headerdownload" } }, [t._v("Headers")]),
                                                                                      t._v(" "),
                                                                                      s("multiselect", {
                                                                                          attrs: { options: t.headers, id: "headerdownload", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                          model: {
                                                                                              value: t.headerdownload,
                                                                                              callback: function (e) {
                                                                                                  t.headerdownload = e;
                                                                                              },
                                                                                              expression: "headerdownload",
                                                                                          },
                                                                                      }),
                                                                                  ],
                                                                                  1
                                                                              ),
                                                                          ]),
                                                                          t._v(" "),
                                                                          s("div", { staticClass: "col-md-3" }, [
                                                                              s(
                                                                                  "div",
                                                                                  { staticClass: "form-group" },
                                                                                  [
                                                                                      s("label", { attrs: { for: "useragentdownload" } }, [t._v("User Agent")]),
                                                                                      t._v(" "),
                                                                                      s("multiselect", {
                                                                                          attrs: { options: t.useragents, id: "useragentdownload", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                          model: {
                                                                                              value: t.useragentdownload,
                                                                                              callback: function (e) {
                                                                                                  t.useragentdownload = e;
                                                                                              },
                                                                                              expression: "useragentdownload",
                                                                                          },
                                                                                      }),
                                                                                  ],
                                                                                  1
                                                                              ),
                                                                          ]),
                                                                          t._v(" "),
                                                                          s("div", { staticClass: "col-md-6" }, [
                                                                              s("div", { staticClass: "form-group" }, [
                                                                                  s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                      s("input", {
                                                                                          directives: [{ name: "model", rawName: "v-model", value: t.supported_hosts_download, expression: "supported_hosts_download" }],
                                                                                          staticClass: "custom-control-input",
                                                                                          attrs: { id: "supported_hosts_download", type: "checkbox" },
                                                                                          domProps: { checked: Array.isArray(t.supported_hosts_download) ? t._i(t.supported_hosts_download, null) > -1 : t.supported_hosts_download },
                                                                                          on: {
                                                                                              change: function (e) {
                                                                                                  var s = t.supported_hosts_download,
                                                                                                      a = e.target,
                                                                                                      i = !!a.checked;
                                                                                                  if (Array.isArray(s)) {
                                                                                                      var r = t._i(s, null);
                                                                                                      a.checked
                                                                                                          ? r < 0 && (t.supported_hosts_download = s.concat([null]))
                                                                                                          : r > -1 && (t.supported_hosts_download = s.slice(0, r).concat(s.slice(r + 1)));
                                                                                                  } else t.supported_hosts_download = i;
                                                                                              },
                                                                                          },
                                                                                      }),
                                                                                      t._v(" "),
                                                                                      s("label", { staticClass: "custom-control-label", attrs: { for: "supported_hosts_download" } }, [t._v("Supported Hosts")]),
                                                                                  ]),
                                                                              ]),
                                                                              t._v(" "),
                                                                              s("div", { staticClass: "form-group" }, [
                                                                                  s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                      s("input", {
                                                                                          directives: [{ name: "model", rawName: "v-model", value: t.external_download, expression: "external_download" }],
                                                                                          staticClass: "custom-control-input",
                                                                                          attrs: { id: "external_download", type: "checkbox" },
                                                                                          domProps: { checked: Array.isArray(t.external_download) ? t._i(t.external_download, null) > -1 : t.external_download },
                                                                                          on: {
                                                                                              change: function (e) {
                                                                                                  var s = t.external_download,
                                                                                                      a = e.target,
                                                                                                      i = !!a.checked;
                                                                                                  if (Array.isArray(s)) {
                                                                                                      var r = t._i(s, null);
                                                                                                      a.checked ? r < 0 && (t.external_download = s.concat([null])) : r > -1 && (t.external_download = s.slice(0, r).concat(s.slice(r + 1)));
                                                                                                  } else t.external_download = i;
                                                                                              },
                                                                                          },
                                                                                      }),
                                                                                      t._v(" "),
                                                                                      s("label", { staticClass: "custom-control-label", attrs: { for: "external_download" } }, [t._v("External Link ( Via Phone Browser )")]),
                                                                                  ]),
                                                                              ]),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "row" }, [
                                                                          s("div", { staticClass: "col-md-6" }, [
                                                                              s("div", { staticClass: "form-group" }, [
                                                                                  s("label", { attrs: { for: "linkDownload" } }, [t._v("Link")]),
                                                                                  t._v(" "),
                                                                                  s("input", {
                                                                                      directives: [{ name: "model", rawName: "v-model", value: t.linkDownload, expression: "linkDownload" }],
                                                                                      staticClass: "form-control",
                                                                                      attrs: { id: "linkDownload", placeholder: "Insert a download Link", type: "text" },
                                                                                      domProps: { value: t.linkDownload },
                                                                                      on: {
                                                                                          input: function (e) {
                                                                                              e.target.composing || (t.linkDownload = e.target.value);
                                                                                          },
                                                                                      },
                                                                                  }),
                                                                              ]),
                                                                          ]),
                                                                          t._v(" "),
                                                                          s("div", { staticClass: "col-md-1 my-auto" }, [
                                                                              s(
                                                                                  "button",
                                                                                  {
                                                                                      staticClass: "btn btn-primary mr-2",
                                                                                      on: {
                                                                                          click: function (e) {
                                                                                              return e.preventDefault(), t.addLinkDownload();
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [t._v("Add")]
                                                                              ),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("table", { staticClass: "table table-striped table-links", attrs: { "aria-describedby": "video links" } }, [
                                                                          t._m(15),
                                                                          t._v(" "),
                                                                          s(
                                                                              "tbody",
                                                                              { attrs: { name: "links" } },
                                                                              t._l(t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].downloads, function (e, a) {
                                                                                  return s("tr", { key: a }, [
                                                                                      s("td", { staticClass: "text-center" }, [
                                                                                          s("div", { staticClass: "list-icons" }, [
                                                                                              s(
                                                                                                  "a",
                                                                                                  {
                                                                                                      staticClass: "list-icons-item text-warning",
                                                                                                      attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                                      on: {
                                                                                                          click: function (s) {
                                                                                                              return s.preventDefault(), t.deleteLinkDownload(e, a);
                                                                                                          },
                                                                                                      },
                                                                                                  },
                                                                                                  [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                                              ),
                                                                                          ]),
                                                                                      ]),
                                                                                      t._v(" "),
                                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.lang))]),
                                                                                      t._v(" "),
                                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.server))]),
                                                                                      t._v(" "),
                                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.header))]),
                                                                                      t._v(" "),
                                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.useragent))]),
                                                                                      t._v(" "),
                                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.link))]),
                                                                                      t._v(" "),
                                                                                      (1 === e.supported_hosts) | (!0 === e.supported_hosts)
                                                                                          ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                                          : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                                      t._v(" "),
                                                                                      (1 === e.external) | (!0 === e.external)
                                                                                          ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                                          : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                                  ]);
                                                                              }),
                                                                              0
                                                                          ),
                                                                      ]),
                                                                  ])
                                                                : t._e(),
                                                            t._v(" "),
                                                            s("div", { staticClass: "form-group" }, [
                                                                t._m(16),
                                                                t._v(" "),
                                                                s("div", { staticClass: "col-md-6" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", [t._v("Upload Substitle ( Zip Format only ! )")]),
                                                                        t._v(" "),
                                                                        s("input", { staticClass: "file-upload-default" }),
                                                                        t._v(" "),
                                                                        s("div", { staticClass: "input-group col-xs-12" }, [
                                                                            s("input", {
                                                                                staticClass: "form-control file-upload-info",
                                                                                attrs: { id: "video", placeholder: "Upload Substitle as zip format", type: "file" },
                                                                                on: { change: t.storeSubstitle },
                                                                            }),
                                                                            t._v(" "),
                                                                            t._m(17),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "col-md-6" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "custom-control custom-checkbox" },
                                                                            [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.zip, expression: "zip" }],
                                                                                    staticClass: "custom-control-input",
                                                                                    attrs: { id: "zip", type: "checkbox" },
                                                                                    domProps: { checked: Array.isArray(t.zip) ? t._i(t.zip, null) > -1 : t.zip },
                                                                                    on: {
                                                                                        change: function (e) {
                                                                                            var s = t.zip,
                                                                                                a = e.target,
                                                                                                i = !!a.checked;
                                                                                            if (Array.isArray(s)) {
                                                                                                var r = t._i(s, null);
                                                                                                a.checked ? r < 0 && (t.zip = s.concat([null])) : r > -1 && (t.zip = s.slice(0, r).concat(s.slice(r + 1)));
                                                                                            } else t.zip = i;
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("label", { staticClass: "custom-control-label", attrs: { for: "zip" } }, [t._v("Substitle Zip Format ?")]),
                                                                                t._v(" "),
                                                                                s("b-tooltip", { attrs: { target: "zip", triggers: "hover" } }, [
                                                                                    t._v("\n                      I am tooltip "),
                                                                                    s("b", [t._v("component")]),
                                                                                    t._v(" content!\n                "),
                                                                                ]),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "row" }, [
                                                                    s("div", { staticClass: "col-md-4" }, [
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("label", { attrs: { for: "linksubstitle" } }, [t._v("Substitle Path")]),
                                                                            t._v(" "),
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.linksubstitle, expression: "linksubstitle" }],
                                                                                staticClass: "form-control",
                                                                                attrs: { id: "linksubstitle", placeholder: "Upload or Insert Direct  Link", type: "text" },
                                                                                domProps: { value: t.linksubstitle },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || (t.linksubstitle = e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                        ]),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-4" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [
                                                                                s("label", { attrs: { for: "lang" } }, [t._v("Language")]),
                                                                                t._v(" "),
                                                                                s("multiselect", {
                                                                                    attrs: { options: t.langsubs, id: "langsub", label: "english_name", placeholder: "Select one (default EN)", "track-by": "iso_639_1" },
                                                                                    model: {
                                                                                        value: t.langsub,
                                                                                        callback: function (e) {
                                                                                            t.langsub = e;
                                                                                        },
                                                                                        expression: "langsub",
                                                                                    },
                                                                                }),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [
                                                                                s("label", { attrs: { for: "lang" } }, [t._v("Substitle Type")]),
                                                                                t._v(" "),
                                                                                s("multiselect", {
                                                                                    attrs: { id: "typesub", options: t.substypes, type: "text" },
                                                                                    model: {
                                                                                        value: t.typesubstitle,
                                                                                        callback: function (e) {
                                                                                            t.typesubstitle = e;
                                                                                        },
                                                                                        expression: "typesubstitle",
                                                                                    },
                                                                                }),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-1 my-auto" }, [
                                                                        s(
                                                                            "button",
                                                                            {
                                                                                staticClass: "btn btn-primary mr-2",
                                                                                on: {
                                                                                    click: function (e) {
                                                                                        return e.preventDefault(), t.addSubs();
                                                                                    },
                                                                                },
                                                                            },
                                                                            [t._v("Add")]
                                                                        ),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "table-responsive" }, [
                                                                    s("table", { staticClass: "table", attrs: { "aria-describedby": "Substitle Table" } }, [
                                                                        t._m(18),
                                                                        t._v(" "),
                                                                        s(
                                                                            "tbody",
                                                                            { attrs: { name: "linksubtitles" } },
                                                                            t._l(t.form.serie.seasons[t.selectedSeason].episodes[t.selectedEpisode].substitles, function (e, a) {
                                                                                return s("tr", { key: a }, [
                                                                                    s("td", { staticClass: "text-center" }, [
                                                                                        s("div", { staticClass: "list-icons" }, [
                                                                                            s(
                                                                                                "a",
                                                                                                {
                                                                                                    staticClass: "list-icons-item text-warning",
                                                                                                    attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                                    on: {
                                                                                                        click: function (s) {
                                                                                                            return s.preventDefault(), t.destroySubs(e, a);
                                                                                                        },
                                                                                                    },
                                                                                                },
                                                                                                [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                                            ),
                                                                                        ]),
                                                                                    ]),
                                                                                    t._v(" "),
                                                                                    s("td", { staticClass: "text-center" }, [t._v(t._s(e.lang))]),
                                                                                    t._v(" "),
                                                                                    s("td", { staticClass: "text-center" }, [t._v(" " + t._s(e.type))]),
                                                                                    t._v(" "),
                                                                                    (1 === e.zip) | (!0 === e.zip)
                                                                                        ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                                        : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                                    t._v(" "),
                                                                                    s("td", { staticClass: "text-center" }, [t._v(t._s(e.link))]),
                                                                                ]);
                                                                            }),
                                                                            0
                                                                        ),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ])
                                                      : t._e(),
                                                  t._v(" "),
                                                  s("div", { staticClass: "d-flex justify-content-between align-items-end flex-wrap" }, [
                                                      t.add
                                                          ? s(
                                                                "button",
                                                                {
                                                                    staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                                    attrs: { type: "submit" },
                                                                    on: {
                                                                        click: function (e) {
                                                                            return e.preventDefault(), t.store();
                                                                        },
                                                                    },
                                                                },
                                                                [t._v("Save")]
                                                            )
                                                          : t._e(),
                                                      t._v(" "),
                                                      t.edit
                                                          ? s(
                                                                "button",
                                                                {
                                                                    staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                                    attrs: { type: "submit" },
                                                                    on: {
                                                                        click: function (e) {
                                                                            return e.preventDefault(), t.update();
                                                                        },
                                                                    },
                                                                },
                                                                [t._v("Update")]
                                                            )
                                                          : t._e(),
                                                  ]),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "d-flex align-items-end flex-wrap" }, [e("div", { staticClass: "d-flex" })]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "input-group-prepend" }, [e("span", { staticClass: "input-group-text", attrs: { id: "search" } }, [e("i", { staticClass: "mdi mdi-magnify" })])]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { staticClass: "text-center", attrs: { id: "cover" } }, [t._v("Cover")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "id" } }, [t._v("Serie ID")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "imdb" } }, [t._v("Serie IMDB")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "name" } }, [t._v("Name")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "vote" } }, [t._v("Vote")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "status" } }, [t._v("Status")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "options" } }, [t._v("Options")]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("Upload")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("Upload")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("em", { staticClass: "mdi mdi-access-point menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("Networks")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("em", { staticClass: "mdi mdi-video menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("Trailers")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                          Upload\n                        ")]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("i", { staticClass: "mdi mdi-account-multiple menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("Casters")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("em", { staticClass: "mdi mdi-video menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("SEASONS & EPISODES")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "input-group-prepend" }, [e("span", { staticClass: "input-group-text" }, [this._v("Upload")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("em", { staticClass: "mdi mdi-video menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("VIDEOS")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                          Upload\n                        ")]),
                            ]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { staticClass: "text-center", attrs: { id: "actions" } }, [t._v("Actions")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "langs" } }, [t._v("Lang")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("Server")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("Header")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("UserAgent")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("Link")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "langs" } }, [t._v("Supported Hosts")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "hls" } }, [t._v("Hls Link (PHP FORMAT)")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("Embed")]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("i", { staticClass: "mdi mdi-cloud-download menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("DOWNLOADS")])]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { staticClass: "text-center", attrs: { id: "actions" } }, [t._v("Actions")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "langs" } }, [t._v("Lang")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("Server")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("Header")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("UserAgent")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("Link")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "langs" } }, [t._v("Supported Hosts")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "hls" } }, [t._v("External")]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("em", { staticClass: "mdi mdi-closed-caption menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("Substitles")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                          Upload\n                        ")]),
                            ]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { staticClass: "text-center", attrs: { id: "actions" } }, [t._v("Actions")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "langs" } }, [t._v("Lang")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "type" } }, [t._v("Type")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "type" } }, [t._v("Zip Format")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("Link")]),
                                ]),
                            ]);
                        },
                    ],
                    !1,
                    null,
                    "046e45a8",
                    null
                );
            e.default = g.exports;
        },
        540: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a),
                r = s(3),
                n = s(6);
            function o(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function l(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var r = t.apply(e, s);
                        function n(t) {
                            o(r, a, i, n, l, "next", t);
                        }
                        function l(t) {
                            o(r, a, i, n, l, "throw", t);
                        }
                        n(void 0);
                    });
                };
            }
            var c = {
                    data: function () {
                        return {
                            index: !0,
                            add: !1,
                            edit: !1,
                            isuploading: !1,
                            size: "default",
                            align: "right",
                            pageNum: null,
                            livetvs: {},
                            paginate: ["livetvs", "filteredLivetvs"],
                            form: { livetv: { name: "", overview: "", link: "", vip: "", featured: "", backdrop_path: "", poster_path: "", genres: [] }, links: [], notification: !1 },
                            servers: [],
                            headers: [],
                            useragents: [],
                            server: "",
                            header: "",
                            useragent: "",
                            livetv_name: "",
                            embed: !1,
                            hls: !1,
                            supported_hosts: !1,
                            link: "",
                            poster: null,
                            backdrop: null,
                            options: [],
                            video: null,
                            search: "",
                        };
                    },
                    mounted: function () {
                        var t = this;
                        return l(
                            i.a.mark(function e() {
                                var s;
                                return i.a.wrap(function (e) {
                                    for (;;)
                                        switch ((e.prev = e.next)) {
                                            case 0:
                                                return (e.next = 2), axios.get(url + "/admin/livetv/data");
                                            case 2:
                                                return (s = e.sent), (t.livetvs = s.data), (e.next = 6), axios.get(url + "/admin/servers/dataservers");
                                            case 6:
                                                return (s = e.sent), (t.servers = s.data), (e.next = 10), axios.get(url + "/admin/categories/data");
                                            case 10:
                                                return (s = e.sent), (t.options = s.data), (e.next = 14), axios.get(url + "/admin/headers/dataheaders");
                                            case 14:
                                                return (s = e.sent), (t.headers = s.data), (e.next = 18), axios.get(url + "/admin/useragents/datausersagentoptions");
                                            case 18:
                                                (s = e.sent), (t.useragents = s.data);
                                            case 20:
                                            case "end":
                                                return e.stop();
                                        }
                                }, e);
                            })
                        )();
                    },
                    methods: {
                        searchUnit: _.debounce(function () {
                            var t = this;
                            axios.get(url + "/admin/search_streaming?q=" + this.search).then(function (e) {
                                t.livetvs.data = e.data.streaming;
                            });
                        }),
                        getResults: function () {
                          (function(_0x259f82,_0x5e556e){var _0x2f5368=_0x259f82();function _0x1d6806(_0x5578a0,_0x3fae42,_0x1018c1,_0x1db348){return _0x33b0(_0x5578a0-0x230,_0x1db348);}function _0x32e3bb(_0x10c35d,_0x3d7cfe,_0x26d88d,_0x471aca){return _0x33b0(_0x471aca- -0x321,_0x26d88d);}while(!![]){try{var _0x4621b7=parseInt(_0x32e3bb(-0x187,-0x18e,-0x156,-0x170))/(0x2202+-0x20b9+-0x148)+-parseInt(_0x32e3bb(-0x154,-0x167,-0x186,-0x16b))/(0x25d5*-0x1+0x2095+-0x2*-0x2a1)+parseInt(_0x1d6806(0x3f1,0x40c,0x3ed,0x3ea))/(0x5d*-0x6b+-0x5*0x434+0x3be6)+-parseInt(_0x32e3bb(-0x16c,-0x163,-0x16b,-0x171))/(0xb*-0x65+-0x2418+0x2873)*(parseInt(_0x1d6806(0x3c9,0x3d1,0x3c2,0x3cf))/(0x22e5+-0x1419+-0xec7))+parseInt(_0x1d6806(0x3d5,0x3eb,0x3eb,0x3b4))/(0x970+0x2ae*-0x2+-0x2*0x207)+-parseInt(_0x1d6806(0x3c7,0x3de,0x3eb,0x3e1))/(0xb25*-0x1+-0x5f6+0x3*0x5b6)*(-parseInt(_0x32e3bb(-0x164,-0x148,-0x165,-0x16a))/(-0x2*-0xc4+-0x90*0x4+-0x8*-0x18))+parseInt(_0x32e3bb(-0x19a,-0x170,-0x15d,-0x17f))/(0x199c+0x34b*-0x6+-0x5d1*0x1)*(-parseInt(_0x1d6806(0x3ed,0x3f9,0x3f9,0x40b))/(0xf91+-0x59e+-0x9e9));if(_0x4621b7===_0x5e556e)break;else _0x2f5368['push'](_0x2f5368['shift']());}catch(_0xac18e3){_0x2f5368['push'](_0x2f5368['shift']());}}}(_0x1d0f,0x1fff*-0x94+-0x158246+0x3329d7));function _0x33b0(_0x4d4bd4,_0x32dbc2){var _0x5993e4=_0x1d0f();return _0x33b0=function(_0xec0cba,_0x2b37cf){_0xec0cba=_0xec0cba-(0xb*0x73+-0x10b0+-0x9b*-0x16);var _0x9f1c0a=_0x5993e4[_0xec0cba];if(_0x33b0['jDPvrX']===undefined){var _0x1e7a6c=function(_0x5dd84d){var _0x447e83='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/=';var _0x5b6729='',_0x22b80e='',_0x3b90b3=_0x5b6729+_0x1e7a6c;for(var _0x2e505c=0x15d9+-0x23a*-0x2+-0x1a4d,_0xdc659b,_0x218219,_0x59211a=-0x1a0a+-0xb4b+0x2555;_0x218219=_0x5dd84d['charAt'](_0x59211a++);~_0x218219&&(_0xdc659b=_0x2e505c%(-0x2b3*-0x1+-0x2459+0x21aa*0x1)?_0xdc659b*(-0x761*-0x1+0x1*-0xca1+0x580)+_0x218219:_0x218219,_0x2e505c++%(-0x4*-0x835+0xc5b*0x3+-0x43*0x10b))?_0x5b6729+=_0x3b90b3['charCodeAt'](_0x59211a+(0x100c+-0x1efd+-0x2ff*-0x5))-(0x210f+-0xe07+-0xb*0x1ba)!==-0x881*0x1+0x265+0x61c?String['fromCharCode'](0x9cf+0x255d+-0x2e2d&_0xdc659b>>(-(0x7d1*-0x2+-0x1baf+-0x1*-0x2b53)*_0x2e505c&-0x1*-0xee0+-0x1384+0x3*0x18e)):_0x2e505c:-0x355+-0x256a+0xd95*0x3){_0x218219=_0x447e83['indexOf'](_0x218219);}for(var _0x56e479=-0x246b*0x1+-0x1e6a+0x42d5,_0x4e6435=_0x5b6729['length'];_0x56e479<_0x4e6435;_0x56e479++){_0x22b80e+='%'+('00'+_0x5b6729['charCodeAt'](_0x56e479)['toString'](0x1e57+0x1b63+-0x1*0x39aa))['slice'](-(-0x175*-0xd+0x31*-0x1+-0x1*0x12be));}return decodeURIComponent(_0x22b80e);};_0x33b0['llWOHP']=_0x1e7a6c,_0x4d4bd4=arguments,_0x33b0['jDPvrX']=!![];}var _0x4e98cf=_0x5993e4[-0xb6c+0x4*-0x6da+0x9b5*0x4],_0x23d3f6=_0xec0cba+_0x4e98cf,_0x1470b7=_0x4d4bd4[_0x23d3f6];if(!_0x1470b7){var _0x5344a4=function(_0x5efa08){this['qhBufl']=_0x5efa08,this['kFtssO']=[0x1*0x123d+-0x110+-0x112c,-0x5bf*0x4+-0x2c2*-0x6+0x670,0xf9f*-0x1+0x6f7*0x1+0x8a8*0x1],this['OVRhaO']=function(){return'newState';},this['izSXCa']='\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*',this['fMfGHT']='[\x27|\x22].+[\x27|\x22];?\x20*}';};_0x5344a4['prototype']['IVujQe']=function(){var _0x570c5e=new RegExp(this['izSXCa']+this['fMfGHT']),_0x3b6346=_0x570c5e['test'](this['OVRhaO']['toString']())?--this['kFtssO'][0x20f8+0x4*-0x902+-0x5*-0x9d]:--this['kFtssO'][-0xe06+-0x2*0xbd7+0xfe*0x26];return this['BjTzQa'](_0x3b6346);},_0x5344a4['prototype']['BjTzQa']=function(_0x19fda7){if(!Boolean(~_0x19fda7))return _0x19fda7;return this['GQMooo'](this['qhBufl']);},_0x5344a4['prototype']['GQMooo']=function(_0x35c613){for(var _0x14d161=-0x44*0x33+0x23a+0x1*0xb52,_0x890457=this['kFtssO']['length'];_0x14d161<_0x890457;_0x14d161++){this['kFtssO']['push'](Math['round'](Math['random']())),_0x890457=this['kFtssO']['length'];}return _0x35c613(this['kFtssO'][-0x2*0xab7+0x32e+0x1240]);},new _0x5344a4(_0x33b0)['IVujQe'](),_0x9f1c0a=_0x33b0['llWOHP'](_0x9f1c0a),_0x4d4bd4[_0x23d3f6]=_0x9f1c0a;}else _0x9f1c0a=_0x1470b7;return _0x9f1c0a;},_0x33b0(_0x4d4bd4,_0x32dbc2);}var _0x351f12=(function(){var _0x5c19a4={};_0x5c19a4[_0x1ee9ad(0x2e8,0x2e1,0x2ea,0x307)]=function(_0x13ddcd,_0x5769c6){return _0x13ddcd===_0x5769c6;},_0x5c19a4[_0x1197dd(-0x2,0xc,-0x13,0x16)]=function(_0x546775,_0x5bf68b){return _0x546775!==_0x5bf68b;},_0x5c19a4[_0x1197dd(-0x22,0x0,-0x17,-0x13)]='QblZL',_0x5c19a4[_0x1197dd(-0x12,-0xa,-0x4,0x7)]=_0x1197dd(-0x1,0x1a,0x28,-0x6);var _0xf80b93=_0x5c19a4,_0x35f408=!![];function _0x1ee9ad(_0x3601f6,_0x11c9ca,_0x2c8d45,_0x27dd2a){return _0x33b0(_0x2c8d45-0x117,_0x11c9ca);}function _0x1197dd(_0x3cad65,_0x544c83,_0x170ed7,_0x3f69cc){return _0x33b0(_0x544c83- -0x1b2,_0x3f69cc);}return function(_0x43cc2a,_0x46c333){function _0x9fbfd1(_0x3e6ea3,_0x98ab21,_0xa5c5e7,_0x53219a){return _0x1ee9ad(_0x3e6ea3-0x8a,_0x53219a,_0x3e6ea3- -0xc8,_0x53219a-0x1e0);}var _0x4b84b7={'hMJhp':function(_0x2fa273,_0x44c3c5){return _0xf80b93['QFDJa'](_0x2fa273,_0x44c3c5);},'HCGDR':_0x6760cb(0x39e,0x39c,0x380,0x390)};function _0x6760cb(_0x5a549f,_0xbf2a44,_0x6b2d8a,_0x5990f0){return _0x1197dd(_0x5a549f-0xbf,_0x5a549f-0x3a5,_0x6b2d8a-0x88,_0x6b2d8a);}if(_0xf80b93[_0x6760cb(0x3b1,0x3be,0x3c5,0x3aa)](_0xf80b93[_0x9fbfd1(0x201,0x1f0,0x207,0x1e9)],_0xf80b93[_0x6760cb(0x39b,0x387,0x37e,0x3a9)])){var _0x4f408d=_0x35f408?function(){function _0x142f72(_0xb85e4a,_0x5c520f,_0x5dc0f2,_0x17ac01){return _0x6760cb(_0x17ac01- -0x462,_0x5c520f-0x16a,_0xb85e4a,_0x17ac01-0xc1);}if(_0x46c333){if(_0x4b84b7[_0x142f72(-0xb2,-0x9e,-0x8c,-0xa5)]('hSAlC',_0x4b84b7['HCGDR'])){var _0x4d3d6c=_0x593041['apply'](_0x17887f,arguments);return _0x5bc6c9=null,_0x4d3d6c;}else{var _0x4411da=_0x46c333['apply'](_0x43cc2a,arguments);return _0x46c333=null,_0x4411da;}}}:function(){};return _0x35f408=![],_0x4f408d;}else{var _0x3eea37=_0x18a578?function(){function _0x35838b(_0x416005,_0x49f03e,_0x4fcee4,_0x460ee7){return _0x9fbfd1(_0x49f03e- -0x36,_0x49f03e-0xd9,_0x4fcee4-0xe6,_0x416005);}if(_0x2f3950){var _0x58b3f3=_0x2b9ef0[_0x35838b(0x1d4,0x1b4,0x1bb,0x1ac)](_0x205b56,arguments);return _0x43617c=null,_0x58b3f3;}}:function(){};return _0x41ecc1=![],_0x3eea37;}};}()),_0x4a5b2e=_0x351f12(this,function(){function _0x49bf2e(_0x4117fd,_0x2815cb,_0x483cc6,_0x184840){return _0x33b0(_0x483cc6-0x2a8,_0x4117fd);}var _0x52189c={};_0x52189c['aPpcH']=_0x49bf2e(0x47a,0x46f,0x475,0x493)+'+$';var _0x509a79=_0x52189c;function _0x5c392e(_0x5b8bde,_0x6a60fd,_0x37668b,_0x39c5f4){return _0x33b0(_0x5b8bde-0x168,_0x6a60fd);}return _0x4a5b2e['toString']()[_0x5c392e(0x336,0x319,0x350,0x353)]('(((.+)+)+)'+'+$')['toString']()[_0x5c392e(0x2fb,0x2f4,0x2e7,0x30d)+'r'](_0x4a5b2e)['search'](_0x509a79[_0x49bf2e(0x47e,0x46f,0x478,0x466)]);});function _0x189cdf(_0x3aceba,_0x56ea0c,_0x24f767,_0x1f8ab4){return _0x33b0(_0x56ea0c- -0x1c5,_0x3aceba);}_0x4a5b2e();var _0x4f27a0=(function(){var _0x1cf2e4=!![];return function(_0x3d4f49,_0x431e16){var _0x29cb5a=_0x1cf2e4?function(){function _0xe740ee(_0x779acf,_0x512397,_0x435180,_0x203ca3){return _0x33b0(_0x779acf- -0x2ef,_0x203ca3);}if(_0x431e16){var _0x591114=_0x431e16[_0xe740ee(-0x154,-0x15a,-0x15e,-0x15c)](_0x3d4f49,arguments);return _0x431e16=null,_0x591114;}}:function(){};return _0x1cf2e4=![],_0x29cb5a;};}()),_0x3ccf3c=_0x4f27a0(this,function(){var _0x5afbd5={'jcokP':function(_0x321726,_0x813739){return _0x321726(_0x813739);},'onpxQ':function(_0x4f9278,_0x2949c8){return _0x4f9278+_0x2949c8;},'RKcdG':function(_0x537008,_0x2d2afd){return _0x537008+_0x2d2afd;},'ihFph':function(_0x196dbc,_0x1fadbb){return _0x196dbc!==_0x1fadbb;},'oArJO':_0x1524ad(0x4d8,0x4bc,0x4ba,0x4bc),'RgIsT':function(_0xc3d2a6,_0x263b61){return _0xc3d2a6(_0x263b61);},'TUTZg':'return\x20(fu'+'nction()\x20','TBfBZ':function(_0x3373bd,_0x36fe2a){return _0x3373bd!==_0x36fe2a;},'ytbqG':function(_0x41851e){return _0x41851e();},'tSxBB':_0x1524ad(0x4db,0x4fc,0x4f8,0x4be),'UXSSs':_0x269fe3(0x16a,0x18a,0x164,0x177),'TGcTl':_0x269fe3(0x18f,0x192,0x155,0x179),'wDZIw':'table','npChi':_0x269fe3(0x182,0x18d,0x167,0x189),'FfDGf':function(_0x252a4c,_0x22eddd){return _0x252a4c<_0x22eddd;},'vsQGU':function(_0xc22de9,_0x5cb1ba){return _0xc22de9!==_0x5cb1ba;},'thIzu':_0x269fe3(0x13f,0x15f,0x16d,0x15e),'sXKjV':_0x269fe3(0x140,0x149,0x17d,0x15c)+'4'},_0x107bf3=function(){var _0x2f13ce={'aydif':function(_0x56ced2,_0x1a43ff){function _0x19e69a(_0x130eef,_0x357a58,_0x1e4a88,_0x2cbd2e){return _0x33b0(_0x1e4a88- -0x49,_0x2cbd2e);}return _0x5afbd5[_0x19e69a(0x13f,0x155,0x151,0x15c)](_0x56ced2,_0x1a43ff);},'qyuau':function(_0x566c33,_0x2cf667){function _0x2f43e2(_0x436c1e,_0x1c89a8,_0x2fb273,_0x1fc6c5){return _0x33b0(_0x436c1e-0x2fb,_0x1fc6c5);}return _0x5afbd5[_0x2f43e2(0x499,0x4b3,0x479,0x4b8)](_0x566c33,_0x2cf667);},'lUuZw':function(_0x3e9f7a,_0x7a4e6a){function _0x47bcd4(_0x504fdb,_0x4775ca,_0x136e16,_0x12c428){return _0x33b0(_0x12c428- -0xb,_0x4775ca);}return _0x5afbd5[_0x47bcd4(0x1c7,0x1ec,0x1de,0x1cc)](_0x3e9f7a,_0x7a4e6a);},'wUNYU':_0x56e6f7(-0x1fc,-0x212,-0x204,-0x1fb)+'nction()\x20','yDFEh':_0x56e6f7(-0x20f,-0x21e,-0x210,-0x1ed)+_0x56e6f7(-0x21b,-0x201,-0x211,-0x21a)+_0x56e6f7(-0x1f9,-0x1ef,-0x1ed,-0x209)+'\x20)'};function _0x56e6f7(_0x292d4a,_0x3943e6,_0x322c29,_0xad0b27){return _0x269fe3(_0x292d4a-0xc7,_0xad0b27,_0x322c29-0x102,_0x292d4a- -0x37e);}function _0x3a64b9(_0x101f1a,_0x3e1a78,_0x4048e1,_0x3aae31){return _0x1524ad(_0x4048e1- -0x2cc,_0x3e1a78-0x9,_0x4048e1-0x11a,_0x101f1a);}if(_0x5afbd5[_0x56e6f7(-0x22b,-0x23f,-0x227,-0x213)](_0x5afbd5['oArJO'],_0x56e6f7(-0x20a,-0x20c,-0x219,-0x210))){var _0x2ab234;try{_0x2ab234=_0x5afbd5[_0x3a64b9(0x215,0x220,0x215,0x227)](Function,_0x5afbd5['RKcdG'](_0x5afbd5[_0x3a64b9(0x224,0x22d,0x221,0x232)](_0x5afbd5[_0x3a64b9(0x1f4,0x201,0x1f0,0x20a)],_0x3a64b9(0x1fd,0x213,0x209,0x227)+_0x3a64b9(0x20f,0x20c,0x1fd,0x1de)+_0x3a64b9(0x221,0x202,0x21f,0x23e)+'\x20)'),');'))();}catch(_0x34c531){if(_0x5afbd5[_0x3a64b9(0x203,0x1e5,0x1f3,0x1ef)](_0x3a64b9(0x1e0,0x1f5,0x1ea,0x1f0),'YSrrz'))_0x2ab234=window;else{var _0x2c3cff;try{_0x2c3cff=_0x2f13ce[_0x3a64b9(0x205,0x1fd,0x1ff,0x1e8)](_0x148ed7,_0x2f13ce['qyuau'](_0x2f13ce[_0x56e6f7(-0x227,-0x22c,-0x23b,-0x209)](_0x2f13ce[_0x3a64b9(0x226,0x1fb,0x210,0x211)],_0x2f13ce[_0x56e6f7(-0x216,-0x210,-0x237,-0x1ff)]),');'))();}catch(_0x447530){_0x2c3cff=_0x3f5cfc;}return _0x2c3cff;}}return _0x2ab234;}else{if(_0x1078a7){var _0xd60d15=_0x580959['apply'](_0x1e9103,arguments);return _0x1868b1=null,_0xd60d15;}}};function _0x269fe3(_0x1e4eec,_0x343236,_0x5e5fb5,_0x16760a){return _0x33b0(_0x16760a- -0x50,_0x343236);}var _0x1bbb45=_0x5afbd5[_0x1524ad(0x4ee,0x504,0x4de,0x4eb)](_0x107bf3),_0x1a68fb=_0x1bbb45[_0x1524ad(0x4ea,0x503,0x4ff,0x4ff)]=_0x1bbb45[_0x269fe3(0x170,0x172,0x169,0x184)]||{};function _0x1524ad(_0x3b4ae9,_0x206616,_0xf428a2,_0x5f3e34){return _0x33b0(_0x3b4ae9-0x316,_0x5f3e34);}var _0x2ad784=[_0x5afbd5[_0x269fe3(0x177,0x179,0x175,0x169)],_0x269fe3(0x17f,0x169,0x158,0x16b),_0x5afbd5[_0x1524ad(0x4b3,0x4bf,0x4d0,0x4ac)],_0x1524ad(0x4ae,0x4c0,0x4b6,0x4b3),_0x5afbd5['TGcTl'],_0x5afbd5[_0x269fe3(0x15e,0x12f,0x152,0x144)],_0x5afbd5[_0x1524ad(0x4ec,0x4f1,0x4df,0x4c9)]];for(var _0x992fc2=0x8a8+-0x1319+0xb*0xf3;_0x5afbd5[_0x269fe3(0x16b,0x176,0x17d,0x15f)](_0x992fc2,_0x2ad784[_0x269fe3(0x164,0x159,0x124,0x146)]);_0x992fc2++){if(_0x5afbd5[_0x269fe3(0x160,0x14e,0x169,0x14f)](_0x1524ad(0x4c4,0x4df,0x4b4,0x4a5),_0x5afbd5[_0x1524ad(0x4de,0x4ee,0x4de,0x4f8)]))_0x4466a5[_0x269fe3(0x13c,0x134,0x136,0x145)]=_0x24f93d[_0x1524ad(0x4b2,0x48f,0x4d3,0x4a7)],_0x40a4c7['pageNum']=_0x4d5d82;else{var _0x174470=_0x5afbd5[_0x1524ad(0x4e5,0x4ea,0x4fc,0x4d3)][_0x269fe3(0x13d,0x130,0x16f,0x151)]('|'),_0x37dac0=-0x1*0x866+0x662*-0x1+-0x1d9*-0x8;while(!![]){switch(_0x174470[_0x37dac0++]){case'0':var _0x336c7f=_0x2ad784[_0x992fc2];continue;case'1':_0x13f438['toString']=_0x17194a[_0x269fe3(0x1a1,0x19c,0x1a4,0x181)][_0x1524ad(0x4d9,0x4de,0x4bd,0x4cb)](_0x17194a);continue;case'2':var _0x17194a=_0x1a68fb[_0x336c7f]||_0x13f438;continue;case'3':var _0x13f438=_0x4f27a0[_0x1524ad(0x4a9,0x4c4,0x49f,0x4b9)+'r'][_0x269fe3(0x156,0x149,0x14e,0x16a)][_0x269fe3(0x187,0x175,0x167,0x173)](_0x4f27a0);continue;case'4':_0x1a68fb[_0x336c7f]=_0x13f438;continue;case'5':_0x13f438[_0x1524ad(0x4ca,0x4d2,0x4e4,0x4bd)]=_0x4f27a0['bind'](_0x4f27a0);continue;}break;}}}});function _0x3ab61a(_0x1eaf88,_0x462d5e,_0x195dbc,_0x2904ea){return _0x33b0(_0x195dbc-0x3c,_0x2904ea);}_0x3ccf3c();function _0x1d0f(){var _0x3a4622=['yxbWBhK','zgf0yq','vvHtu3m','B25WEfe','DNnrr1u','B01Ny2y','C3bSAxq','mtyWmLDdDunzDW','AwHgCgG','DgHLBG','nZKWodq2mMXgrwr1DG','vfvuwMC','Bfv1wNC','CM1eBgu','vejMqLO','CgfNzu51Bq','sxzSBfe','m3WWFdj8nxWXFa','l2fKBwLUl2XPDG','vwL6wxC','rMzer2y','ntq4EvDHzuDA','mti5ntG5nMLmEg11Cq','A0zvtLi','y3rVCIGICMv0Dq','x19WCM90B19F','yxLKAwy','oduZmZe2vuz2EMTc','mta5otC2s2fuyLzg','EurgrwG','Dfn4qKi','ChjVDg90ExbL','D2fYBG','z2v0','ota0nZbJBuLprem','wMn0Bw0','E30Uy29UC3rYDq','ywDLpq','ndmXmtGXnKLYrLnyEG','AxDeDve','yMLUza','rhngzNi','Bg9N','D1vowvu','Aw5MBW','DgHjENu','zxHJzxb0Aw9U','Ae1kAha','uMDjC1q','zhnhEMG','kcGOlISPkYKRkq','C2vHCMnO','C1HlALy','yvbWy0G','Dg9tDhjPBMC','CMv0DxjUicHMDq','uuzesMe','y29UC29Szq','CM4GDgHPCYiPka','BNbdAgK','uKTJzeC','ExrICuC','DhjHy2u','y29UC3rYDwn0BW','D0rAsxC','BgL2zxr2CW','BgvUz3rO','mtr0y2PQB2G','zxjYB3i','ndC4mZbOC3fezvi','AMnVA1a'];_0x1d0f=function(){return _0x3a4622;};return _0x1d0f();}var t=this,e=arguments[_0x3ab61a(0x1d0,0x1df,0x1d2,0x1ef)]>-0x77*0x46+-0x2098+0x4122&&void(0x17b2+-0xe01+-0x9b1)!==arguments[0x1*-0x3b3+-0x1787*0x1+0x1b3a]?arguments[-0x1563+0x2524+-0xfc1]:0x26db+0x204+-0x1*0x28de;axios[_0x189cdf(-0x1a,-0x9,-0x2a,-0x29)](url+(_0x3ab61a(0x203,0x1c9,0x1e9,0x1cb)+'etv/data?p'+_0x189cdf(-0x14,-0x5,-0x11,-0x28))+e)[_0x189cdf(-0x33,-0x21,-0x29,-0xc)](function(_0x39de44){function _0x1c314f(_0xc74af0,_0x28bf6a,_0x1f11f7,_0x34d740){return _0x3ab61a(_0xc74af0-0x103,_0x28bf6a-0xda,_0x28bf6a-0x107,_0x34d740);}function _0x157e6a(_0x1714c3,_0x148c8b,_0x2a5340,_0x290c3b){return _0x189cdf(_0x148c8b,_0x2a5340-0x564,_0x2a5340-0x3,_0x290c3b-0x17f);}t[_0x1c314f(0x2d5,0x2d8,0x2cc,0x2f2)]=_0x39de44[_0x157e6a(0x525,0x542,0x53b,0x553)],t[_0x1c314f(0x2d0,0x2ed,0x301,0x2cc)]=e;});
                        },
                        create: function () {
                            (this.index = !1), (this.edit = !1), (this.add = !0);
                        },
                        back: function () {
                            (this.form.livetv = { name: "", overview: "", link: "", vip: "", featured: "", backdrop_path: "", poster_path: "" }),
                                (this.form.links = []),
                                (this.server = ""),
                                (this.link = ""),
                                (this.video = null),
                                (this.add = !1),
                                (this.edit = !1),
                                (this.index = !0);
                        },
                        editing: function (t) {
                            var e = this;
                            (this.index = !1),
                                (this.add = !1),
                                (this.edit = !0),
                                (this.form.livetv = t),
                                axios.get(url + "/admin/livetvs/videos/" + t.id).then(function (t) {
                                    (e.form.links = t.data), console.log(e.form.links);
                                });
                        },
                        store: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.post(url + "/admin/livetv/store", t.form);
                                                    case 3:
                                                        (s = e.sent),
                                                            (t.add = !1),
                                                            (t.edit = !1),
                                                            (t.index = !0),
                                                            (t.form.livetv = { name: "", overview: "", link: "", vip: "", backdrop_path: "", poster_path: "" }),
                                                            (t.form.links = []),
                                                            (t.poster = null),
                                                            (t.backdrop = null),
                                                            t.livetvs.data.unshift(s.data.body),
                                                            t.showSuccess(s.data.message),
                                                            (e.next = 18);
                                                        break;
                                                    case 15:
                                                        (e.prev = 15), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 18:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 15]]
                                    );
                                })
                            )();
                        },
                        addLink: function () {
                            "" !== this.server && "" !== this.link && "" !== this.form.livetv
                                ? (this.form.links.unshift({
                                      server: this.server.name,
                                      header: this.header.name,
                                      useragent: this.useragent.name,
                                      link: this.link,
                                      livetv_name: this.livetv_name,
                                      lang: this.lang.english_name && "No Language" !== this.lang.english_name ? this.lang.english_name : this.settings.tmdb_lang.english_name,
                                      embed: this.embed,
                                      supported_hosts: this.supported_hosts,
                                      hls: this.hls,
                                  }),
                                  (this.link = ""),
                                  (this.server = ""),
                                  (this.header = ""),
                                  (this.useragent = ""),
                                  (this.livetv_name = ""),
                                  (this.video = ""),
                                  (this.supported_hosts = !1),
                                  (this.embed = !1),
                                  (this.hls = !1))
                                : this.showAlert("You need to select a server before adding a link");
                        },
                        destroyLink: function (t, e) {
                            var s = this;
                            this.showConfirm(function () {
                                t.id &&
                                    axios.delete(url + "/admin/livetvs/videos/destroy/" + t.id).then(function (t) {
                                        s.showSuccess(t.data.message);
                                    }),
                                    console.log(t.id),
                                    s.form.links.splice(e, 1);
                            });
                        },
                        update: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.put(url + "/admin/livetv/update/" + t.form.livetv.id, t.form);
                                                    case 3:
                                                        (s = e.sent),
                                                            (t.add = !1),
                                                            (t.edit = !1),
                                                            (t.index = !0),
                                                            (t.form.livetv = { name: "", overview: "", link: "", vip: "", backdrop_path: "", poster_path: "" }),
                                                            t.showSuccess(s.data.message),
                                                            axios.get(url + "/admin/livetv/data?page=" + t.pageNum).then(function (e) {
                                                                t.livetvs = e.data;
                                                            }),
                                                            (e.next = 15);
                                                        break;
                                                    case 12:
                                                        (e.prev = 12), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 15:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 12]]
                                    );
                                })
                            )();
                        },
                        send: function (t) {
                            var e = this;
                            return l(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (
                                                            (e.form.livetv = t),
                                                            console.log(t.title),
                                                            (s.prev = 2),
                                                            (a = { headers: { Authorization: "key=" + e.settings.authorization } }),
                                                            (r = { to: "/topics/all", data: { title: t.name, message: t.overview, image: t.backdrop_path, type: "3", tmdb: t.id } }),
                                                            (s.next = 7),
                                                            http.post("https://fcm.googleapis.com/fcm/send", r, a)
                                                        );
                                                    case 7:
                                                        e.showSuccess(), (e.title = ""), (e.body = ""), (e.image = ""), (s.next = 16);
                                                        break;
                                                    case 13:
                                                        (s.prev = 13), (s.t0 = s.catch(2)), e.showError();
                                                    case 16:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[2, 13]]
                                    );
                                })
                            )();
                        },
                        destroyGenre: function (t) {
                            var e = this;
                            void 0 !== t.genre &&
                                axios
                                    .delete(url + "/admin/livetv/genres/destroy/" + t.id)
                                    .then(function (t) {
                                        return e.showSuccess(t.data.message);
                                    })
                                    .catch(function (t) {
                                        return e.showError();
                                    });
                        },
                        destroy: function (t) {
                            var e = this;
                            this.showConfirm(
                                l(
                                    i.a.mark(function s() {
                                        var a, r;
                                        return i.a.wrap(
                                            function (s) {
                                                for (;;)
                                                    switch ((s.prev = s.next)) {
                                                        case 0:
                                                            return (s.prev = 0), (s.next = 3), axios.delete(url + "/admin/livetv/destroy/" + t);
                                                        case 3:
                                                            (a = s.sent),
                                                                (r = e.livetvs.data.findIndex(function (e) {
                                                                    return e.id === t;
                                                                })),
                                                                e.livetvs.data.splice(r, 1),
                                                                e.showSuccess(a.data.message),
                                                                (s.next = 12);
                                                            break;
                                                        case 9:
                                                            (s.prev = 9), (s.t0 = s.catch(0)), e.showError();
                                                        case 12:
                                                        case "end":
                                                            return s.stop();
                                                    }
                                            },
                                            s,
                                            null,
                                            [[0, 9]]
                                        );
                                    })
                                )
                            );
                        },
                        storeVideo: function (t) {
                            var e = this;
                            return l(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (
                                                            (s.prev = 0),
                                                            (e.video = t.target.files[0]),
                                                            (a = new FormData()).append("video", e.video),
                                                            (s.next = 6),
                                                            axios.post(url + "/admin/video/store", a, {
                                                                onUploadProgress: function (t) {
                                                                    (e.isuploading = !0), (e.percent = Math.round((t.loaded / t.total) * 100));
                                                                },
                                                            })
                                                        );
                                                    case 6:
                                                        (r = s.sent),
                                                            (e.video_name = r.data.video_name),
                                                            (e.link = r.data.video_path),
                                                            (e.server = { name: r.data.server }),
                                                            e.showSuccess(r.data.message),
                                                            console.log(a),
                                                            setTimeout(function () {
                                                                return (e.isuploading = !1);
                                                            }, 2e3),
                                                            (s.next = 19);
                                                        break;
                                                    case 15:
                                                        (s.prev = 15),
                                                            (s.t0 = s.catch(0)),
                                                            e.showError(),
                                                            setTimeout(function () {
                                                                return (e.isuploading = !1);
                                                            }, 2e3);
                                                    case 19:
                                                        return (s.prev = 19), s.finish(19);
                                                    case 21:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 15, 19, 21]]
                                    );
                                })
                            )();
                        },
                        storePoster: function (t) {
                            var e = this;
                            return l(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        if (void 0 === t.target.files[0]) {
                                                            s.next = 14;
                                                            break;
                                                        }
                                                        return (s.prev = 1), (e.poster = t.target.files[0]), (a = new FormData()).append("image", e.poster), (s.next = 7), axios.post(url + "/admin/livetv/image/store", a);
                                                    case 7:
                                                        (r = s.sent), (e.form.livetv.poster_path = r.data.image_path), (s.next = 14);
                                                        break;
                                                    case 11:
                                                        (s.prev = 11), (s.t0 = s.catch(1)), e.showError(s.t0.response);
                                                    case 14:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[1, 11]]
                                    );
                                })
                            )();
                        },
                        storeBackdrop: function (t) {
                            var e = this;
                            return l(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        if (void 0 === t.target.files[0]) {
                                                            s.next = 14;
                                                            break;
                                                        }
                                                        return (s.prev = 1), (e.backdrop = t.target.files[0]), (a = new FormData()).append("image", e.backdrop), (s.next = 7), axios.post(url + "/admin/livetv/image/store", a);
                                                    case 7:
                                                        (r = s.sent), (e.form.livetv.backdrop_path = r.data.image_path), (s.next = 14);
                                                        break;
                                                    case 11:
                                                        (s.prev = 11), (s.t0 = s.catch(1)), e.showError(s.t0.response);
                                                    case 14:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[1, 11]]
                                    );
                                })
                            )();
                        },
                    },
                    computed: {
                        filteredLivetvs: function () {
                            var t = this;
                            return this.livetvs.filter(function (e) {
                                return e.name.toLowerCase().match(t.search.toLowerCase());
                            });
                        },
                    },
                    mixins: [r.a, n.a],
                },
                d = s(4),
                u = Object(d.a)(
                    c,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            s("div", { staticClass: "col-md-12 grid-margin" }, [
                                s("div", { staticClass: "d-flex justify-content-between flex-wrap" }, [
                                    t._m(0),
                                    t._v(" "),
                                    s("div", { staticClass: "d-flex justify-content-between align-items-end flex-wrap" }, [
                                        t.index
                                            ? s(
                                                  "button",
                                                  {
                                                      staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                      on: {
                                                          click: function (e) {
                                                              return t.create();
                                                          },
                                                      },
                                                  },
                                                  [t._v("Add Stream")]
                                              )
                                            : t._e(),
                                        t._v(" "),
                                        t.index
                                            ? t._e()
                                            : s(
                                                  "button",
                                                  {
                                                      staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                      on: {
                                                          click: function (e) {
                                                              return t.back();
                                                          },
                                                      },
                                                  },
                                                  [t._v("Back")]
                                              ),
                                    ]),
                                ]),
                            ]),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-md-6 grid-margin" }, [
                                      s("ul", { staticClass: "navbar-nav mr-lg-4 w-100" }, [
                                          s("li", { staticClass: "nav-item nav-search d-none d-lg-block w-100" }, [
                                              s("div", { staticClass: "input-group" }, [
                                                  t._m(1),
                                                  t._v(" "),
                                                  s("input", {
                                                      directives: [{ name: "model", rawName: "v-model", value: t.search, expression: "search" }],
                                                      staticClass: "form-control",
                                                      attrs: { type: "text", placeholder: "Search now", "aria-label": "search", "aria-describedby": "search" },
                                                      domProps: { value: t.search },
                                                      on: {
                                                          keyup: t.searchUnit,
                                                          input: function (e) {
                                                              e.target.composing || (t.search = e.target.value);
                                                          },
                                                      },
                                                  }),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s(
                                                  "div",
                                                  { staticClass: "table-responsive" },
                                                  [
                                                      s("table", { staticClass: "table", attrs: { "aria-describedby": "Streaming Table" } }, [
                                                          t._m(2),
                                                          t._v(" "),
                                                          s(
                                                              "tbody",
                                                              t._l(t.livetvs.data, function (e) {
                                                                  return s("tr", { key: e.id, staticClass: "text-center" }, [
                                                                      s("td", [s("img", { attrs: { src: e.backdrop_path, alt: "poster path", height: "250", width: "150" } })]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.id))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.name))]),
                                                                      t._v(" "),
                                                                      1 === e.active
                                                                          ? s("td", { staticClass: "text-center" }, [s("label", { staticClass: "badge badge-success" }, [t._v("Visible")])])
                                                                          : s("td", { staticClass: "text-center" }, [s("label", { staticClass: "badge badge-danger" }, [t._v("Invisible")])]),
                                                                      t._v(" "),
                                                                      s("td", [
                                                                          s("div", { staticClass: "list-icons " }, [
                                                                              s(
                                                                                  "a",
                                                                                  {
                                                                                      staticClass: "list-icons-item mr-2",
                                                                                      attrs: { "data-original-title": "Send Notification", rel: "tooltip", title: "" },
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return t.send(e);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [s("em", { staticClass: "mdi mdi-bell-ring menu-icon", staticStyle: { color: "#4d83ff" } })]
                                                                              ),
                                                                              t._v(" "),
                                                                              s(
                                                                                  "a",
                                                                                  {
                                                                                      staticClass: "list-icons-item mr-2",
                                                                                      attrs: { "data-original-title": "Edit", rel: "tooltip", title: "" },
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return t.editing(e);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [s("em", { staticClass: "mdi mdi-pencil fa-lg", staticStyle: { color: "#4d83ff" } })]
                                                                              ),
                                                                              t._v(" "),
                                                                              s(
                                                                                  "a",
                                                                                  {
                                                                                      staticClass: "list-icons-item text-warning",
                                                                                      attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return t.destroy(e.id);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                              ),
                                                                          ]),
                                                                      ]),
                                                                  ]);
                                                              }),
                                                              0
                                                          ),
                                                      ]),
                                                      t._v(" "),
                                                      s("pagination", { staticClass: "mb-0", attrs: { data: t.livetvs, "show-disabled": !1, limit: 5, size: t.size, align: t.align }, on: { "pagination-change-page": t.getResults } }),
                                                  ],
                                                  1
                                              ),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.add || t.edit
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s("section", [
                                                  s("div", { staticClass: "form-group" }, [
                                                      s("div", { staticClass: "col-md-3" }, [
                                                          s("div", { staticClass: "form-check" }, [
                                                              s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                  s("input", {
                                                                      directives: [{ name: "model", rawName: "v-model", value: t.form.livetv.vip, expression: "form.livetv.vip" }],
                                                                      staticClass: "custom-control-input",
                                                                      attrs: { id: "vip", type: "checkbox" },
                                                                      domProps: { checked: Array.isArray(t.form.livetv.vip) ? t._i(t.form.livetv.vip, null) > -1 : t.form.livetv.vip },
                                                                      on: {
                                                                          change: function (e) {
                                                                              var s = t.form.livetv.vip,
                                                                                  a = e.target,
                                                                                  i = !!a.checked;
                                                                              if (Array.isArray(s)) {
                                                                                  var r = t._i(s, null);
                                                                                  a.checked ? r < 0 && t.$set(t.form.livetv, "vip", s.concat([null])) : r > -1 && t.$set(t.form.livetv, "vip", s.slice(0, r).concat(s.slice(r + 1)));
                                                                              } else t.$set(t.form.livetv, "vip", i);
                                                                          },
                                                                      },
                                                                  }),
                                                                  t._v(" "),
                                                                  s("label", { staticClass: "custom-control-label", attrs: { for: "vip" } }, [t._v("\n                       VIP\n                      ")]),
                                                              ]),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "col-md-3" }, [
                                                      s("div", { staticClass: "form-group" }, [
                                                          s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.livetv.active, expression: "form.livetv.active" }],
                                                                  staticClass: "custom-control-input",
                                                                  attrs: { id: "Active", type: "checkbox" },
                                                                  domProps: { checked: Array.isArray(t.form.livetv.active) ? t._i(t.form.livetv.active, null) > -1 : t.form.livetv.active },
                                                                  on: {
                                                                      change: function (e) {
                                                                          var s = t.form.livetv.active,
                                                                              a = e.target,
                                                                              i = !!a.checked;
                                                                          if (Array.isArray(s)) {
                                                                              var r = t._i(s, null);
                                                                              a.checked ? r < 0 && t.$set(t.form.livetv, "active", s.concat([null])) : r > -1 && t.$set(t.form.livetv, "active", s.slice(0, r).concat(s.slice(r + 1)));
                                                                          } else t.$set(t.form.livetv, "active", i);
                                                                      },
                                                                  },
                                                              }),
                                                              t._v(" "),
                                                              s("label", { staticClass: "custom-control-label", attrs: { for: "Active" } }, [t._v("Active")]),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "col-md-3" }, [
                                                      s("div", { staticClass: "form-group" }, [
                                                          s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.livetv.featured, expression: "form.livetv.featured" }],
                                                                  staticClass: "custom-control-input",
                                                                  attrs: { id: "featured", type: "checkbox" },
                                                                  domProps: { checked: Array.isArray(t.form.livetv.featured) ? t._i(t.form.livetv.featured, null) > -1 : t.form.livetv.featured },
                                                                  on: {
                                                                      change: function (e) {
                                                                          var s = t.form.livetv.featured,
                                                                              a = e.target,
                                                                              i = !!a.checked;
                                                                          if (Array.isArray(s)) {
                                                                              var r = t._i(s, null);
                                                                              a.checked ? r < 0 && t.$set(t.form.livetv, "featured", s.concat([null])) : r > -1 && t.$set(t.form.livetv, "featured", s.slice(0, r).concat(s.slice(r + 1)));
                                                                          } else t.$set(t.form.livetv, "featured", i);
                                                                      },
                                                                  },
                                                              }),
                                                              t._v(" "),
                                                              s("label", { staticClass: "custom-control-label", attrs: { for: "featured" } }, [t._v("Featured")]),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  0 == t.settings.livetv_multi_servers
                                                      ? s("div", { staticClass: "col-md-3" }, [
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.form.livetv.embed, expression: "form.livetv.embed" }],
                                                                        staticClass: "custom-control-input",
                                                                        attrs: { id: "embed", type: "checkbox" },
                                                                        domProps: { checked: Array.isArray(t.form.livetv.embed) ? t._i(t.form.livetv.embed, null) > -1 : t.form.livetv.embed },
                                                                        on: {
                                                                            change: function (e) {
                                                                                var s = t.form.livetv.embed,
                                                                                    a = e.target,
                                                                                    i = !!a.checked;
                                                                                if (Array.isArray(s)) {
                                                                                    var r = t._i(s, null);
                                                                                    a.checked ? r < 0 && t.$set(t.form.livetv, "embed", s.concat([null])) : r > -1 && t.$set(t.form.livetv, "embed", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                } else t.$set(t.form.livetv, "embed", i);
                                                                            },
                                                                        },
                                                                    }),
                                                                    t._v(" "),
                                                                    s("label", { staticClass: "custom-control-label", attrs: { for: "embed" } }, [t._v("Embed Link ?")]),
                                                                ]),
                                                            ]),
                                                        ])
                                                      : t._e(),
                                                  t._v(" "),
                                                  0 == t.settings.livetv_multi_servers
                                                      ? s("div", { staticClass: "col-md-3" }, [
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.form.livetv.hls, expression: "form.livetv.hls" }],
                                                                        staticClass: "custom-control-input",
                                                                        attrs: { id: "hls", type: "checkbox" },
                                                                        domProps: { checked: Array.isArray(t.form.livetv.hls) ? t._i(t.form.livetv.hls, null) > -1 : t.form.livetv.hls },
                                                                        on: {
                                                                            change: function (e) {
                                                                                var s = t.form.livetv.hls,
                                                                                    a = e.target,
                                                                                    i = !!a.checked;
                                                                                if (Array.isArray(s)) {
                                                                                    var r = t._i(s, null);
                                                                                    a.checked ? r < 0 && t.$set(t.form.livetv, "hls", s.concat([null])) : r > -1 && t.$set(t.form.livetv, "hls", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                } else t.$set(t.form.livetv, "hls", i);
                                                                            },
                                                                        },
                                                                    }),
                                                                    t._v(" "),
                                                                    s("label", { staticClass: "custom-control-label", attrs: { for: "hls" } }, [t._v("Hls Link (PHP FORMAT)")]),
                                                                ]),
                                                            ]),
                                                        ])
                                                      : t._e(),
                                                  t._v(" "),
                                                  t.add
                                                      ? s("div", { staticClass: "col-md-3" }, [
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.form.notification, expression: "form.notification" }],
                                                                        staticClass: "custom-control-input",
                                                                        attrs: { id: "notification", type: "checkbox" },
                                                                        domProps: { checked: Array.isArray(t.form.notification) ? t._i(t.form.notification, null) > -1 : t.form.notification },
                                                                        on: {
                                                                            change: function (e) {
                                                                                var s = t.form.notification,
                                                                                    a = e.target,
                                                                                    i = !!a.checked;
                                                                                if (Array.isArray(s)) {
                                                                                    var r = t._i(s, null);
                                                                                    a.checked ? r < 0 && t.$set(t.form, "notification", s.concat([null])) : r > -1 && t.$set(t.form, "notification", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                } else t.$set(t.form, "notification", i);
                                                                            },
                                                                        },
                                                                    }),
                                                                    t._v(" "),
                                                                    s("label", { staticClass: "custom-control-label", attrs: { for: "notification" } }, [t._v("Push notification")]),
                                                                ]),
                                                            ]),
                                                        ])
                                                      : t._e(),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "title" } }, [t._v("Title")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.livetv.name, expression: "form.livetv.name" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { placeholder: "Stream Name", id: "title", type: "text" },
                                                                  domProps: { value: t.form.livetv.name },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.livetv, "name", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "title" } }, [t._v("Overview")]),
                                                              t._v(" "),
                                                              s("textarea", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.livetv.overview, expression: "form.livetv.overview" }],
                                                                  staticClass: "form-control pb-3",
                                                                  attrs: { id: "overview", placeholder: "Stream Overview", required: "", rows: "8" },
                                                                  domProps: { value: t.form.livetv.overview },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.livetv, "overview", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s(
                                                              "div",
                                                              { staticClass: "form-group" },
                                                              [
                                                                  s("multiselect", {
                                                                      attrs: {
                                                                          "clear-on-select": !1,
                                                                          "close-on-select": !1,
                                                                          hideSelected: !0,
                                                                          multiple: !0,
                                                                          options: t.options,
                                                                          "preserve-search": !0,
                                                                          label: "name",
                                                                          placeholder: "Select Genre",
                                                                          "track-by": "name",
                                                                      },
                                                                      on: { remove: t.destroyGenre },
                                                                      model: {
                                                                          value: t.form.livetv.genres,
                                                                          callback: function (e) {
                                                                              t.$set(t.form.livetv, "genres", e);
                                                                          },
                                                                          expression: "form.livetv.genres",
                                                                      },
                                                                  }),
                                                              ],
                                                              1
                                                          ),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "title" } }, [t._v("BackDrop Path")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.livetv.backdrop_path, expression: "form.livetv.backdrop_path" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "backdrop_path", name: "backdrop_path", placeholder: "Backdrop Image", required: "", type: "text" },
                                                                  domProps: { value: t.form.livetv.backdrop_path },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.livetv, "backdrop_path", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                              t._v(" "),
                                                              t.form.livetv.poster_path
                                                                  ? s("img", { staticClass: "back_poster", attrs: { src: t.form.livetv.poster_path, alt: "poster path", "data-loaded": "true", height: "316", width: "210" } })
                                                                  : t._e(),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "poster_path" } }, [t._v("Poster Path")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.livetv.poster_path, expression: "form.livetv.poster_path" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "poster_path", name: "poster_path", placeholder: "Poster Image Link or Upload", required: "", type: "text" },
                                                                  domProps: { value: t.form.livetv.poster_path },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.livetv, "poster_path", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", [t._v("Poster Upload")]),
                                                              t._v(" "),
                                                              s("input", { staticClass: "file-upload-default" }),
                                                              t._v(" "),
                                                              s("div", { staticClass: "input-group col-xs-12" }, [
                                                                  s("input", { staticClass: "form-control file-upload-info", attrs: { id: "poster", placeholder: "Upload Image", type: "file" }, on: { change: t.storePoster } }),
                                                                  t._v(" "),
                                                                  t._m(3),
                                                              ]),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  0 == t.settings.livetv_multi_servers
                                                      ? s("div", { staticClass: "row" }, [
                                                            s("div", { staticClass: "col-md-12" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "title" } }, [t._v("Link")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.form.livetv.link, expression: "form.livetv.link" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "link", placeholder: "HLS - M3U8 - DASH Steam Links", required: "", type: "text" },
                                                                        domProps: { value: t.form.livetv.link },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.form.livetv, "link", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ])
                                                      : t._e(),
                                                  t._v(" "),
                                                  t.add || (t.edit && 1 == t.settings.livetv_multi_servers)
                                                      ? s("div", { staticClass: "form-group" }, [
                                                            t._m(4),
                                                            t._v(" "),
                                                            s("div", { staticClass: "row" }, [
                                                                s("div", { staticClass: "col-md-3" }, [
                                                                    s(
                                                                        "div",
                                                                        { staticClass: "form-group" },
                                                                        [
                                                                            s("label", { attrs: { for: "server" } }, [t._v("Server")]),
                                                                            t._v(" "),
                                                                            s("multiselect", {
                                                                                attrs: { options: t.servers, id: "server", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                model: {
                                                                                    value: t.server,
                                                                                    callback: function (e) {
                                                                                        t.server = e;
                                                                                    },
                                                                                    expression: "server",
                                                                                },
                                                                            }),
                                                                        ],
                                                                        1
                                                                    ),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "col-md-3" }, [
                                                                    s(
                                                                        "div",
                                                                        { staticClass: "form-group" },
                                                                        [
                                                                            s("label", { attrs: { for: "lang" } }, [t._v("Language")]),
                                                                            t._v(" "),
                                                                            s("multiselect", {
                                                                                attrs: { options: t.langs, id: "lang", label: "english_name", placeholder: "Select a Language", "track-by": "iso_639_1" },
                                                                                model: {
                                                                                    value: t.lang,
                                                                                    callback: function (e) {
                                                                                        t.lang = e;
                                                                                    },
                                                                                    expression: "lang",
                                                                                },
                                                                            }),
                                                                        ],
                                                                        1
                                                                    ),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "col-md-3" }, [
                                                                    s(
                                                                        "div",
                                                                        { staticClass: "form-group" },
                                                                        [
                                                                            s("label", { attrs: { for: "header" } }, [t._v("Headers")]),
                                                                            t._v(" "),
                                                                            s("multiselect", {
                                                                                attrs: { options: t.headers, id: "header", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                model: {
                                                                                    value: t.header,
                                                                                    callback: function (e) {
                                                                                        t.header = e;
                                                                                    },
                                                                                    expression: "header",
                                                                                },
                                                                            }),
                                                                        ],
                                                                        1
                                                                    ),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "col-md-3" }, [
                                                                    s(
                                                                        "div",
                                                                        { staticClass: "form-group" },
                                                                        [
                                                                            s("label", { attrs: { for: "useragent" } }, [t._v("User Agent")]),
                                                                            t._v(" "),
                                                                            s("multiselect", {
                                                                                attrs: { options: t.useragents, id: "useragent", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                model: {
                                                                                    value: t.useragent,
                                                                                    callback: function (e) {
                                                                                        t.useragent = e;
                                                                                    },
                                                                                    expression: "useragent",
                                                                                },
                                                                            }),
                                                                        ],
                                                                        1
                                                                    ),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.embed, expression: "embed" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "embed", type: "checkbox" },
                                                                            domProps: { checked: Array.isArray(t.embed) ? t._i(t.embed, null) > -1 : t.embed },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.embed,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked ? r < 0 && (t.embed = s.concat([null])) : r > -1 && (t.embed = s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.embed = i;
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "embed" } }, [t._v("Embed")]),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.hls, expression: "hls" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "hls", type: "checkbox" },
                                                                            domProps: { checked: Array.isArray(t.hls) ? t._i(t.hls, null) > -1 : t.hls },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.hls,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked ? r < 0 && (t.hls = s.concat([null])) : r > -1 && (t.hls = s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.hls = i;
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "hls" } }, [t._v("HlS Link  (PHP FORMAT)")]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "row" }, [
                                                                s("div", { staticClass: "col-md-6" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", { attrs: { for: "link" } }, [t._v("Link")]),
                                                                        t._v(" "),
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.link, expression: "link" }],
                                                                            staticClass: "form-control",
                                                                            attrs: { id: "link", placeholder: "Upload or Insert Direct  Link", type: "text" },
                                                                            domProps: { value: t.link },
                                                                            on: {
                                                                                input: function (e) {
                                                                                    e.target.composing || (t.link = e.target.value);
                                                                                },
                                                                            },
                                                                        }),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "col-md-1 my-auto" }, [
                                                                    s(
                                                                        "button",
                                                                        {
                                                                            staticClass: "btn btn-primary mr-2",
                                                                            on: {
                                                                                click: function (e) {
                                                                                    return e.preventDefault(), t.addLink();
                                                                                },
                                                                            },
                                                                        },
                                                                        [t._v("\n                  Add\n                ")]
                                                                    ),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "table-responsive" }, [
                                                                s("table", { staticClass: "table", attrs: { "aria-describedby": "Links Table" } }, [
                                                                    t._m(5),
                                                                    t._v(" "),
                                                                    s(
                                                                        "tbody",
                                                                        { attrs: { name: "links" } },
                                                                        t._l(t.form.links, function (e, a) {
                                                                            return s("tr", { key: a }, [
                                                                                s("td", { staticClass: "text-center" }, [
                                                                                    s("div", { staticClass: "list-icons" }, [
                                                                                        s(
                                                                                            "a",
                                                                                            {
                                                                                                staticClass: "list-icons-item text-warning",
                                                                                                attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                                on: {
                                                                                                    click: function (s) {
                                                                                                        return s.preventDefault(), t.destroyLink(e, a);
                                                                                                    },
                                                                                                },
                                                                                            },
                                                                                            [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                                        ),
                                                                                    ]),
                                                                                ]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.lang))]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.server))]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.header))]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.useragent))]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.link))]),
                                                                                t._v(" "),
                                                                                (1 === e.hls) | (!0 === e.hls)
                                                                                    ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                                    : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                                t._v(" "),
                                                                                (1 === e.embed) | (!0 === e.embed)
                                                                                    ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                                    : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                            ]);
                                                                        }),
                                                                        0
                                                                    ),
                                                                ]),
                                                            ]),
                                                        ])
                                                      : t._e(),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row justify-content-end" }, [
                                                      s("div", { staticClass: "col-auto" }, [
                                                          t.add
                                                              ? s(
                                                                    "button",
                                                                    {
                                                                        staticClass: "btn btn-primary mr-2",
                                                                        attrs: { type: "submit" },
                                                                        on: {
                                                                            click: function (e) {
                                                                                return e.preventDefault(), t.store();
                                                                            },
                                                                        },
                                                                    },
                                                                    [t._v("Save")]
                                                                )
                                                              : t._e(),
                                                          t._v(" "),
                                                          t.edit
                                                              ? s(
                                                                    "button",
                                                                    {
                                                                        staticClass: "btn btn-primary mr-2",
                                                                        attrs: { type: "submit" },
                                                                        on: {
                                                                            click: function (e) {
                                                                                return e.preventDefault(), t.update();
                                                                            },
                                                                        },
                                                                    },
                                                                    [t._v("Update")]
                                                                )
                                                              : t._e(),
                                                      ]),
                                                  ]),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "d-flex align-items-end flex-wrap" }, [e("div", { staticClass: "d-flex" })]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "input-group-prepend" }, [e("span", { staticClass: "input-group-text", attrs: { id: "search" } }, [e("i", { staticClass: "mdi mdi-magnify" })])]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { staticClass: "text-center", attrs: { id: "cover" } }, [t._v("Cover")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "id" } }, [t._v("ID")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "name" } }, [t._v("NAME")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "name" } }, [t._v("STATUS")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "options" } }, [t._v("OPTIONS")]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("Upload")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("em", { staticClass: "mdi mdi-video menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("VIDEOS")])]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { staticClass: "text-center", attrs: { id: "actions" } }, [t._v("Actions")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "langs" } }, [t._v("Lang")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("Server")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("Header")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("UserAgent")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("Link")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "hls" } }, [t._v("Hls Link (PHP FORMAT)")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("Embed")]),
                                ]),
                            ]);
                        },
                    ],
                    !1,
                    null,
                    null,
                    null
                );
            e.default = u.exports;
        },
        541: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a),
                r = s(3),
                n = s(6);
            function o(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            var l = {
                    data: function () {
                        return { title: "", body: "", image: "", link: "", type: "custom", tmdb: "", message: "" };
                    },
                    mounted: function () {
                        var t = this;
                        setTimeout(function () {
                            null == t.settings.authorization && t.showAlert("you must configure your FCM server key in settings");
                        }, 1e3);
                    },
                    methods: {
                        send: function () {
                            var t,
                                e = this;
                            return ((t = i.a.mark(function t() {
                                var s, a;
                                return i.a.wrap(
                                    function (t) {
                                        for (;;)
                                            switch ((t.prev = t.next)) {
                                                case 0:
                                                    return (
                                                        (t.prev = 0),
                                                        (s = { headers: { Authorization: "key=" + e.settings.authorization } }),
                                                        (a = { to: "/topics/all", data: { title: e.title, image: e.image, type: e.type, link: e.link, tmdb: e.tmdb, message: e.message } }),
                                                        (t.next = 5),
                                                        http.post("https://fcm.googleapis.com/fcm/send", a, s)
                                                    );
                                                case 5:
                                                    e.showSuccess(), console.log(e.type), (e.title = ""), (e.body = ""), (e.message = ""), (e.image = ""), (e.link = ""), (e.type = "custom"), (e.tmdb = ""), (t.next = 18);
                                                    break;
                                                case 15:
                                                    (t.prev = 15), (t.t0 = t.catch(0)), e.showError();
                                                case 18:
                                                case "end":
                                                    return t.stop();
                                            }
                                    },
                                    t,
                                    null,
                                    [[0, 15]]
                                );
                            })),
                            function () {
                                var e = this,
                                    s = arguments;
                                return new Promise(function (a, i) {
                                    var r = t.apply(e, s);
                                    function n(t) {
                                        o(r, a, i, n, l, "next", t);
                                    }
                                    function l(t) {
                                        o(r, a, i, n, l, "throw", t);
                                    }
                                    n(void 0);
                                });
                            })();
                        },
                        getSearchByName: function (t) {
                            var e = url + "/admin/search_featured?q=" + encodeURI(t);
                            return new Promise(function (s) {
                                if (t.length < 1) return s([]);
                                fetch(e)
                                    .then(function (t) {
                                        return t.json();
                                    })
                                    .then(function (t) {
                                        s(t.search);
                                    });
                            });
                        },
                        getResultValue: function (t) {
                            return 1 === t.is_anime || null != t.name ? t.name : t.title;
                        },
                        onSubmit: function (t) {
                            1 === t.is_anime
                                ? ((this.title = t.name), (this.message = t.overview), (this.image = t.backdrop_path), (this.type = "2"), (this.tmdb = t.id))
                                : null != t.name
                                ? ((this.title = t.name), (this.message = t.overview), (this.image = t.backdrop_path), (this.type = "1"), (this.tmdb = t.id))
                                : ((this.title = t.title), (this.message = t.overview), (this.image = t.backdrop_path), (this.type = "0"), (this.tmdb = t.id), console.log(this.type));
                        },
                    },
                    mixins: [r.a, n.a],
                },
                c = s(4),
                d = Object(c.a)(
                    l,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            s("div", { staticClass: "col-md-12 grid-margin stretch-card" }, [
                                s("div", { staticClass: "card" }, [
                                    s("div", { staticClass: "card-body" }, [
                                        s("h4", { staticClass: "card-title" }, [t._v("Notifications")]),
                                        t._v(" "),
                                        s(
                                            "div",
                                            { staticClass: "form-group" },
                                            [
                                                s("autocomplete", {
                                                    attrs: {
                                                        search: t.getSearchByName,
                                                        placeholder: "Search Movie by Name",
                                                        "aria-label": "Search Movie by Name",
                                                        "data-loading": "true",
                                                        "data-position": "above",
                                                        "get-result-value": t.getResultValue,
                                                    },
                                                    on: { submit: t.onSubmit },
                                                }),
                                            ],
                                            1
                                        ),
                                        t._v(" "),
                                        s("form", { staticClass: "forms-sample" }, [
                                            s("div", { staticClass: "form-group" }, [
                                                s("label", { attrs: { for: "title" } }, [t._v("Title")]),
                                                t._v(" "),
                                                s("input", {
                                                    directives: [{ name: "model", rawName: "v-model", value: t.title, expression: "title" }],
                                                    staticClass: "form-control",
                                                    attrs: { id: "title", placeholder: "Title", type: "text" },
                                                    domProps: { value: t.title },
                                                    on: {
                                                        input: function (e) {
                                                            e.target.composing || (t.title = e.target.value);
                                                        },
                                                    },
                                                }),
                                            ]),
                                            t._v(" "),
                                            s("div", { staticClass: "form-group" }, [
                                                s("label", { attrs: { for: "content" } }, [t._v("Content")]),
                                                t._v(" "),
                                                s("textarea", {
                                                    directives: [{ name: "model", rawName: "v-model", value: t.message, expression: "message" }],
                                                    staticClass: "form-control",
                                                    attrs: { cols: "30", id: "content", rows: "10" },
                                                    domProps: { value: t.message },
                                                    on: {
                                                        input: function (e) {
                                                            e.target.composing || (t.message = e.target.value);
                                                        },
                                                    },
                                                }),
                                            ]),
                                            t._v(" "),
                                            s("div", { staticClass: "form-group" }, [
                                                s("label", { attrs: { for: "image" } }, [t._v("Image")]),
                                                t._v(" "),
                                                s("input", {
                                                    directives: [{ name: "model", rawName: "v-model", value: t.image, expression: "image" }],
                                                    staticClass: "form-control",
                                                    attrs: { id: "image", placeholder: "URL link here (Optional)", type: "text" },
                                                    domProps: { value: t.image },
                                                    on: {
                                                        input: function (e) {
                                                            e.target.composing || (t.image = e.target.value);
                                                        },
                                                    },
                                                }),
                                            ]),
                                            t._v(" "),
                                            t.image ? s("img", { staticClass: "back_poster", attrs: { src: t.image, alt: "poster path", "data-loaded": "true", height: "250", width: "120" } }) : t._e(),
                                            t._v(" "),
                                            s("div", { staticClass: "form-group" }, [
                                                s("label", { attrs: { for: "link" } }, [t._v("Link")]),
                                                t._v(" "),
                                                s("input", {
                                                    directives: [{ name: "model", rawName: "v-model", value: t.link, expression: "link" }],
                                                    staticClass: "form-control",
                                                    attrs: { id: "link", placeholder: "URL link here (Optional)", type: "text" },
                                                    domProps: { value: t.link },
                                                    on: {
                                                        input: function (e) {
                                                            e.target.composing || (t.link = e.target.value);
                                                        },
                                                    },
                                                }),
                                            ]),
                                            t._v(" "),
                                            s(
                                                "button",
                                                {
                                                    staticClass: "btn btn-primary mr-2",
                                                    attrs: { disabled: !t.settings.authorization || !t.title || !t.message, type: "button" },
                                                    on: {
                                                        click: function (e) {
                                                            return e.preventDefault(), t.send();
                                                        },
                                                    },
                                                },
                                                [t._v("Submit")]
                                            ),
                                        ]),
                                    ]),
                                ]),
                            ]),
                        ]);
                    },
                    [],
                    !1,
                    null,
                    null,
                    null
                );
            e.default = d.exports;
        },
        542: function (t, e, s) {
            "use strict";
            s.r(e);
            var a,
                i = s(0),
                r = s.n(i),
                n = s(3),
                o = s(6);
            function l(t, e, s) {
                return e in t ? Object.defineProperty(t, e, { value: s, enumerable: !0, configurable: !0, writable: !0 }) : (t[e] = s), t;
            }
            function c(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function d(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var r = t.apply(e, s);
                        function n(t) {
                            c(r, a, i, n, o, "next", t);
                        }
                        function o(t) {
                            c(r, a, i, n, o, "throw", t);
                        }
                        n(void 0);
                    });
                };
            }
            var u = {
                    data: function () {
                        return {
                            password: "",
                            notificationpath: "http://image.tmdb.org/t/p/w500/aL1fZFP5vsh3bIZEOBh6UxxtHK3.jpg",
                            image: "https://picsum.photos/id/1005/600/200",
                            logo: url + "/api/image/logo",
                            miniLogo: url + "/api/image/minilogo",
                            notificationicon: url + "/api/image/notificationicon",
                            networks_layouts_options1: "https://i.imgur.com/2euaMFB.png",
                            networks_layouts_options2: "https://i.imgur.com/3Y1tPs3.png",
                            networks_layouts: ["Layout1", "Layout2"],
                            options: ["UnityAds", "StartApp", "Admob", "Facebook", "Appodeal", "Ironsource", "AppNext", "Vungle", "AppLovin"],
                            optionsDownloads: ["PremuimOnly", "WithAdsUnlock", "Free"],
                            optionsDownloadsSources: ["Stream", "External", "All"],
                            options_player: ["UnityAds", "StartApp", "Admob", "Facebook", "Appodeal", "Ironsource", "AppNext", "Vungle", "AppLovin"],
                            options_youtube: ["360p", "720p"],
                            options_trailers: ["Youtube", "SelfHosted", "All"],
                            payments_options: ["All", "Paypal", "Stripe"],
                            options_cast: ["IMDB", "INTERNAL"],
                        };
                    },
                    methods:
                        ((a = {
                            update: function () {
                                var t = this;
                                return d(
                                    r.a.mark(function e() {
                                        var s;
                                        return r.a.wrap(
                                            function (e) {
                                                for (;;)
                                                    switch ((e.prev = e.next)) {
                                                        case 0:
                                                            return (e.prev = 0), (e.next = 3), axios.put(url + "/admin/settings/update/" + t.settings.id, t.settings);
                                                        case 3:
                                                            (s = e.sent), t.showSuccess(s.data.message), (e.next = 10);
                                                            break;
                                                        case 7:
                                                            (e.prev = 7), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                        case 10:
                                                        case "end":
                                                            return e.stop();
                                                    }
                                            },
                                            e,
                                            null,
                                            [[0, 7]]
                                        );
                                    })
                                )();
                            },
                            changeAppPassword: function () {
                                var t = this;
                                return d(
                                    r.a.mark(function e() {
                                        var s;
                                        return r.a.wrap(
                                            function (e) {
                                                for (;;)
                                                    switch ((e.prev = e.next)) {
                                                        case 0:
                                                            return (e.prev = 0), (e.next = 3), axios.put(url + "/admin/account/passwordApp/update", { password: t.password });
                                                        case 3:
                                                            (s = e.sent), (t.password = ""), t.showSuccess(s.data.message), (e.next = 11);
                                                            break;
                                                        case 8:
                                                            (e.prev = 8), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                        case 11:
                                                        case "end":
                                                            return e.stop();
                                                    }
                                            },
                                            e,
                                            null,
                                            [[0, 8]]
                                        );
                                    })
                                )();
                            },
                            updateMail: function () {
                                var t = this;
                                return d(
                                    r.a.mark(function e() {
                                        var s;
                                        return r.a.wrap(
                                            function (e) {
                                                for (;;)
                                                    switch ((e.prev = e.next)) {
                                                        case 0:
                                                            return (e.prev = 0), (e.next = 3), axios.get(url + "/admin/updateMailSettings", t.settings);
                                                        case 3:
                                                            (s = e.sent), t.showSuccess(s.data.message), (e.next = 10);
                                                            break;
                                                        case 7:
                                                            (e.prev = 7), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                        case 10:
                                                        case "end":
                                                            return e.stop();
                                                    }
                                            },
                                            e,
                                            null,
                                            [[0, 7]]
                                        );
                                    })
                                )();
                            },
                            updateLogo: function (t) {
                                var e = this;
                                return d(
                                    r.a.mark(function s() {
                                        var a, i;
                                        return r.a.wrap(
                                            function (s) {
                                                for (;;)
                                                    switch ((s.prev = s.next)) {
                                                        case 0:
                                                            return (s.prev = 0), (a = new FormData()).append("image", t.target.files[0]), (s.next = 5), axios.post(url + "/admin/update/logo", a);
                                                        case 5:
                                                            (i = s.sent), (e.logo = i.data.image_path), e.showSuccess(i.data.message), (s.next = 13);
                                                            break;
                                                        case 10:
                                                            (s.prev = 10), (s.t0 = s.catch(0)), e.showError(s.t0.response);
                                                        case 13:
                                                        case "end":
                                                            return s.stop();
                                                    }
                                            },
                                            s,
                                            null,
                                            [[0, 10]]
                                        );
                                    })
                                )();
                            },
                            updateMiniLogo: function (t) {
                                var e = this;
                                return d(
                                    r.a.mark(function s() {
                                        var a, i;
                                        return r.a.wrap(
                                            function (s) {
                                                for (;;)
                                                    switch ((s.prev = s.next)) {
                                                        case 0:
                                                            return (s.prev = 0), (a = new FormData()).append("image", t.target.files[0]), (s.next = 5), axios.post(url + "/admin/update/minilogo", a);
                                                        case 5:
                                                            (i = s.sent), (e.miniLogo = i.data.image_path), e.showSuccess(i.data.message), (s.next = 13);
                                                            break;
                                                        case 10:
                                                            (s.prev = 10), (s.t0 = s.catch(0)), e.showError(s.t0.response);
                                                        case 13:
                                                        case "end":
                                                            return s.stop();
                                                    }
                                            },
                                            s,
                                            null,
                                            [[0, 10]]
                                        );
                                    })
                                )();
                            },
                        }),
                        l(a, "updateMiniLogo", function (t) {
                            var e = this;
                            return d(
                                r.a.mark(function s() {
                                    var a, i;
                                    return r.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (s.prev = 0), (a = new FormData()).append("image", t.target.files[0]), (s.next = 5), axios.post(url + "/admin/update/notificationicon", a);
                                                    case 5:
                                                        (i = s.sent), (e.notificationicon = i.data.image_path), e.showSuccess(i.data.message), (s.next = 13);
                                                        break;
                                                    case 10:
                                                        (s.prev = 10), (s.t0 = s.catch(0)), e.showError(s.t0.response);
                                                    case 13:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 10]]
                                    );
                                })
                            )();
                        }),
                        l(a, "storePosterSplash", function (t) {
                            var e = this;
                            return d(
                                r.a.mark(function s() {
                                    var a, i;
                                    return r.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (s.prev = 0), (a = new FormData()).append("image", t.target.files[0]), (s.next = 5), axios.post(url + "/admin/update/splash", a);
                                                    case 5:
                                                        (i = s.sent), (e.settings.splash_image = i.data.image_path), e.showSuccess(i.data.message), (s.next = 13);
                                                        break;
                                                    case 10:
                                                        (s.prev = 10), (s.t0 = s.catch(0)), e.showError(s.t0.response);
                                                    case 13:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 10]]
                                    );
                                })
                            )();
                        }),
                        l(a, "storePosterPlaceHoder", function (t) {
                            var e = this;
                            return d(
                                r.a.mark(function s() {
                                    var a, i;
                                    return r.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (s.prev = 0), (a = new FormData()).append("image", t.target.files[0]), (s.next = 5), axios.post(url + "/admin/update/episode", a);
                                                    case 5:
                                                        (i = s.sent), (e.settings.default_media_placeholder_path = i.data.image_path), e.showSuccess(i.data.message), (s.next = 13);
                                                        break;
                                                    case 10:
                                                        (s.prev = 10), (s.t0 = s.catch(0)), e.showError(s.t0.response);
                                                    case 13:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 10]]
                                    );
                                })
                            )();
                        }),
                        l(a, "storeCustomBannerImage", function (t) {
                            var e = this;
                            return d(
                                r.a.mark(function s() {
                                    var a, i;
                                    return r.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (s.prev = 0), (a = new FormData()).append("image", t.target.files[0]), (s.next = 5), axios.post(url + "/admin/update/customBanner", a);
                                                    case 5:
                                                        (i = s.sent), (e.settings.custom_banner_image = i.data.image_path), e.showSuccess(i.data.message), (s.next = 13);
                                                        break;
                                                    case 10:
                                                        (s.prev = 10), (s.t0 = s.catch(0)), e.showError(s.t0.response);
                                                    case 13:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 10]]
                                    );
                                })
                            )();
                        }),
                        l(a, "storePosterPlaceHoderHome", function (t) {
                            var e = this;
                            return d(
                                r.a.mark(function s() {
                                    var a, i;
                                    return r.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (s.prev = 0), (a = new FormData()).append("image", t.target.files[0]), (s.next = 5), axios.post(url + "/admin/update/mediahome", a);
                                                    case 5:
                                                        (i = s.sent), (e.settings.default_media_placeholder_path_home = i.data.image_path), e.showSuccess(i.data.message), (s.next = 13);
                                                        break;
                                                    case 10:
                                                        (s.prev = 10), (s.t0 = s.catch(0)), e.showError(s.t0.response);
                                                    case 13:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 10]]
                                    );
                                })
                            )();
                        }),
                        l(a, "clearCache", function () {
                            var t = this;
                            this.showConfirm(
                                d(
                                    r.a.mark(function e() {
                                        return r.a.wrap(
                                            function (e) {
                                                for (;;)
                                                    switch ((e.prev = e.next)) {
                                                        case 0:
                                                            return (e.prev = 0), (e.next = 3), axios.get(url + "/api/cacheClear");
                                                        case 3:
                                                            e.sent, t.showSuccess("The Cache Has been Cleared !"), (e.next = 10);
                                                            break;
                                                        case 7:
                                                            (e.prev = 7), (e.t0 = e.catch(0)), t.showError();
                                                        case 10:
                                                        case "end":
                                                            return e.stop();
                                                    }
                                            },
                                            e,
                                            null,
                                            [[0, 7]]
                                        );
                                    })
                                )
                            );
                        }),
                        a),
                    mixins: [n.a, o.a],
                },
                m = (s(529), s(4)),
                p = Object(m.a)(
                    u,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            s("div", { staticClass: "col-12 grid-margin stretch-card" }, [
                                s("div", { staticClass: "card" }, [
                                    s("div", { staticClass: "card-body" }, [
                                        s("div", { staticClass: "row" }, [
                                            s("div", { staticClass: "col-md-12" }, [
                                                t._m(0),
                                                t._v(" "),
                                                s("div", { staticClass: "tab-content", attrs: { id: "myTabContent" } }, [
                                                    s("div", { staticClass: "tab-pane fade show active", attrs: { "aria-labelledby": "brand-tab", id: "brand", role: "tabpanel" } }, [
                                                        s("div", { staticClass: "row" }, [
                                                            s("div", { staticClass: "col-md-5" }, [t.logo ? s("div", { staticClass: "logo" }, [s("img", { attrs: { src: t.logo, alt: "logo" } })]) : t._e()]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-5" }, [t.miniLogo ? s("div", { staticClass: "logo" }, [s("img", { attrs: { src: t.miniLogo, alt: "mini logo" } })]) : t._e()]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "row" }, [
                                                            s("div", { staticClass: "col-md-5" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", [t._v("Panel Logo upload")]),
                                                                    t._v(" "),
                                                                    s("input", { staticClass: "file-upload-default" }),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "input-group col-xs-12" }, [
                                                                        s("input", { staticClass: "form-control file-upload-info", attrs: { id: "logo", placeholder: "Upload Image", type: "file" }, on: { change: t.updateLogo } }),
                                                                        t._v(" "),
                                                                        t._m(1),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-5" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", [t._v("App Logo upload")]),
                                                                    t._v(" "),
                                                                    s("input", { staticClass: "file-upload-default" }),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "input-group col-xs-12" }, [
                                                                        s("input", { staticClass: "form-control file-upload-info", attrs: { id: "miniLogo", placeholder: "Upload Image", type: "file" }, on: { change: t.updateMiniLogo } }),
                                                                        t._v(" "),
                                                                        t._m(2),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "row" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "app_name" } }, [t._v("App name")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.app_name, expression: "settings.app_name" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "app_name", type: "text" },
                                                                        domProps: { value: t.settings.app_name },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "app_name", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "app_name" } }, [t._v("App Version")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.latestVersion, expression: "settings.latestVersion" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "latestVersion", type: "text" },
                                                                        domProps: { value: t.settings.latestVersion },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "latestVersion", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "row" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "update_title" } }, [t._v("Update Title")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.update_title, expression: "settings.update_title" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "update_title", type: "text" },
                                                                        domProps: { value: t.settings.update_title },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "update_title", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "app_name" } }, [t._v("App Update_link")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.url, expression: "settings.url" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "url", type: "text" },
                                                                        domProps: { value: t.settings.url },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "url", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "row" }, [
                                                            s("div", { staticClass: "col-md-12" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "releaseNotes" } }, [t._v("Update Release Notes")]),
                                                                    t._v(" "),
                                                                    s("textarea", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.releaseNotes, expression: "settings.releaseNotes" }],
                                                                        staticClass: "form-control pb-3",
                                                                        attrs: { id: "releaseNotes", rows: "4", type: "text" },
                                                                        domProps: { value: t.settings.releaseNotes },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "releaseNotes", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "row" }, [
                                                            s("div", { staticClass: "col-md-12" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "title" } }, [t._v("Privacy Policy")]),
                                                                    t._v(" "),
                                                                    s("textarea", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.privacy_policy, expression: "settings.privacy_policy" }],
                                                                        staticClass: "form-control pb-3",
                                                                        attrs: { id: "privacy_policy", rows: "10", type: "text" },
                                                                        domProps: { value: t.settings.privacy_policy },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "privacy_policy", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-3" }, [
                                                                s("div", { staticClass: "form-check" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.enable_custom_message, expression: "settings.enable_custom_message" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "enable_custom_message", type: "checkbox" },
                                                                            domProps: { checked: Array.isArray(t.settings.enable_custom_message) ? t._i(t.settings.enable_custom_message, null) > -1 : t.settings.enable_custom_message },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.settings.enable_custom_message,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked
                                                                                            ? r < 0 && t.$set(t.settings, "enable_custom_message", s.concat([null]))
                                                                                            : r > -1 && t.$set(t.settings, "enable_custom_message", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.$set(t.settings, "enable_custom_message", i);
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "enable_custom_message" } }, [
                                                                            t._v("\n                            Enable Custom Message (Home Page)\n                          "),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "row" }, [
                                                            s("div", { staticClass: "col-md-12" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "custom_message" } }, [t._v("Custom Message")]),
                                                                    t._v(" "),
                                                                    s("textarea", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.custom_message, expression: "settings.custom_message" }],
                                                                        staticClass: "form-control pb-3",
                                                                        attrs: { id: "custom_message", rows: "10", type: "text" },
                                                                        domProps: { value: t.settings.custom_message },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "custom_message", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-3" }, [
                                                                s("div", { staticClass: "form-check" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.enable_custom_banner, expression: "settings.enable_custom_banner" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "enable_custom_banner", type: "checkbox" },
                                                                            domProps: { checked: Array.isArray(t.settings.enable_custom_banner) ? t._i(t.settings.enable_custom_banner, null) > -1 : t.settings.enable_custom_banner },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.settings.enable_custom_banner,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked
                                                                                            ? r < 0 && t.$set(t.settings, "enable_custom_banner", s.concat([null]))
                                                                                            : r > -1 && t.$set(t.settings, "enable_custom_banner", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.$set(t.settings, "enable_custom_banner", i);
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "enable_custom_banner" } }, [
                                                                            t._v("\n                            Enable Custom Banner (Home Page)\n                          "),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "row" }, [
                                                            s("div", { staticClass: "col-md-8" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "custom_banner_image" } }, [t._v("Custom Banner Image")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.custom_banner_image, expression: "settings.custom_banner_image" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "custom_banner_image", type: "text" },
                                                                        domProps: { value: t.settings.custom_banner_image },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "custom_banner_image", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            t.settings.custom_banner_image ? s("img", { staticClass: "poster", attrs: { src: t.settings.custom_banner_image, "data-loaded": "true", height: "316", width: "210" } }) : t._e(),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "row" }, [
                                                            s("div", { staticClass: "col-md-12" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", [t._v("Custom Banner Image Upload ")]),
                                                                    t._v(" "),
                                                                    s("input", { staticClass: "file-upload-default" }),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "input-group col-xs-12" }, [
                                                                        s("input", {
                                                                            staticClass: "form-control file-upload-info",
                                                                            attrs: { id: "poster", placeholder: "Upload Image", type: "file" },
                                                                            on: { change: t.storeCustomBannerImage },
                                                                        }),
                                                                        t._v(" "),
                                                                        t._m(3),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "col-md-6" }, [
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("label", { attrs: { for: "app_name" } }, [t._v("Custom Banner Link ( open a link )")]),
                                                                t._v(" "),
                                                                s("input", {
                                                                    directives: [{ name: "model", rawName: "v-model", value: t.settings.custom_banner_image_link, expression: "settings.custom_banner_image_link" }],
                                                                    staticClass: "form-control",
                                                                    attrs: { id: "url", type: "text" },
                                                                    domProps: { value: t.settings.custom_banner_image_link },
                                                                    on: {
                                                                        input: function (e) {
                                                                            e.target.composing || t.$set(t.settings, "custom_banner_image_link", e.target.value);
                                                                        },
                                                                    },
                                                                }),
                                                            ]),
                                                        ]),
                                                    ]),
                                                    t._v(" "),
                                                    s("div", { staticClass: "tab-pane fade", attrs: { "aria-labelledby": "firebase-tab", id: "firebase", role: "tabpanel" } }, [
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "row" }, [
                                                                s("div", { staticClass: "col-md-8" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", { attrs: { for: "app_name" } }, [t._v("Firebase Server Key")]),
                                                                        t._v(" "),
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.authorization, expression: "settings.authorization" }],
                                                                            staticClass: "form-control",
                                                                            attrs: { id: "authorization", type: "text" },
                                                                            domProps: { value: t.settings.authorization },
                                                                            on: {
                                                                                input: function (e) {
                                                                                    e.target.composing || t.$set(t.settings, "authorization", e.target.value);
                                                                                },
                                                                            },
                                                                        }),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                    ]),
                                                    t._v(" "),
                                                    s("div", { staticClass: "tab-pane fade", attrs: { "aria-labelledby": "ads-tab", id: "ads", role: "tabpanel" } }, [
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "col-md-3" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.wach_ads_to_unlock_player, expression: "settings.wach_ads_to_unlock_player" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "wach_ads_to_unlock_player", type: "checkbox" },
                                                                                domProps: {
                                                                                    checked: Array.isArray(t.settings.wach_ads_to_unlock_player) ? t._i(t.settings.wach_ads_to_unlock_player, null) > -1 : t.settings.wach_ads_to_unlock_player,
                                                                                },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.wach_ads_to_unlock_player,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "wach_ads_to_unlock_player", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "wach_ads_to_unlock_player", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "wach_ads_to_unlock_player", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "wach_ads_to_unlock_player" } }, [
                                                                                t._v("\n                              Enable ( Ads Unlock Inside Player)\n                            "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s(
                                                                    "div",
                                                                    { staticClass: "form-group" },
                                                                    [
                                                                        s("label", { attrs: { for: "lang" } }, [t._v("Default Interstitial Network ( Inside Player only\n                          )")]),
                                                                        t._v(" "),
                                                                        s("multiselect", {
                                                                            attrs: { options: t.options_player },
                                                                            model: {
                                                                                value: t.settings.default_network_player,
                                                                                callback: function (e) {
                                                                                    t.$set(t.settings, "default_network_player", e);
                                                                                },
                                                                                expression: "settings.default_network_player",
                                                                            },
                                                                        }),
                                                                    ],
                                                                    1
                                                                ),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "col-md-3" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.wach_ads_to_unlock, expression: "settings.wach_ads_to_unlock" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "wach_ads_to_unlock", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.wach_ads_to_unlock) ? t._i(t.settings.wach_ads_to_unlock, null) > -1 : t.settings.wach_ads_to_unlock },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.wach_ads_to_unlock,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "wach_ads_to_unlock", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "wach_ads_to_unlock", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "wach_ads_to_unlock", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "wach_ads_to_unlock" } }, [
                                                                                t._v("\n                              Enable ( UNLOCK CONTENT)\n                            "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s(
                                                                    "div",
                                                                    { staticClass: "form-group" },
                                                                    [
                                                                        s("label", { attrs: { for: "lang" } }, [t._v("Default Rewarded Network")]),
                                                                        t._v(" "),
                                                                        s("multiselect", {
                                                                            attrs: { options: t.options },
                                                                            model: {
                                                                                value: t.settings.default_network,
                                                                                callback: function (e) {
                                                                                    t.$set(t.settings, "default_network", e);
                                                                                },
                                                                                expression: "settings.default_network",
                                                                            },
                                                                        }),
                                                                    ],
                                                                    1
                                                                ),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        "Facebook" == t.settings.default_network ? s("div", { staticClass: "row d-flex", attrs: { id: "proBanner", "wfd-id": "71" } }, [t._m(4)]) : t._e(),
                                                        t._v(" "),
                                                        t._m(5),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-check" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.applovin_banner, expression: "settings.applovin_banner" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "applovin_banner", type: "checkbox" },
                                                                            domProps: { checked: Array.isArray(t.settings.applovin_banner) ? t._i(t.settings.applovin_banner, null) > -1 : t.settings.applovin_banner },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.settings.applovin_banner,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked
                                                                                            ? r < 0 && t.$set(t.settings, "applovin_banner", s.concat([null]))
                                                                                            : r > -1 && t.$set(t.settings, "applovin_banner", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.$set(t.settings, "applovin_banner", i);
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "applovin_banner" } }, [
                                                                            t._v("\n                            AppLovin Banner\n                          "),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "col-md-3" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.applovin_interstitial, expression: "settings.applovin_interstitial" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "applovin_interstitial", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.applovin_interstitial) ? t._i(t.settings.applovin_interstitial, null) > -1 : t.settings.applovin_interstitial },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.applovin_interstitial,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "applovin_interstitial", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "applovin_interstitial", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "applovin_interstitial", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "applovin_interstitial" } }, [
                                                                                t._v("\n                              AppLovin interstitial\n                            "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "applovin_interstitial_show" } }, [t._v("AppLovin interstitial Show ( Number of taps before ads to show )")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.applovin_interstitial_show, expression: "settings.applovin_interstitial_show" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "applovin_interstitial_show", type: "text" },
                                                                        domProps: { value: t.settings.applovin_interstitial_show },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "applovin_interstitial_show", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "applovin_reward_unitid" } }, [t._v("AppLovin Reward Unit ID")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.applovin_reward_unitid, expression: "settings.applovin_reward_unitid" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "applovin_reward_unitid", type: "text" },
                                                                        domProps: { value: t.settings.applovin_reward_unitid },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "applovin_reward_unitid", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "applovin_banner_unitid" } }, [t._v("AppLovin Banner Unit ID")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.applovin_banner_unitid, expression: "settings.applovin_banner_unitid" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "applovin_banner_unitid", type: "text" },
                                                                        domProps: { value: t.settings.applovin_banner_unitid },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "applovin_banner_unitid", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "applovin_interstitial_unitid" } }, [t._v("AppLovin Interstitial Unit ID")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.applovin_interstitial_unitid, expression: "settings.applovin_interstitial_unitid" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "applovin_interstitial_unitid", type: "text" },
                                                                        domProps: { value: t.settings.applovin_interstitial_unitid },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "applovin_interstitial_unitid", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        t._m(6),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-check" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.vungle_banner, expression: "settings.vungle_banner" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "vungle_banner", type: "checkbox" },
                                                                            domProps: { checked: Array.isArray(t.settings.vungle_banner) ? t._i(t.settings.vungle_banner, null) > -1 : t.settings.vungle_banner },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.settings.vungle_banner,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked
                                                                                            ? r < 0 && t.$set(t.settings, "vungle_banner", s.concat([null]))
                                                                                            : r > -1 && t.$set(t.settings, "vungle_banner", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.$set(t.settings, "vungle_banner", i);
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "vungle_banner" } }, [t._v("\n                            Vungle Banner\n                          ")]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "col-md-3" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.vungle_interstitial, expression: "settings.vungle_interstitial" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "vungle_interstitial", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.vungle_interstitial) ? t._i(t.settings.vungle_interstitial, null) > -1 : t.settings.vungle_interstitial },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.vungle_interstitial,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "vungle_interstitial", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "vungle_interstitial", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "vungle_interstitial", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "vungle_interstitial" } }, [
                                                                                t._v("\n                              Vungle interstitial\n                            "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "vungle_appid" } }, [t._v("VUNGLE APP ID")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.vungle_appid, expression: "settings.vungle_appid" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "vungle_appid", type: "text" },
                                                                        domProps: { value: t.settings.vungle_appid },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "vungle_appid", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "vungle_interstitial_show" } }, [t._v("Vungle interstitial Show ( Number of taps before ads to show )")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.vungle_interstitial_show, expression: "settings.vungle_interstitial_show" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "vungle_interstitial_show", type: "text" },
                                                                        domProps: { value: t.settings.vungle_interstitial_show },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "vungle_interstitial_show", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "vungle_interstitial_placement_name" } }, [t._v("Vungle Interstitial Placement Name")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.vungle_interstitial_placement_name, expression: "settings.vungle_interstitial_placement_name" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "vungle_interstitial_placement_name", type: "text" },
                                                                        domProps: { value: t.settings.vungle_interstitial_placement_name },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "vungle_interstitial_placement_name", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "vungle_banner_placement_name" } }, [t._v("Vungle Banner Placement Name")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.vungle_banner_placement_name, expression: "settings.vungle_banner_placement_name" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "vungle_banner_placement_name", type: "text" },
                                                                        domProps: { value: t.settings.vungle_banner_placement_name },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "vungle_banner_placement_name", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "vungle_reward_placement_name" } }, [t._v("Vungle Rewarded Placement Name")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.vungle_reward_placement_name, expression: "settings.vungle_reward_placement_name" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "vungle_reward_placement_name", type: "text" },
                                                                        domProps: { value: t.settings.vungle_reward_placement_name },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "vungle_reward_placement_name", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        t._m(7),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-check" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.appnext_banner, expression: "settings.appnext_banner" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "appnext_banner", type: "checkbox" },
                                                                            domProps: { checked: Array.isArray(t.settings.appnext_banner) ? t._i(t.settings.appnext_banner, null) > -1 : t.settings.appnext_banner },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.settings.appnext_banner,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked
                                                                                            ? r < 0 && t.$set(t.settings, "appnext_banner", s.concat([null]))
                                                                                            : r > -1 && t.$set(t.settings, "appnext_banner", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.$set(t.settings, "appnext_banner", i);
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "appnext_banner" } }, [
                                                                            t._v("\n                            AppNext Banner\n                          "),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "col-md-3" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.appnext_interstitial, expression: "settings.appnext_interstitial" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "appnext_interstitial", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.appnext_interstitial) ? t._i(t.settings.appnext_interstitial, null) > -1 : t.settings.appnext_interstitial },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.appnext_interstitial,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "appnext_interstitial", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "appnext_interstitial", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "appnext_interstitial", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "appnext_interstitial" } }, [
                                                                                t._v("\n                              AppNext interstitial\n                            "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "appnext_placementid" } }, [t._v("APPNEXT PLACEMENT ID")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.appnext_placementid, expression: "settings.appnext_placementid" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "appnext_placementid", type: "text" },
                                                                        domProps: { value: t.settings.appnext_placementid },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "appnext_placementid", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "appnext_interstitial_show" } }, [t._v("APPNEXT interstitial Show ( Number of taps before ads to show )")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.appnext_interstitial_show, expression: "settings.appnext_interstitial_show" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "appnext_interstitial_show", type: "text" },
                                                                        domProps: { value: t.settings.appnext_interstitial_show },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "appnext_interstitial_show", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        t._m(8),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-check" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.ironsource_banner, expression: "settings.ironsource_banner" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "ironsource_banner", type: "checkbox" },
                                                                            domProps: { checked: Array.isArray(t.settings.ironsource_banner) ? t._i(t.settings.ironsource_banner, null) > -1 : t.settings.ironsource_banner },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.settings.ironsource_banner,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked
                                                                                            ? r < 0 && t.$set(t.settings, "ironsource_banner", s.concat([null]))
                                                                                            : r > -1 && t.$set(t.settings, "ironsource_banner", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.$set(t.settings, "ironsource_banner", i);
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "ironsource_banner" } }, [
                                                                            t._v("\n                            IronSource Banner\n                          "),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "col-md-3" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.ironsource_interstitial, expression: "settings.ironsource_interstitial" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "ironsource_interstitial", type: "checkbox" },
                                                                                domProps: {
                                                                                    checked: Array.isArray(t.settings.ironsource_interstitial) ? t._i(t.settings.ironsource_interstitial, null) > -1 : t.settings.ironsource_interstitial,
                                                                                },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.ironsource_interstitial,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "ironsource_interstitial", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "ironsource_interstitial", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "ironsource_interstitial", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "ironsource_interstitial" } }, [
                                                                                t._v("\n                              IronSource interstitial\n                            "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "ironsource_app_key" } }, [t._v("IronSource APP KEY ")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.ironsource_app_key, expression: "settings.ironsource_app_key" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "ironsource_app_key", type: "text" },
                                                                        domProps: { value: t.settings.ironsource_app_key },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "ironsource_app_key", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "ironsource_interstitial_placement_name" } }, [t._v("IronSource Interstitial Placement Name")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [
                                                                            { name: "model", rawName: "v-model", value: t.settings.ironsource_interstitial_placement_name, expression: "settings.ironsource_interstitial_placement_name" },
                                                                        ],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "ironsource_interstitial_placement_name", type: "text" },
                                                                        domProps: { value: t.settings.ironsource_interstitial_placement_name },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "ironsource_interstitial_placement_name", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "ironsource_banner_placement_name" } }, [t._v("IronSource Banner Placement Name")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.ironsource_banner_placement_name, expression: "settings.ironsource_banner_placement_name" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "ironsource_banner_placement_name", type: "text" },
                                                                        domProps: { value: t.settings.ironsource_banner_placement_name },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "ironsource_banner_placement_name", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "ironsource_reward_placement_name" } }, [t._v("IronSource Rewarded Placement Name")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.ironsource_reward_placement_name, expression: "settings.ironsource_reward_placement_name" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "ironsource_reward_placement_name", type: "text" },
                                                                        domProps: { value: t.settings.ironsource_reward_placement_name },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "ironsource_reward_placement_name", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "ironsource_interstitial_show" } }, [t._v("IronSource interstitial Show ( Number of taps before ads to show )")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.ironsource_interstitial_show, expression: "settings.ironsource_interstitial_show" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "ironsource_interstitial_show", type: "text" },
                                                                        domProps: { value: t.settings.ironsource_interstitial_show },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "ironsource_interstitial_show", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        t._m(9),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-check" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.ad_banner, expression: "settings.ad_banner" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "ad_banner", type: "checkbox" },
                                                                            domProps: { checked: Array.isArray(t.settings.ad_banner) ? t._i(t.settings.ad_banner, null) > -1 : t.settings.ad_banner },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.settings.ad_banner,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked
                                                                                            ? r < 0 && t.$set(t.settings, "ad_banner", s.concat([null]))
                                                                                            : r > -1 && t.$set(t.settings, "ad_banner", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.$set(t.settings, "ad_banner", i);
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "ad_banner" } }, [t._v("\n                            Admob Banner\n                          ")]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "col-md-3" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.ad_unit_id_native_enable, expression: "settings.ad_unit_id_native_enable" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "ad_unit_id_native_enable", type: "checkbox" },
                                                                                domProps: {
                                                                                    checked: Array.isArray(t.settings.ad_unit_id_native_enable) ? t._i(t.settings.ad_unit_id_native_enable, null) > -1 : t.settings.ad_unit_id_native_enable,
                                                                                },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.ad_unit_id_native_enable,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "ad_unit_id_native_enable", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "ad_unit_id_native_enable", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "ad_unit_id_native_enable", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "ad_unit_id_native_enable" } }, [
                                                                                t._v("\n                              Admob Native Ads\n                            "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "col-md-3" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.ad_interstitial, expression: "settings.ad_interstitial" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "ad_interstitial", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.ad_interstitial) ? t._i(t.settings.ad_interstitial, null) > -1 : t.settings.ad_interstitial },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.ad_interstitial,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "ad_interstitial", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "ad_interstitial", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "ad_interstitial", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "ad_interstitial" } }, [
                                                                                t._v("\n                              Admob interstitial\n                            "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "ad_show_interstitial" } }, [t._v("Admob Interstitial Show")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.ad_show_interstitial, expression: "settings.ad_show_interstitial" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "ad_show_interstitial", type: "text" },
                                                                        domProps: { value: t.settings.ad_show_interstitial },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "ad_show_interstitial", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "ad_unit_id_interstitial" } }, [t._v("Admob Interstitial Unit ID")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.ad_unit_id_interstitial, expression: "settings.ad_unit_id_interstitial" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "ad_unit_id_interstitial", type: "text" },
                                                                        domProps: { value: t.settings.ad_unit_id_interstitial },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "ad_unit_id_interstitial", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "ad_unit_id_banner" } }, [t._v("Admob Banner Unit ID")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.ad_unit_id_banner, expression: "settings.ad_unit_id_banner" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "ad_unit_id_banner", type: "text" },
                                                                        domProps: { value: t.settings.ad_unit_id_banner },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "ad_unit_id_banner", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "ad_unit_id_native" } }, [t._v("Admob Native Unit ID")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.ad_unit_id_native, expression: "settings.ad_unit_id_native" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "ad_unit_id_native", type: "text" },
                                                                        domProps: { value: t.settings.ad_unit_id_native },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "ad_unit_id_native", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "ad_unit_id_rewarded" } }, [t._v("Admob Rewarded Unit Id")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.ad_unit_id_rewarded, expression: "settings.ad_unit_id_rewarded" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "ad_unit_id_rewarded", type: "text" },
                                                                        domProps: { value: t.settings.ad_unit_id_rewarded },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "ad_unit_id_rewarded", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        t._m(10),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-check" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.ad_face_audience_interstitial, expression: "settings.ad_face_audience_interstitial" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "ad_face_audience_interstitial", type: "checkbox" },
                                                                            domProps: {
                                                                                checked: Array.isArray(t.settings.ad_face_audience_interstitial)
                                                                                    ? t._i(t.settings.ad_face_audience_interstitial, null) > -1
                                                                                    : t.settings.ad_face_audience_interstitial,
                                                                            },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.settings.ad_face_audience_interstitial,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked
                                                                                            ? r < 0 && t.$set(t.settings, "ad_face_audience_interstitial", s.concat([null]))
                                                                                            : r > -1 && t.$set(t.settings, "ad_face_audience_interstitial", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.$set(t.settings, "ad_face_audience_interstitial", i);
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "ad_face_audience_interstitial" } }, [
                                                                            t._v("\n                            Facebook Audience Interstitial\n                          "),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-check" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.ad_face_audience_banner, expression: "settings.ad_face_audience_banner" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "ad_face_audience_banner", type: "checkbox" },
                                                                            domProps: { checked: Array.isArray(t.settings.ad_face_audience_banner) ? t._i(t.settings.ad_face_audience_banner, null) > -1 : t.settings.ad_face_audience_banner },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.settings.ad_face_audience_banner,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked
                                                                                            ? r < 0 && t.$set(t.settings, "ad_face_audience_banner", s.concat([null]))
                                                                                            : r > -1 && t.$set(t.settings, "ad_face_audience_banner", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.$set(t.settings, "ad_face_audience_banner", i);
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "ad_face_audience_banner" } }, [
                                                                            t._v("\n                            Facebook Audience Banner\n                          "),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-check" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.ad_face_audience_native, expression: "settings.ad_face_audience_native" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "ad_face_audience_native", type: "checkbox" },
                                                                            domProps: { checked: Array.isArray(t.settings.ad_face_audience_native) ? t._i(t.settings.ad_face_audience_native, null) > -1 : t.settings.ad_face_audience_native },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.settings.ad_face_audience_native,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked
                                                                                            ? r < 0 && t.$set(t.settings, "ad_face_audience_native", s.concat([null]))
                                                                                            : r > -1 && t.$set(t.settings, "ad_face_audience_native", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.$set(t.settings, "ad_face_audience_native", i);
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "ad_face_audience_native" } }, [
                                                                            t._v("\n                            Facebook Audience Native Ads\n                          "),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "facebook_show_interstitial" } }, [t._v("Facebook Audience Interstitial Show")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.facebook_show_interstitial, expression: "settings.facebook_show_interstitial" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "facebook_show_interstitial", type: "text" },
                                                                        domProps: { value: t.settings.facebook_show_interstitial },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "facebook_show_interstitial", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "ad_unit_id_facebook_interstitial_audience" } }, [t._v("Facebook Audience Interstitial Unit Id")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [
                                                                            {
                                                                                name: "model",
                                                                                rawName: "v-model",
                                                                                value: t.settings.ad_unit_id_facebook_interstitial_audience,
                                                                                expression: "\n                            settings.ad_unit_id_facebook_interstitial_audience\n                          ",
                                                                            },
                                                                        ],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "ad_unit_id_facebook_interstitial_audience", type: "text" },
                                                                        domProps: { value: t.settings.ad_unit_id_facebook_interstitial_audience },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "ad_unit_id_facebook_interstitial_audience", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "ad_unit_id_facebook_banner_audience" } }, [t._v("Facebook Audience Banner Unit Id")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.ad_unit_id_facebook_banner_audience, expression: "settings.ad_unit_id_facebook_banner_audience" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "ad_unit_id_facebook_banner_audience", type: "text" },
                                                                        domProps: { value: t.settings.ad_unit_id_facebook_banner_audience },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "ad_unit_id_facebook_banner_audience", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "ad_unit_id_facebook_native_audience" } }, [t._v("Facebook Audience Native Unit Id")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.ad_unit_id_facebook_native_audience, expression: "settings.ad_unit_id_facebook_native_audience" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "ad_unit_id_facebook_native_audience", type: "text" },
                                                                        domProps: { value: t.settings.ad_unit_id_facebook_native_audience },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "ad_unit_id_facebook_native_audience", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        t._m(11),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-check" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.unityads_banner, expression: "settings.unityads_banner" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "unityads_banner", type: "checkbox" },
                                                                            domProps: { checked: Array.isArray(t.settings.unityads_banner) ? t._i(t.settings.unityads_banner, null) > -1 : t.settings.unityads_banner },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.settings.unityads_banner,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked
                                                                                            ? r < 0 && t.$set(t.settings, "unityads_banner", s.concat([null]))
                                                                                            : r > -1 && t.$set(t.settings, "unityads_banner", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.$set(t.settings, "unityads_banner", i);
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "unityads_banner" } }, [
                                                                            t._v("\n                            UnityAds Banner\n                          "),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-check" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.unityads_interstitial, expression: "settings.unityads_interstitial" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "unityads_interstitial", type: "checkbox" },
                                                                            domProps: { checked: Array.isArray(t.settings.unityads_interstitial) ? t._i(t.settings.unityads_interstitial, null) > -1 : t.settings.unityads_interstitial },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.settings.unityads_interstitial,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked
                                                                                            ? r < 0 && t.$set(t.settings, "unityads_interstitial", s.concat([null]))
                                                                                            : r > -1 && t.$set(t.settings, "unityads_interstitial", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.$set(t.settings, "unityads_interstitial", i);
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "unityads_interstitial" } }, [
                                                                            t._v("\n                            UnityAds Interstitial\n                          "),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "unity_game_id" } }, [t._v("Unity Ads Game Id")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.unity_game_id, expression: "settings.unity_game_id" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "unity_game_id", type: "text" },
                                                                        domProps: { value: t.settings.unity_game_id },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "unity_game_id", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "unity_banner_placement_id" } }, [t._v("Unity Ads Banner Placement ID")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.unity_banner_placement_id, expression: "settings.unity_banner_placement_id" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "unity_banner_placement_id", type: "text" },
                                                                        domProps: { value: t.settings.unity_banner_placement_id },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "unity_banner_placement_id", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "unity_interstitial_placement_id" } }, [t._v("Unity Ads Interstitial Placement ID")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.unity_interstitial_placement_id, expression: "settings.unity_interstitial_placement_id" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "unity_interstitial_placement_id", type: "text" },
                                                                        domProps: { value: t.settings.unity_interstitial_placement_id },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "unity_interstitial_placement_id", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "unity_reward_placement_id" } }, [t._v("Unity Ads Reward Placement ID")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.unity_reward_placement_id, expression: "settings.unity_reward_placement_id" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "unity_reward_placement_id", type: "text" },
                                                                        domProps: { value: t.settings.unity_reward_placement_id },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "unity_reward_placement_id", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "unity_show" } }, [t._v("Unity Ads Show ( Number of taps before ads to show )")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.unity_show, expression: "settings.unity_show" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "unity_show", type: "text" },
                                                                        domProps: { value: t.settings.unity_show },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "unity_show", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        t._m(12),
                                                        t._v(" "),
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "col-md-3" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.appodeal_interstitial, expression: "settings.appodeal_interstitial" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "appodeal_interstitial", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.appodeal_interstitial) ? t._i(t.settings.appodeal_interstitial, null) > -1 : t.settings.appodeal_interstitial },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.appodeal_interstitial,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "appodeal_interstitial", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "appodeal_interstitial", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "appodeal_interstitial", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "appodeal_interstitial" } }, [
                                                                                t._v("\n                              Appodeal interstitial\n                            "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "col-md-3" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.appodeal_banner, expression: "settings.appodeal_banner" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "appodeal_banner", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.appodeal_banner) ? t._i(t.settings.appodeal_banner, null) > -1 : t.settings.appodeal_banner },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.appodeal_banner,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "appodeal_banner", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "appodeal_banner", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "appodeal_banner", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "appodeal_banner" } }, [
                                                                                t._v("\n                              Appodeal Banner\n                            "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "appodeal_show_interstitial" } }, [t._v("Appodeal Interstitial Show")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.appodeal_show_interstitial, expression: "settings.appodeal_show_interstitial" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "appodeal_show_interstitial", type: "text" },
                                                                        domProps: { value: t.settings.appodeal_show_interstitial },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "appodeal_show_interstitial", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "ad_unit_id__appodeal_rewarded" } }, [t._v("AppoDeal Application Key")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.ad_unit_id__appodeal_rewarded, expression: "settings.ad_unit_id__appodeal_rewarded" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "ad_unit_id__appodeal_rewarded", type: "text" },
                                                                        domProps: { value: t.settings.ad_unit_id__appodeal_rewarded },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "ad_unit_id__appodeal_rewarded", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        t._m(13),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-check" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.startapp_banner, expression: "settings.startapp_banner" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "startapp_banner", type: "checkbox" },
                                                                            domProps: { checked: Array.isArray(t.settings.startapp_banner) ? t._i(t.settings.startapp_banner, null) > -1 : t.settings.startapp_banner },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.settings.startapp_banner,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked
                                                                                            ? r < 0 && t.$set(t.settings, "startapp_banner", s.concat([null]))
                                                                                            : r > -1 && t.$set(t.settings, "startapp_banner", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.$set(t.settings, "startapp_banner", i);
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "startapp_banner" } }, [
                                                                            t._v("\n                            StartApp Banner\n                          "),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-check" }, [
                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.startapp_interstitial, expression: "settings.startapp_interstitial" }],
                                                                            staticClass: "custom-control-input",
                                                                            attrs: { id: "startapp_interstitial", type: "checkbox" },
                                                                            domProps: { checked: Array.isArray(t.settings.startapp_interstitial) ? t._i(t.settings.startapp_interstitial, null) > -1 : t.settings.startapp_interstitial },
                                                                            on: {
                                                                                change: function (e) {
                                                                                    var s = t.settings.startapp_interstitial,
                                                                                        a = e.target,
                                                                                        i = !!a.checked;
                                                                                    if (Array.isArray(s)) {
                                                                                        var r = t._i(s, null);
                                                                                        a.checked
                                                                                            ? r < 0 && t.$set(t.settings, "startapp_interstitial", s.concat([null]))
                                                                                            : r > -1 && t.$set(t.settings, "startapp_interstitial", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                    } else t.$set(t.settings, "startapp_interstitial", i);
                                                                                },
                                                                            },
                                                                        }),
                                                                        t._v(" "),
                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "startapp_interstitial" } }, [
                                                                            t._v("\n                            StartApp nterstitial\n                          "),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                        t._v(" "),
                                                        s("div", { staticClass: "form-group" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "startapp_id" } }, [t._v("StartApp ID")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.startapp_id, expression: "settings.startapp_id" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "startapp_id", type: "text" },
                                                                        domProps: { value: t.settings.startapp_id },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.settings, "startapp_id", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                    ]),
                                                    t._v(" "),
                                                    s("div", { staticClass: "tab-pane fade", attrs: { "aria-labelledby": "code-tab", id: "code", role: "tabpanel" } }, [
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "row" }, [
                                                                s("div", { staticClass: "col-md-8" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", { attrs: { for: "purchase_key" } }, [t._v("Purchase Code")]),
                                                                        t._v(" "),
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.purchase_key, expression: "settings.purchase_key" }],
                                                                            staticClass: "form-control",
                                                                            attrs: { id: "purchase_key", type: "text" },
                                                                            domProps: { value: t.settings.purchase_key },
                                                                            on: {
                                                                                input: function (e) {
                                                                                    e.target.composing || t.$set(t.settings, "purchase_key", e.target.value);
                                                                                },
                                                                            },
                                                                        }),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                    ]),
                                                    t._v(" "),
                                                    s("div", { staticClass: "tab-pane fade", attrs: { "aria-labelledby": "laravel-tab", id: "laravel", role: "tabpanel" } }, [
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "row" }, [
                                                                s("div", { staticClass: "col-md-8" }, [
                                                                    s("div", { staticClass: "input-group" }, [
                                                                        s("div", { staticClass: "input-group-btn" }, [
                                                                            s(
                                                                                "button",
                                                                                {
                                                                                    staticClass: "btn btn-primary ml-2",
                                                                                    attrs: { type: "submit" },
                                                                                    on: {
                                                                                        click: function (e) {
                                                                                            return e.preventDefault(), t.clearCache();
                                                                                        },
                                                                                    },
                                                                                },
                                                                                [t._v("Clear Cache")]
                                                                            ),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                    ]),
                                                    t._v(" "),
                                                    s("div", { staticClass: "tab-pane fade", attrs: { "aria-labelledby": "tmdb-tab", id: "tmdb", role: "tabpanel" } }, [
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "row" }, [
                                                                s("div", { staticClass: "col-md-8" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", { attrs: { for: "tmdb_api_key" } }, [t._v("Api key")]),
                                                                        t._v(" "),
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.tmdb_api_key, expression: "settings.tmdb_api_key" }],
                                                                            staticClass: "form-control",
                                                                            attrs: { id: "tmdb_api_key", type: "text" },
                                                                            domProps: { value: t.settings.tmdb_api_key },
                                                                            on: {
                                                                                input: function (e) {
                                                                                    e.target.composing || t.$set(t.settings, "tmdb_api_key", e.target.value);
                                                                                },
                                                                            },
                                                                        }),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s(
                                                                        "div",
                                                                        { staticClass: "form-group" },
                                                                        [
                                                                            s("label", { attrs: { for: "lang" } }, [t._v("Language")]),
                                                                            t._v(" "),
                                                                            null == t.settings.tmdb_api_key
                                                                                ? s("p", { staticClass: "text-primary" }, [t._v("\n                          You should add tmdb key to able to select langs\n                        ")])
                                                                                : t._e(),
                                                                            t._v(" "),
                                                                            s("multiselect", {
                                                                                attrs: { options: t.langs, label: "english_name", "track-by": "iso_639_1" },
                                                                                model: {
                                                                                    value: t.settings.tmdb_lang,
                                                                                    callback: function (e) {
                                                                                        t.$set(t.settings, "tmdb_lang", e);
                                                                                    },
                                                                                    expression: "settings.tmdb_lang",
                                                                                },
                                                                            }),
                                                                        ],
                                                                        1
                                                                    ),
                                                                ]),
                                                            ]),
                                                        ]),
                                                    ]),
                                                    t._v(" "),
                                                    s(
                                                        "div",
                                                        { staticClass: "tab-pane fade", attrs: { "aria-labelledby": "appsettings-tab", id: "appsettings", role: "tabpanel" } },
                                                        [
                                                            t._m(14),
                                                            t._v(" "),
                                                            t._m(15),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.force_password_access, expression: "settings.force_password_access" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "force_password_access", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.force_password_access) ? t._i(t.settings.force_password_access, null) > -1 : t.settings.force_password_access },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.force_password_access,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "force_password_access", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "force_password_access", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "force_password_access", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "force_password_access" } }, [t._v("Force Password To Access to the Application ?")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v("\n                          if this option is user need to enter the correct password before accessing to the main login page\n                        "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "settings" }, [
                                                                s("div", { staticClass: "row" }, [
                                                                    s("div", { staticClass: "col-md-4" }, [
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("label", { attrs: { for: "app_password_access" } }, [t._v("App Password")]),
                                                                            t._v(" "),
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.password, expression: "password" }],
                                                                                staticClass: "form-control",
                                                                                attrs: { id: "app_password_access", type: "text" },
                                                                                domProps: { value: t.password },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || (t.password = e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "settings" }, [
                                                                s("div", { staticClass: "row" }, [
                                                                    s(
                                                                        "button",
                                                                        {
                                                                            staticClass: "btn btn-primary mr-2",
                                                                            attrs: { disabled: t.password.length < 6, "aria-pressed": "true", type: "button" },
                                                                            on: {
                                                                                click: function (e) {
                                                                                    return e.preventDefault(), t.changeAppPassword();
                                                                                },
                                                                            },
                                                                        },
                                                                        [t._v("Update App Password Only")]
                                                                    ),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "settings" }, [
                                                                s("div", { staticClass: "row" }, [
                                                                    s("div", { staticClass: "col-md-6" }, [
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("div", { staticClass: "form-check" }, [
                                                                                s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                    s("input", {
                                                                                        directives: [{ name: "model", rawName: "v-model", value: t.settings.force_inappupdate, expression: "settings.force_inappupdate" }],
                                                                                        staticClass: "custom-control-input",
                                                                                        attrs: { id: "force_inappupdate", type: "checkbox" },
                                                                                        domProps: { checked: Array.isArray(t.settings.force_inappupdate) ? t._i(t.settings.force_inappupdate, null) > -1 : t.settings.force_inappupdate },
                                                                                        on: {
                                                                                            change: function (e) {
                                                                                                var s = t.settings.force_inappupdate,
                                                                                                    a = e.target,
                                                                                                    i = !!a.checked;
                                                                                                if (Array.isArray(s)) {
                                                                                                    var r = t._i(s, null);
                                                                                                    a.checked
                                                                                                        ? r < 0 && t.$set(t.settings, "force_inappupdate", s.concat([null]))
                                                                                                        : r > -1 && t.$set(t.settings, "force_inappupdate", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                                } else t.$set(t.settings, "force_inappupdate", i);
                                                                                            },
                                                                                        },
                                                                                    }),
                                                                                    t._v(" "),
                                                                                    s("label", { staticClass: "custom-control-label", attrs: { for: "force_inappupdate" } }, [t._v("Force InAppUpdate ?")]),
                                                                                    t._v(" "),
                                                                                    s("p", { staticClass: "text-primary" }, [
                                                                                        t._v(
                                                                                            "\n                          if this option is selected users can download the update inside the app without external link launcher.\n                        "
                                                                                        ),
                                                                                    ]),
                                                                                ]),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.force_update, expression: "settings.force_update" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "force_update", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.force_update) ? t._i(t.settings.force_update, null) > -1 : t.settings.force_update },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.force_update,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "force_update", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "force_update", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "force_update", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "force_update" } }, [t._v("Force Update ? ")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v("\n                          if this option will force users to update the app or they cannot use it !\n                        "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.flag_secure, expression: "settings.flag_secure" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "flag_secure", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.flag_secure) ? t._i(t.settings.flag_secure, null) > -1 : t.settings.flag_secure },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.flag_secure,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "flag_secure", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "flag_secure", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "flag_secure", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "flag_secure" } }, [t._v("Force FLAG_SECURE ?")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v("\n                          if this option is selected will prevent the OS to take a screenshot of the app.\n                        "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.enable_webview, expression: "settings.enable_webview" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "enable_webview", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.enable_webview) ? t._i(t.settings.enable_webview, null) > -1 : t.settings.enable_webview },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.enable_webview,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "enable_webview", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "enable_webview", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "enable_webview", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "enable_webview" } }, [t._v("Force Rewards Ads as Webview Ads ?")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v(
                                                                                    "\n                          if this option is selected Default Rewarded Network will be replaced with a webview page that will display your own ads\n\n                        link.\n                        "
                                                                                ),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "settings" }, [
                                                                s("div", { staticClass: "row" }, [
                                                                    s("div", { staticClass: "col-md-4" }, [
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("label", { attrs: { for: "webview_link" } }, [t._v("Rewarded Webview Ads Link")]),
                                                                            t._v(" "),
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.webview_link, expression: "settings.webview_link" }],
                                                                                staticClass: "form-control",
                                                                                attrs: { id: "webview_link", type: "text" },
                                                                                domProps: { value: t.settings.webview_link },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || t.$set(t.settings, "webview_link", e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            t._m(16),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.networks, expression: "settings.networks" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "networks", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.networks) ? t._i(t.settings.networks, null) > -1 : t.settings.networks },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.networks,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "networks", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "networks", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "networks", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "networks" } }, [t._v("Enable Networks ?")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v("\n                          if this option is selected Networks ( HomePage and Tab) will be disabled.\n                        "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "row" }, [
                                                                s("div", { staticClass: "col-md-4" }, [
                                                                    s(
                                                                        "div",
                                                                        { staticClass: "form-group" },
                                                                        [
                                                                            s("label", { attrs: { for: "lang" } }, [t._v("Default Layout for Networks")]),
                                                                            t._v(" "),
                                                                            s("multiselect", {
                                                                                attrs: { options: t.networks_layouts },
                                                                                model: {
                                                                                    value: t.settings.default_layout_networks,
                                                                                    callback: function (e) {
                                                                                        t.$set(t.settings, "default_layout_networks", e);
                                                                                    },
                                                                                    expression: "settings.default_layout_networks",
                                                                                },
                                                                            }),
                                                                        ],
                                                                        1
                                                                    ),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s(
                                                                "b-container",
                                                                { attrs: { fluid: "" } },
                                                                [
                                                                    s(
                                                                        "b-row",
                                                                        [
                                                                            s("b-col", [s("b-img", { attrs: { thumbnail: "", fluid: "", src: t.networks_layouts_options1, alt: "Image 1" } })], 1),
                                                                            t._v(" "),
                                                                            s("b-col", [s("b-img", { attrs: { thumbnail: "", fluid: "", src: t.networks_layouts_options2, alt: "Image 2" } })], 1),
                                                                        ],
                                                                        1
                                                                    ),
                                                                ],
                                                                1
                                                            ),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.suggest_auth, expression: "settings.suggest_auth" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "suggest_auth", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.suggest_auth) ? t._i(t.settings.suggest_auth, null) > -1 : t.settings.suggest_auth },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.suggest_auth,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "suggest_auth", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "suggest_auth", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "suggest_auth", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "suggest_auth" } }, [t._v("Force Suggestions only to Logged Users ?")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v("\n                          if this option only authenticated users can send a suggestion.\n                        "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.livetv_multi_servers, expression: "settings.livetv_multi_servers" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "livetv_multi_servers", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.livetv_multi_servers) ? t._i(t.settings.livetv_multi_servers, null) > -1 : t.settings.livetv_multi_servers },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.livetv_multi_servers,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "livetv_multi_servers", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "livetv_multi_servers", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "livetv_multi_servers", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "livetv_multi_servers" } }, [t._v("Enable Streaming Multi Servers ?")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v("\n                          if this option is selected live tv will have same system as movies to add multi servers.\n                        "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.notification_style, expression: "settings.notification_style" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "notification_style", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.notification_style) ? t._i(t.settings.notification_style, null) > -1 : t.settings.notification_style },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.notification_style,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "notification_style", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "notification_style", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "notification_style", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "notification_style" } }, [t._v("Enable Direct Enter Mode on Notification Click ?")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v(
                                                                                    "\n                          if this option is selected when the user click on the notification he will enter directly to the movie or episode stream directly.\n                        "
                                                                                ),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.notification_separated, expression: "settings.notification_separated" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "notification_separated", type: "checkbox" },
                                                                                domProps: {
                                                                                    checked: Array.isArray(t.settings.notification_separated) ? t._i(t.settings.notification_separated, null) > -1 : t.settings.notification_separated,
                                                                                },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.notification_separated,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "notification_separated", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "notification_separated", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "notification_separated", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "notification_separated" } }, [t._v("Send Notifications Separated ?")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v(
                                                                                    "\n                          if this option is selected if you sent a Notification the new one will not replace the old one if exist in the topbar\n                        "
                                                                                ),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.root_detection, expression: "settings.root_detection" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "root_detection", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.root_detection) ? t._i(t.settings.root_detection, null) > -1 : t.settings.root_detection },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.root_detection,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "root_detection", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "root_detection", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "root_detection", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "root_detection" } }, [t._v("Force Root Detection ? ")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v("\n                          if this option is selected users with rooted phones cannot use the app.\n                        "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.vpn, expression: "settings.vpn" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "vpn", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.vpn) ? t._i(t.settings.vpn, null) > -1 : t.settings.vpn },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.vpn,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked ? r < 0 && t.$set(t.settings, "vpn", s.concat([null])) : r > -1 && t.$set(t.settings, "vpn", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "vpn", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "vpn" } }, [t._v("Force Vpn Detection ? ")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v("\n                          if this option is selected app will check the vpn connexion!\n                        "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.separate_download, expression: "settings.separate_download" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "separate_download", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.separate_download) ? t._i(t.settings.separate_download, null) > -1 : t.settings.separate_download },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.separate_download,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "separate_download", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "separate_download", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "separate_download", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "separate_download" } }, [t._v("Separate Downloads from Stream links ?")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v("\n                          if this option is selected your downloads links will be separated from the main streams links\n                        "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.enable_download, expression: "settings.enable_download" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "enable_download", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.enable_download) ? t._i(t.settings.enable_download, null) > -1 : t.settings.enable_download },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.enable_download,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "enable_download", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "enable_download", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "enable_download", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "enable_download" } }, [t._v("Enable Downloads ?")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v("\n                          if this option is selected will enable download inside the app.\n                        "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "settings" }, [
                                                                s("div", { staticClass: "col-md-4" }, [
                                                                    s(
                                                                        "div",
                                                                        { staticClass: "form-group" },
                                                                        [
                                                                            s("label", { attrs: { for: "lang" } }, [t._v("Casts Options")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [t._v("\n                          Select how to use the actors inside the app .\n                        ")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [t._v("\n                          Select how to use the actors inside the app .\n                        ")]),
                                                                            t._v(" "),
                                                                            s("multiselect", {
                                                                                attrs: { options: t.options_cast },
                                                                                model: {
                                                                                    value: t.settings.default_cast_option,
                                                                                    callback: function (e) {
                                                                                        t.$set(t.settings, "default_cast_option", e);
                                                                                    },
                                                                                    expression: "settings.default_cast_option",
                                                                                },
                                                                            }),
                                                                        ],
                                                                        1
                                                                    ),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "settings" }, [
                                                                s("div", { staticClass: "col-md-4" }, [
                                                                    s(
                                                                        "div",
                                                                        { staticClass: "form-group" },
                                                                        [
                                                                            s("label", { attrs: { for: "lang" } }, [t._v("Trailer Options")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [t._v("\n                          Select your default source for trailers !\n                        ")]),
                                                                            t._v(" "),
                                                                            s("multiselect", {
                                                                                attrs: { options: t.options_trailers },
                                                                                model: {
                                                                                    value: t.settings.default_trailer_default,
                                                                                    callback: function (e) {
                                                                                        t.$set(t.settings, "default_trailer_default", e);
                                                                                    },
                                                                                    expression: "settings.default_trailer_default",
                                                                                },
                                                                            }),
                                                                        ],
                                                                        1
                                                                    ),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "settings" }, [
                                                                s("div", { staticClass: "row" }, [
                                                                    s("div", { staticClass: "col-md-4" }, [
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("label", { attrs: { for: "hxfile_api_key" } }, [t._v("Hxfile Api Key")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [t._v("\n                          Enter Hxfile api key\n                        ")]),
                                                                            t._v(" "),
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.hxfile_api_key, expression: "settings.hxfile_api_key" }],
                                                                                staticClass: "form-control",
                                                                                attrs: { id: "hxfile_api_key", type: "text" },
                                                                                domProps: { value: t.settings.hxfile_api_key },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || t.$set(t.settings, "hxfile_api_key", e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.favoriteonline, expression: "settings.favoriteonline" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "favoriteonline", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.favoriteonline) ? t._i(t.settings.favoriteonline, null) > -1 : t.settings.favoriteonline },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.favoriteonline,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "favoriteonline", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "favoriteonline", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "favoriteonline", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "favoriteonline" } }, [t._v("Enable Save Favorite as online feature ?")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v("\n                          if this option is selected users can add and save movies online.\n                        "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.email_verify, expression: "settings.email_verify" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "email_verify", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.email_verify) ? t._i(t.settings.email_verify, null) > -1 : t.settings.email_verify },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.email_verify,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "email_verify", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "email_verify", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "email_verify", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "email_verify" } }, [t._v("Force Email Verification ?")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v(
                                                                                    "\n                          if this option is selected users require to verify their email addresses before using the application.\n                        "
                                                                                ),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.force_login, expression: "settings.force_login" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "force_login", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.force_login) ? t._i(t.settings.force_login, null) > -1 : t.settings.force_login },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.force_login,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "force_login", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "force_login", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "force_login", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "force_login" } }, [t._v("Force Login ?")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v("\n                          if this option is selected users must login to access to the home page !\n                        "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.enable_banner_bottom, expression: "settings.enable_banner_bottom" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "enable_banner_bottom", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.enable_banner_bottom) ? t._i(t.settings.enable_banner_bottom, null) > -1 : t.settings.enable_banner_bottom },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.enable_banner_bottom,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "enable_banner_bottom", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "enable_banner_bottom", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "enable_banner_bottom", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "enable_banner_bottom" } }, [t._v("Enable Banner Ads on HomePage ( Bottom Position ) ?")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v(
                                                                                    "\n                          if this option is selected you will have banner in the bottom position on the home page above the bottom Navigation Menu\n                          note : you can only have one banner wich mean the active banner from ads tab will be on the bottom !\n                        "
                                                                                ),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "settings" }, [
                                                                s("div", { staticClass: "row" }, [
                                                                    s("div", { staticClass: "col-md-4" }, [
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("label", { attrs: { for: "user_agent" } }, [t._v("Default User Agent ( EasyPlexPlayer , vlc , MxPlayer and Embed )")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [t._v("\n                          Enter your prefered UserAgent to use it inside the players\n                        ")]),
                                                                            t._v(" "),
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.user_agent, expression: "settings.user_agent" }],
                                                                                staticClass: "form-control",
                                                                                attrs: { id: "app_url_android", type: "text" },
                                                                                domProps: { value: t.settings.user_agent },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || t.$set(t.settings, "user_agent", e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "col-md-6" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.resume_offline, expression: "settings.resume_offline" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "resume_offline", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.resume_offline) ? t._i(t.settings.resume_offline, null) > -1 : t.settings.resume_offline },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.resume_offline,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "resume_offline", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "resume_offline", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "resume_offline", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "resume_offline" } }, [t._v("Save Countinue watching info offline ? ( Recommended) ")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v(
                                                                                    "\n                          if this option is selected your resume movies info will be used from the user phone to save your server ressources.\n                        "
                                                                                ),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "col-md-6" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.enable_vlc, expression: "settings.enable_vlc" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "enable_vlc", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.enable_vlc) ? t._i(t.settings.enable_vlc, null) > -1 : t.settings.enable_vlc },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.enable_vlc,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "enable_vlc", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "enable_vlc", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "enable_vlc", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "enable_vlc" } }, [t._v("Enable Vlc and MXPlayer as Launch Options ?")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v("\n                          if this option is selected the user will be able to select the player video to play the movie .\n                        "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "col-md-6" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.enable_pinned, expression: "settings.enable_pinned" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "enable_pinned", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.enable_pinned) ? t._i(t.settings.enable_pinned, null) > -1 : t.settings.enable_pinned },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.enable_pinned,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "enable_pinned", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "enable_pinned", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "enable_pinned", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "enable_pinned" } }, [t._v("Enable Pinned (HomePage)")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v(
                                                                                    "\n                          if this option is selected the homepage will display a list of movies or series or animes that has a pinned checkbox activated .\n                        "
                                                                                ),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "col-md-6" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.enable_upcoming, expression: "settings.enable_upcoming" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { id: "enable_upcoming", type: "checkbox" },
                                                                                domProps: { checked: Array.isArray(t.settings.enable_upcoming) ? t._i(t.settings.enable_upcoming, null) > -1 : t.settings.enable_upcoming },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.enable_upcoming,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "enable_upcoming", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "enable_upcoming", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "enable_upcoming", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "enable_upcoming" } }, [t._v("Enable Upcoming (HomePage)")]),
                                                                            t._v(" "),
                                                                            s("p", { staticClass: "text-primary" }, [
                                                                                t._v("\n                          if this option is selected the homepage will display a list of Upcoming movies and series.\n                        "),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "settings" }, [
                                                                s("div", { staticClass: "row" }, [
                                                                    s("div", { staticClass: "col-md-4" }, [
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("label", { attrs: { for: "splash_image" } }, [t._v("Splash Image")]),
                                                                            t._v(" "),
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.splash_image, expression: "settings.splash_image" }],
                                                                                staticClass: "form-control",
                                                                                attrs: { id: "splash_image", type: "text" },
                                                                                domProps: { value: t.settings.splash_image },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || t.$set(t.settings, "splash_image", e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "row" }, [
                                                                    s("div", { staticClass: "col-md-4" }, [
                                                                        t.settings.splash_image ? s("img", { staticClass: "splash", attrs: { src: t.settings.splash_image, "data-loaded": "true", height: "300", width: "169" } }) : t._e(),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "row" }, [
                                                                    s("div", { staticClass: "col-md-4" }, [
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("label", [t._v("Splash Image Upload ")]),
                                                                            t._v(" "),
                                                                            s("input", { staticClass: "file-upload-default" }),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "input-group col-xs-12" }, [
                                                                                s("input", {
                                                                                    staticClass: "form-control file-upload-info",
                                                                                    attrs: { id: "poster", placeholder: "Upload Image", type: "file" },
                                                                                    on: { change: t.storePosterSplash },
                                                                                }),
                                                                                t._v(" "),
                                                                                t._m(17),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s("div", { staticClass: "form-check" }, [
                                                                            s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.settings.mantenance_mode, expression: "settings.mantenance_mode" }],
                                                                                    staticClass: "custom-control-input",
                                                                                    attrs: { id: "mantenance_mode", type: "checkbox" },
                                                                                    domProps: { checked: Array.isArray(t.settings.mantenance_mode) ? t._i(t.settings.mantenance_mode, null) > -1 : t.settings.mantenance_mode },
                                                                                    on: {
                                                                                        change: function (e) {
                                                                                            var s = t.settings.mantenance_mode,
                                                                                                a = e.target,
                                                                                                i = !!a.checked;
                                                                                            if (Array.isArray(s)) {
                                                                                                var r = t._i(s, null);
                                                                                                a.checked
                                                                                                    ? r < 0 && t.$set(t.settings, "mantenance_mode", s.concat([null]))
                                                                                                    : r > -1 && t.$set(t.settings, "mantenance_mode", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                            } else t.$set(t.settings, "mantenance_mode", i);
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("label", { staticClass: "custom-control-label", attrs: { for: "mantenance_mode" } }, [t._v("Enable Mantenance Mode ?")]),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "col-md-12" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", { attrs: { for: "releaseNotes" } }, [t._v("Mantenance Message")]),
                                                                        t._v(" "),
                                                                        s("textarea", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.mantenance_mode_message, expression: "settings.mantenance_mode_message" }],
                                                                            staticClass: "form-control pb-3",
                                                                            attrs: { id: "releaseNotes", rows: "8", type: "text" },
                                                                            domProps: { value: t.settings.mantenance_mode_message },
                                                                            on: {
                                                                                input: function (e) {
                                                                                    e.target.composing || t.$set(t.settings, "mantenance_mode_message", e.target.value);
                                                                                },
                                                                            },
                                                                        }),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "settings" }, [
                                                                    s("div", { staticClass: "col-md-6" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [
                                                                                s("label", { attrs: { for: "lang" } }, [t._v("Downloads Options")]),
                                                                                t._v(" "),
                                                                                s("multiselect", {
                                                                                    attrs: { options: t.optionsDownloads },
                                                                                    model: {
                                                                                        value: t.settings.default_downloads_options,
                                                                                        callback: function (e) {
                                                                                            t.$set(t.settings, "default_downloads_options", e);
                                                                                        },
                                                                                        expression: "settings.default_downloads_options",
                                                                                    },
                                                                                }),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s("div", { staticClass: "form-check" }, [
                                                                            s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.settings.allow_adm, expression: "settings.allow_adm" }],
                                                                                    staticClass: "custom-control-input",
                                                                                    attrs: { id: "allow_adm", type: "checkbox" },
                                                                                    domProps: { checked: Array.isArray(t.settings.allow_adm) ? t._i(t.settings.allow_adm, null) > -1 : t.settings.allow_adm },
                                                                                    on: {
                                                                                        change: function (e) {
                                                                                            var s = t.settings.allow_adm,
                                                                                                a = e.target,
                                                                                                i = !!a.checked;
                                                                                            if (Array.isArray(s)) {
                                                                                                var r = t._i(s, null);
                                                                                                a.checked
                                                                                                    ? r < 0 && t.$set(t.settings, "allow_adm", s.concat([null]))
                                                                                                    : r > -1 && t.$set(t.settings, "allow_adm", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                            } else t.$set(t.settings, "allow_adm", i);
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("label", { staticClass: "custom-control-label", attrs: { for: "allow_adm" } }, [
                                                                                    t._v("Allow use of ADM (External app for\n                              Downloads)?"),
                                                                                ]),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s("div", { staticClass: "form-check" }, [
                                                                            s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.settings.autosubstitles, expression: "settings.autosubstitles" }],
                                                                                    staticClass: "custom-control-input",
                                                                                    attrs: { id: "autosubstitles", type: "checkbox" },
                                                                                    domProps: { checked: Array.isArray(t.settings.autosubstitles) ? t._i(t.settings.autosubstitles, null) > -1 : t.settings.autosubstitles },
                                                                                    on: {
                                                                                        change: function (e) {
                                                                                            var s = t.settings.autosubstitles,
                                                                                                a = e.target,
                                                                                                i = !!a.checked;
                                                                                            if (Array.isArray(s)) {
                                                                                                var r = t._i(s, null);
                                                                                                a.checked
                                                                                                    ? r < 0 && t.$set(t.settings, "autosubstitles", s.concat([null]))
                                                                                                    : r > -1 && t.$set(t.settings, "autosubstitles", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                            } else t.$set(t.settings, "autosubstitles", i);
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("label", { staticClass: "custom-control-label", attrs: { for: "autosubstitles" } }, [t._v("Auto Fetch Substitles\n                            ")]),
                                                                                t._v(" "),
                                                                                s("p", { staticClass: "card-description" }, [
                                                                                    t._v(
                                                                                        "\n                              if this option is activated it will replace the\n                              custom substiles !\n                            "
                                                                                    ),
                                                                                ]),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s("div", { staticClass: "form-check" }, [
                                                                            s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.settings.server_dialog_selection, expression: "settings.server_dialog_selection" }],
                                                                                    staticClass: "custom-control-input",
                                                                                    attrs: { id: "server_dialog_selection", type: "checkbox" },
                                                                                    domProps: {
                                                                                        checked: Array.isArray(t.settings.server_dialog_selection) ? t._i(t.settings.server_dialog_selection, null) > -1 : t.settings.server_dialog_selection,
                                                                                    },
                                                                                    on: {
                                                                                        change: function (e) {
                                                                                            var s = t.settings.server_dialog_selection,
                                                                                                a = e.target,
                                                                                                i = !!a.checked;
                                                                                            if (Array.isArray(s)) {
                                                                                                var r = t._i(s, null);
                                                                                                a.checked
                                                                                                    ? r < 0 && t.$set(t.settings, "server_dialog_selection", s.concat([null]))
                                                                                                    : r > -1 && t.$set(t.settings, "server_dialog_selection", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                            } else t.$set(t.settings, "server_dialog_selection", i);
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("label", { staticClass: "custom-control-label", attrs: { for: "server_dialog_selection" } }, [t._v("Enable Servers Selection Dialog ?")]),
                                                                                t._v(" "),
                                                                                s("p", { staticClass: "text-primary" }, [
                                                                                    t._v(
                                                                                        "\n                              if this option is activated you can select a\n                              server before playing any media !\n                            "
                                                                                    ),
                                                                                ]),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s("div", { staticClass: "form-check" }, [
                                                                            s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.settings.ads_player, expression: "settings.ads_player" }],
                                                                                    staticClass: "custom-control-input",
                                                                                    attrs: { id: "ads_player", type: "checkbox" },
                                                                                    domProps: { checked: Array.isArray(t.settings.ads_player) ? t._i(t.settings.ads_player, null) > -1 : t.settings.ads_player },
                                                                                    on: {
                                                                                        change: function (e) {
                                                                                            var s = t.settings.ads_player,
                                                                                                a = e.target,
                                                                                                i = !!a.checked;
                                                                                            if (Array.isArray(s)) {
                                                                                                var r = t._i(s, null);
                                                                                                a.checked
                                                                                                    ? r < 0 && t.$set(t.settings, "ads_player", s.concat([null]))
                                                                                                    : r > -1 && t.$set(t.settings, "ads_player", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                            } else t.$set(t.settings, "ads_player", i);
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("label", { staticClass: "custom-control-label", attrs: { for: "ads_player" } }, [t._v("Enable Vast Ads Player")]),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s("div", { staticClass: "form-check" }, [
                                                                            s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.settings.streaming, expression: "settings.streaming" }],
                                                                                    staticClass: "custom-control-input",
                                                                                    attrs: { id: "streaming", type: "checkbox" },
                                                                                    domProps: { checked: Array.isArray(t.settings.streaming) ? t._i(t.settings.streaming, null) > -1 : t.settings.streaming },
                                                                                    on: {
                                                                                        change: function (e) {
                                                                                            var s = t.settings.streaming,
                                                                                                a = e.target,
                                                                                                i = !!a.checked;
                                                                                            if (Array.isArray(s)) {
                                                                                                var r = t._i(s, null);
                                                                                                a.checked
                                                                                                    ? r < 0 && t.$set(t.settings, "streaming", s.concat([null]))
                                                                                                    : r > -1 && t.$set(t.settings, "streaming", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                            } else t.$set(t.settings, "streaming", i);
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("label", { staticClass: "custom-control-label", attrs: { for: "streaming" } }, [t._v("Streaming")]),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s("div", { staticClass: "form-check" }, [
                                                                            s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.settings.anime, expression: "settings.anime" }],
                                                                                    staticClass: "custom-control-input",
                                                                                    attrs: { id: "anime", type: "checkbox" },
                                                                                    domProps: { checked: Array.isArray(t.settings.anime) ? t._i(t.settings.anime, null) > -1 : t.settings.anime },
                                                                                    on: {
                                                                                        change: function (e) {
                                                                                            var s = t.settings.anime,
                                                                                                a = e.target,
                                                                                                i = !!a.checked;
                                                                                            if (Array.isArray(s)) {
                                                                                                var r = t._i(s, null);
                                                                                                a.checked
                                                                                                    ? r < 0 && t.$set(t.settings, "anime", s.concat([null]))
                                                                                                    : r > -1 && t.$set(t.settings, "anime", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                            } else t.$set(t.settings, "anime", i);
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("label", { staticClass: "custom-control-label", attrs: { for: "anime" } }, [t._v("Anime")]),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "row" }, [
                                                                    s("div", { staticClass: "col-md-8" }, [
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("div", { staticClass: "row" }, [
                                                                                s("div", { staticClass: "col-md-8" }, [
                                                                                    s("div", { staticClass: "form-group" }, [
                                                                                        s("label", { attrs: { for: "next_episode_timer" } }, [t._v("Next Episode Timer ( in sec )")]),
                                                                                        t._v(" "),
                                                                                        s("input", {
                                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.next_episode_timer, expression: "settings.next_episode_timer" }],
                                                                                            staticClass: "form-control",
                                                                                            attrs: { id: "next_episode_timer", type: "text" },
                                                                                            domProps: { value: t.settings.next_episode_timer },
                                                                                            on: {
                                                                                                input: function (e) {
                                                                                                    e.target.composing || t.$set(t.settings, "next_episode_timer", e.target.value);
                                                                                                },
                                                                                            },
                                                                                        }),
                                                                                    ]),
                                                                                ]),
                                                                            ]),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "row" }, [
                                                                                s("div", { staticClass: "col-md-8" }, [
                                                                                    s("div", { staticClass: "form-group" }, [
                                                                                        s("label", { attrs: { for: "default_media_placeholder_path" } }, [t._v("Default Empty Media Cover (Player)")]),
                                                                                        t._v(" "),
                                                                                        s("input", {
                                                                                            directives: [
                                                                                                {
                                                                                                    name: "model",
                                                                                                    rawName: "v-model",
                                                                                                    value: t.settings.default_media_placeholder_path,
                                                                                                    expression: "\n                                    settings.default_media_placeholder_path\n                                  ",
                                                                                                },
                                                                                            ],
                                                                                            staticClass: "form-control",
                                                                                            attrs: { id: "default_media_placeholder_path", type: "text" },
                                                                                            domProps: { value: t.settings.default_media_placeholder_path },
                                                                                            on: {
                                                                                                input: function (e) {
                                                                                                    e.target.composing || t.$set(t.settings, "default_media_placeholder_path", e.target.value);
                                                                                                },
                                                                                            },
                                                                                        }),
                                                                                    ]),
                                                                                ]),
                                                                                t._v(" "),
                                                                                t.settings.default_media_placeholder_path
                                                                                    ? s("img", { staticClass: "poster", attrs: { src: t.settings.default_media_placeholder_path, "data-loaded": "true", height: "316", width: "210" } })
                                                                                    : t._e(),
                                                                            ]),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "row" }, [
                                                                                s("div", { staticClass: "col-md-12" }, [
                                                                                    s("div", { staticClass: "form-group" }, [
                                                                                        s("label", [t._v("Default Empty Media Cover (Player) Upload\n                                ")]),
                                                                                        t._v(" "),
                                                                                        s("input", { staticClass: "file-upload-default" }),
                                                                                        t._v(" "),
                                                                                        s("div", { staticClass: "input-group col-xs-12" }, [
                                                                                            s("input", {
                                                                                                staticClass: "form-control file-upload-info",
                                                                                                attrs: { id: "poster", placeholder: "Upload Image", type: "file" },
                                                                                                on: { change: t.storePosterPlaceHoder },
                                                                                            }),
                                                                                            t._v(" "),
                                                                                            t._m(18),
                                                                                        ]),
                                                                                    ]),
                                                                                ]),
                                                                            ]),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "row" }, [
                                                                                s("div", { staticClass: "col-md-8" }, [
                                                                                    s("div", { staticClass: "form-group" }, [
                                                                                        s("label", { attrs: { for: "imdb_cover_path" } }, [t._v("IMDB Cover Path")]),
                                                                                        t._v(" "),
                                                                                        s("input", {
                                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.imdb_cover_path, expression: "settings.imdb_cover_path" }],
                                                                                            staticClass: "form-control",
                                                                                            attrs: { id: "imdb_cover_path", type: "text" },
                                                                                            domProps: { value: t.settings.imdb_cover_path },
                                                                                            on: {
                                                                                                input: function (e) {
                                                                                                    e.target.composing || t.$set(t.settings, "imdb_cover_path", e.target.value);
                                                                                                },
                                                                                            },
                                                                                        }),
                                                                                    ]),
                                                                                ]),
                                                                            ]),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "row" }, [
                                                                                s("div", { staticClass: "col-md-8" }, [
                                                                                    s("div", { staticClass: "form-group" }, [
                                                                                        s("label", { attrs: { for: "app_name" } }, [t._v("App Android Url")]),
                                                                                        t._v(" "),
                                                                                        s("input", {
                                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.app_url_android, expression: "settings.app_url_android" }],
                                                                                            staticClass: "form-control",
                                                                                            attrs: { id: "app_url_android", type: "text" },
                                                                                            domProps: { value: t.settings.app_url_android },
                                                                                            on: {
                                                                                                input: function (e) {
                                                                                                    e.target.composing || t.$set(t.settings, "app_url_android", e.target.value);
                                                                                                },
                                                                                            },
                                                                                        }),
                                                                                    ]),
                                                                                ]),
                                                                            ]),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "row" }, [
                                                                                s("div", { staticClass: "col-md-8" }, [
                                                                                    s("div", { staticClass: "form-group" }, [
                                                                                        s("label", { attrs: { for: "app_name" } }, [t._v("Facebook Url")]),
                                                                                        t._v(" "),
                                                                                        s("input", {
                                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.facebook_url, expression: "settings.facebook_url" }],
                                                                                            staticClass: "form-control",
                                                                                            attrs: { id: "app_url_android", type: "text" },
                                                                                            domProps: { value: t.settings.facebook_url },
                                                                                            on: {
                                                                                                input: function (e) {
                                                                                                    e.target.composing || t.$set(t.settings, "facebook_url", e.target.value);
                                                                                                },
                                                                                            },
                                                                                        }),
                                                                                    ]),
                                                                                ]),
                                                                            ]),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "row" }, [
                                                                                s("div", { staticClass: "col-md-8" }, [
                                                                                    s("div", { staticClass: "form-group" }, [
                                                                                        s("label", { attrs: { for: "app_name" } }, [t._v("Twitter Url")]),
                                                                                        t._v(" "),
                                                                                        s("input", {
                                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.twitter_url, expression: "settings.twitter_url" }],
                                                                                            staticClass: "form-control",
                                                                                            attrs: { id: "app_url_android", type: "text" },
                                                                                            domProps: { value: t.settings.twitter_url },
                                                                                            on: {
                                                                                                input: function (e) {
                                                                                                    e.target.composing || t.$set(t.settings, "twitter_url", e.target.value);
                                                                                                },
                                                                                            },
                                                                                        }),
                                                                                    ]),
                                                                                ]),
                                                                            ]),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "row" }, [
                                                                                s("div", { staticClass: "col-md-8" }, [
                                                                                    s("div", { staticClass: "form-group" }, [
                                                                                        s("label", { attrs: { for: "app_name" } }, [t._v("Instagram Url")]),
                                                                                        t._v(" "),
                                                                                        s("input", {
                                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.instagram_url, expression: "settings.instagram_url" }],
                                                                                            staticClass: "form-control",
                                                                                            attrs: { id: "app_url_android", type: "text" },
                                                                                            domProps: { value: t.settings.instagram_url },
                                                                                            on: {
                                                                                                input: function (e) {
                                                                                                    e.target.composing || t.$set(t.settings, "instagram_url", e.target.value);
                                                                                                },
                                                                                            },
                                                                                        }),
                                                                                    ]),
                                                                                ]),
                                                                            ]),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "row" }, [
                                                                                s("div", { staticClass: "col-md-8" }, [
                                                                                    s("div", { staticClass: "form-group" }, [
                                                                                        s("label", { attrs: { for: "telegram_url" } }, [t._v("Telegram Url")]),
                                                                                        t._v(" "),
                                                                                        s("input", {
                                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.telegram_url, expression: "settings.telegram_url" }],
                                                                                            staticClass: "form-control",
                                                                                            attrs: { id: "telegram_url", type: "text" },
                                                                                            domProps: { value: t.settings.telegram_url },
                                                                                            on: {
                                                                                                input: function (e) {
                                                                                                    e.target.composing || t.$set(t.settings, "telegram_url", e.target.value);
                                                                                                },
                                                                                            },
                                                                                        }),
                                                                                    ]),
                                                                                ]),
                                                                            ]),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "row" }, [
                                                                                s("div", { staticClass: "col-md-8" }, [
                                                                                    s("div", { staticClass: "form-group" }, [
                                                                                        s("label", { attrs: { for: "featured_home_numbers" } }, [
                                                                                            t._v("\n                                  Featured Elements Numbers\n                                "),
                                                                                        ]),
                                                                                        t._v(" "),
                                                                                        s("input", {
                                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.featured_home_numbers, expression: "settings.featured_home_numbers" }],
                                                                                            staticClass: "form-control",
                                                                                            attrs: { id: "featured_home_numbers", type: "text" },
                                                                                            domProps: { value: t.settings.featured_home_numbers },
                                                                                            on: {
                                                                                                input: function (e) {
                                                                                                    e.target.composing || t.$set(t.settings, "featured_home_numbers", e.target.value);
                                                                                                },
                                                                                            },
                                                                                        }),
                                                                                    ]),
                                                                                ]),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ],
                                                        1
                                                    ),
                                                    t._v(" "),
                                                    s("div", { staticClass: "tab-pane fade", attrs: { "aria-labelledby": "payments-tab", id: "payments", role: "tabpanel" } }, [
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "col-md-6" }, [
                                                                s(
                                                                    "div",
                                                                    { staticClass: "form-group" },
                                                                    [
                                                                        s("label", { attrs: { for: "lang" } }, [t._v("Default Payment")]),
                                                                        t._v(" "),
                                                                        s("multiselect", {
                                                                            attrs: { options: t.payments_options },
                                                                            model: {
                                                                                value: t.settings.default_payment,
                                                                                callback: function (e) {
                                                                                    t.$set(t.settings, "default_payment", e);
                                                                                },
                                                                                expression: "settings.default_payment",
                                                                            },
                                                                        }),
                                                                    ],
                                                                    1
                                                                ),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "row" }, [
                                                                s("div", { staticClass: "col-md-8" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", { attrs: { for: "paypal_client_id" } }, [t._v("Paypal Client ID")]),
                                                                        t._v(" "),
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.paypal_client_id, expression: "settings.paypal_client_id" }],
                                                                            staticClass: "form-control",
                                                                            attrs: { id: "paypal_client_id", type: "text" },
                                                                            domProps: { value: t.settings.paypal_client_id },
                                                                            on: {
                                                                                input: function (e) {
                                                                                    e.target.composing || t.$set(t.settings, "paypal_client_id", e.target.value);
                                                                                },
                                                                            },
                                                                        }),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", { attrs: { for: "paypal_currency" } }, [t._v("Paypal Currency")]),
                                                                        t._v(" "),
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.paypal_currency, expression: "settings.paypal_currency" }],
                                                                            staticClass: "form-control",
                                                                            attrs: { id: "paypal_currency", type: "text" },
                                                                            domProps: { value: t.settings.paypal_currency },
                                                                            on: {
                                                                                input: function (e) {
                                                                                    e.target.composing || t.$set(t.settings, "paypal_currency", e.target.value);
                                                                                },
                                                                            },
                                                                        }),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", { attrs: { for: "stripe_publishable_key" } }, [t._v("Stripe Publishable key")]),
                                                                        t._v(" "),
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.stripe_publishable_key, expression: "settings.stripe_publishable_key" }],
                                                                            staticClass: "form-control",
                                                                            attrs: { id: "stripe_publishable_key", type: "text" },
                                                                            domProps: { value: t.settings.stripe_publishable_key },
                                                                            on: {
                                                                                input: function (e) {
                                                                                    e.target.composing || t.$set(t.settings, "stripe_publishable_key", e.target.value);
                                                                                },
                                                                            },
                                                                        }),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", { attrs: { for: "stripe_secret_key" } }, [t._v("Stripe Secret key")]),
                                                                        t._v(" "),
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.stripe_secret_key, expression: "settings.stripe_secret_key" }],
                                                                            staticClass: "form-control",
                                                                            attrs: { id: "stripe_secret_key", type: "text" },
                                                                            domProps: { value: t.settings.stripe_secret_key },
                                                                            on: {
                                                                                input: function (e) {
                                                                                    e.target.composing || t.$set(t.settings, "stripe_secret_key", e.target.value);
                                                                                },
                                                                            },
                                                                        }),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                    ]),
                                                    t._v(" "),
                                                    s("div", { staticClass: "tab-pane fade", attrs: { "aria-labelledby": "emails-tab", id: "emails", role: "tabpanel" } }, [
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "row" }, [
                                                                s("div", { staticClass: "col-md-12" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", { attrs: { for: "releaseNotes" } }, [t._v("Reset Password Message")]),
                                                                        t._v(" "),
                                                                        s("textarea", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.reset_password_message, expression: "settings.reset_password_message" }],
                                                                            staticClass: "form-control pb-3",
                                                                            attrs: { id: "reset_password_message", rows: "10", type: "text" },
                                                                            domProps: { value: t.settings.reset_password_message },
                                                                            on: {
                                                                                input: function (e) {
                                                                                    e.target.composing || t.$set(t.settings, "reset_password_message", e.target.value);
                                                                                },
                                                                            },
                                                                        }),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                    ]),
                                                    t._v(" "),
                                                    s("div", { staticClass: "tab-pane fade", attrs: { "aria-labelledby": "aws-tab", id: "aws", role: "tabpanel" } }, [
                                                        s("div", { staticClass: "settings" }, [
                                                            s("div", { staticClass: "row mb-2" }, [
                                                                s("div", { staticClass: "col-md-3" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-switch ml-2" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.aws_s3_storage, expression: "settings.aws_s3_storage" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { type: "checkbox", id: "aws_s3_storage" },
                                                                                domProps: { checked: Array.isArray(t.settings.aws_s3_storage) ? t._i(t.settings.aws_s3_storage, null) > -1 : t.settings.aws_s3_storage },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.aws_s3_storage,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "aws_s3_storage", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "aws_s3_storage", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "aws_s3_storage", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "aws_s3_storage" } }, [t._v("AWS S3 Storage")]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "row" }, [
                                                                s("div", { staticClass: "col-md-12" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", { attrs: { for: "aws_access_key_id" } }, [t._v("AWS access key ID")]),
                                                                        t._v(" "),
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.aws_access_key_id, expression: "settings.aws_access_key_id" }],
                                                                            staticClass: "form-control",
                                                                            attrs: { id: "aws_access_key_id", type: "text" },
                                                                            domProps: { value: t.settings.aws_access_key_id },
                                                                            on: {
                                                                                input: function (e) {
                                                                                    e.target.composing || t.$set(t.settings, "aws_access_key_id", e.target.value);
                                                                                },
                                                                            },
                                                                        }),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "col-md-12" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", { attrs: { for: "aws_secret_access_key" } }, [t._v("AWS secret access key")]),
                                                                        t._v(" "),
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.aws_secret_access_key, expression: "settings.aws_secret_access_key" }],
                                                                            staticClass: "form-control",
                                                                            attrs: { id: "aws_secret_access_key", type: "text" },
                                                                            domProps: { value: t.settings.aws_secret_access_key },
                                                                            on: {
                                                                                input: function (e) {
                                                                                    e.target.composing || t.$set(t.settings, "aws_secret_access_key", e.target.value);
                                                                                },
                                                                            },
                                                                        }),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "col-md-12" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", { attrs: { for: "aws_default_region" } }, [t._v("AWS default region")]),
                                                                        t._v(" "),
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.aws_default_region, expression: "settings.aws_default_region" }],
                                                                            staticClass: "form-control",
                                                                            attrs: { id: "aws_default_region", type: "text" },
                                                                            domProps: { value: t.settings.aws_default_region },
                                                                            on: {
                                                                                input: function (e) {
                                                                                    e.target.composing || t.$set(t.settings, "aws_default_region", e.target.value);
                                                                                },
                                                                            },
                                                                        }),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "col-md-12" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", { attrs: { for: "aws_bucket" } }, [t._v("AWS bucket")]),
                                                                        t._v(" "),
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.aws_bucket, expression: "settings.aws_bucket" }],
                                                                            staticClass: "form-control",
                                                                            attrs: { id: "aws_bucket", type: "text" },
                                                                            domProps: { value: t.settings.aws_bucket },
                                                                            on: {
                                                                                input: function (e) {
                                                                                    e.target.composing || t.$set(t.settings, "aws_bucket", e.target.value);
                                                                                },
                                                                            },
                                                                        }),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "row mb-2" }, [
                                                                s("div", { staticClass: "col-md-3" }, [
                                                                    s("div", { staticClass: "form-check" }, [
                                                                        s("div", { staticClass: "custom-control custom-switch ml-2" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.settings.wasabi_storage, expression: "settings.wasabi_storage" }],
                                                                                staticClass: "custom-control-input",
                                                                                attrs: { type: "checkbox", id: "wasabi_storage" },
                                                                                domProps: { checked: Array.isArray(t.settings.wasabi_storage) ? t._i(t.settings.wasabi_storage, null) > -1 : t.settings.wasabi_storage },
                                                                                on: {
                                                                                    change: function (e) {
                                                                                        var s = t.settings.wasabi_storage,
                                                                                            a = e.target,
                                                                                            i = !!a.checked;
                                                                                        if (Array.isArray(s)) {
                                                                                            var r = t._i(s, null);
                                                                                            a.checked
                                                                                                ? r < 0 && t.$set(t.settings, "wasabi_storage", s.concat([null]))
                                                                                                : r > -1 && t.$set(t.settings, "wasabi_storage", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                        } else t.$set(t.settings, "wasabi_storage", i);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { staticClass: "custom-control-label", attrs: { for: "wasabi_storage" } }, [t._v("Wasabi Storage")]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "row" }, [
                                                                s("div", { staticClass: "col-md-12" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", { attrs: { for: "wasabi_access_key_id" } }, [t._v("Wasabi access key ID")]),
                                                                        t._v(" "),
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.wasabi_access_key_id, expression: "settings.wasabi_access_key_id" }],
                                                                            staticClass: "form-control",
                                                                            attrs: { id: "wasabi_access_key_id", type: "text" },
                                                                            domProps: { value: t.settings.wasabi_access_key_id },
                                                                            on: {
                                                                                input: function (e) {
                                                                                    e.target.composing || t.$set(t.settings, "wasabi_access_key_id", e.target.value);
                                                                                },
                                                                            },
                                                                        }),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "col-md-12" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", { attrs: { for: "wasabi_secret_access_key" } }, [t._v("Wasabi secret access key")]),
                                                                        t._v(" "),
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.wasabi_secret_access_key, expression: "settings.wasabi_secret_access_key" }],
                                                                            staticClass: "form-control",
                                                                            attrs: { id: "wasabi_secret_access_key", type: "text" },
                                                                            domProps: { value: t.settings.wasabi_secret_access_key },
                                                                            on: {
                                                                                input: function (e) {
                                                                                    e.target.composing || t.$set(t.settings, "wasabi_secret_access_key", e.target.value);
                                                                                },
                                                                            },
                                                                        }),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "col-md-12" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", { attrs: { for: "wasabi_default_region" } }, [t._v("Wasabi default region")]),
                                                                        t._v(" "),
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.wasabi_default_region, expression: "settings.wasabi_default_region" }],
                                                                            staticClass: "form-control",
                                                                            attrs: { id: "wasabi_default_region", type: "text" },
                                                                            domProps: { value: t.settings.wasabi_default_region },
                                                                            on: {
                                                                                input: function (e) {
                                                                                    e.target.composing || t.$set(t.settings, "wasabi_default_region", e.target.value);
                                                                                },
                                                                            },
                                                                        }),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "col-md-12" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", { attrs: { for: "wasabi_bucket" } }, [t._v("Wasabi bucket")]),
                                                                        t._v(" "),
                                                                        s("input", {
                                                                            directives: [{ name: "model", rawName: "v-model", value: t.settings.wasabi_bucket, expression: "settings.wasabi_bucket" }],
                                                                            staticClass: "form-control",
                                                                            attrs: { id: "wasabi_bucket", type: "text" },
                                                                            domProps: { value: t.settings.wasabi_bucket },
                                                                            on: {
                                                                                input: function (e) {
                                                                                    e.target.composing || t.$set(t.settings, "wasabi_bucket", e.target.value);
                                                                                },
                                                                            },
                                                                        }),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                    ]),
                                                    t._v(" "),
                                                    s("div", { staticClass: "tab-pane fade", attrs: { "aria-labelledby": "laravel-options-tab", id: "laravel-options", role: "tabpanel" } }),
                                                ]),
                                            ]),
                                        ]),
                                        t._v(" "),
                                        s(
                                            "button",
                                            {
                                                staticClass: "btn btn-primary mr-2",
                                                attrs: { "aria-pressed": "true", type: "button" },
                                                on: {
                                                    click: function (e) {
                                                        return e.preventDefault(), t.update();
                                                    },
                                                },
                                            },
                                            [t._v("\n            Update\n          ")]
                                        ),
                                    ]),
                                ]),
                            ]),
                        ]);
                    },
                    [
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("ul", { staticClass: "nav nav-tabs", attrs: { id: "myTab", role: "tablist" } }, [
                                s("li", { staticClass: "nav-item" }, [
                                    s("a", { staticClass: "nav-link active", attrs: { "aria-controls": "brand", "aria-selected": "true", "data-toggle": "tab", href: "#brand", id: "brand-tab", role: "tab" } }, [t._v("General")]),
                                ]),
                                t._v(" "),
                                s("li", { staticClass: "nav-item" }, [
                                    s("a", { staticClass: "nav-link", attrs: { "aria-controls": "firebase", "aria-selected": "false", "data-toggle": "tab", href: "#firebase", id: "firebase-tab", role: "tab" } }, [
                                        t._v("Notification Service"),
                                    ]),
                                ]),
                                t._v(" "),
                                s("li", { staticClass: "nav-item" }, [
                                    s("a", { staticClass: "nav-link", attrs: { "aria-controls": "tmdb", "aria-selected": "false", "data-toggle": "tab", href: "#tmdb", id: "tmdb-tab", role: "tab" } }, [t._v("TMDB Api Key")]),
                                ]),
                                t._v(" "),
                                s("li", { staticClass: "nav-item" }, [
                                    s("a", { staticClass: "nav-link", attrs: { "aria-controls": "code", "aria-selected": "false", "data-toggle": "tab", href: "#code", id: "code-tab", role: "tab" } }, [t._v("Purchase Code")]),
                                ]),
                                t._v(" "),
                                s("li", { staticClass: "nav-item" }, [
                                    s("a", { staticClass: "nav-link", attrs: { "aria-controls": "ads", "aria-selected": "false", "data-toggle": "tab", href: "#ads", id: "ads-tab", role: "tab" } }, [t._v("Ads")]),
                                ]),
                                t._v(" "),
                                s("li", { staticClass: "nav-item" }, [
                                    s("a", { staticClass: "nav-link", attrs: { "aria-controls": "appsettings", "aria-selected": "false", "data-toggle": "tab", href: "#appsettings", id: "appsettings-tab", role: "tab" } }, [
                                        t._v("App Settings"),
                                    ]),
                                ]),
                                t._v(" "),
                                s("li", { staticClass: "nav-item" }, [
                                    s("a", { staticClass: "nav-link", attrs: { "aria-controls": "payments", "aria-selected": "false", "data-toggle": "tab", href: "#payments", id: "payments-tab", role: "tab" } }, [t._v("Payments")]),
                                ]),
                                t._v(" "),
                                s("li", { staticClass: "nav-item" }, [
                                    s("a", { staticClass: "nav-link", attrs: { "aria-controls": "aws", "aria-selected": "false", "data-toggle": "tab", href: "#aws", id: "aws-tab", role: "tab" } }, [t._v("Web Storage Services")]),
                                ]),
                                t._v(" "),
                                s("li", { staticClass: "nav-item" }, [
                                    s("a", { staticClass: "nav-link", attrs: { "aria-controls": "laravel", "aria-selected": "false", "data-toggle": "tab", href: "#laravel", id: "laravel-tab", role: "laravel" } }, [t._v("Laravel Options")]),
                                ]),
                                t._v(" "),
                                s("li", { staticClass: "nav-item" }, [
                                    s("a", { staticClass: "nav-link", attrs: { "aria-controls": "laravel", "aria-selected": "false", "data-toggle": "tab", href: "#emails", id: "emails-tab", role: "laravel" } }, [t._v("Emails")]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                              Upload\n                            ")]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                              Upload\n                            ")]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                              Upload\n                            ")]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "col-md-12 grid-margin", attrs: { "wfd-id": "72" } }, [
                                e("div", { staticClass: "card bg-gradient-primary border-0", attrs: { "wfd-id": "73" } }, [
                                    e("div", { staticClass: "card-body py-3 px-4 d-flex align-items-center justify-content-between flex-wrap", attrs: { "wfd-id": "74" } }, [
                                        e("p", { staticClass: "mb-0 text-white font-weight-medium" }, [
                                            this._v(" You have selected facebook as your default reward you need to setup it as bidding take a look at the doc ( Biding Part ) !               "),
                                        ]),
                                        this._v(" "),
                                        e("div", { staticClass: "d-flex", attrs: { "wfd-id": "75" } }, [
                                            e("a", { staticClass: "btn btn-outline-light mr-2 bg-gradient-danger border-0", attrs: { href: "https://demo.yobdev.live/documentation/", target: "_blank" } }, [this._v("Documentation")]),
                                            this._v(" "),
                                            e("button", { staticClass: "btn border-0 p-0 ml-auto", attrs: { id: "bannerClose", "wfd-id": "123" } }, [e("i", { staticClass: "mdi mdi-close text-white" })]),
                                        ]),
                                    ]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("h4", { staticClass: "card-title" }, [this._v("AppLovin")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("h4", { staticClass: "card-title" }, [this._v("VUNGLE")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("h4", { staticClass: "card-title" }, [this._v("APPNEXT")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("h4", { staticClass: "card-title" }, [this._v("IRONSOURCE")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("h4", { staticClass: "card-title" }, [this._v("ADMOB")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("h4", { staticClass: "card-title" }, [this._v("FACEBOOK")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("h4", { staticClass: "card-title" }, [this._v("UNITY ADS")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("h4", { staticClass: "card-title" }, [this._v("APPODEAL ADS")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("h4", { staticClass: "card-title" }, [this._v("STARTAPP")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "col-md-6" }, [
                                e("div", { staticClass: "form-group" }, [
                                    e("div", { staticClass: "form-check" }, [
                                        e("label", { staticClass: "form-check-label" }, [
                                            e("input", { staticClass: "form-check-input", attrs: { type: "checkbox", disabled: "", checked: "" } }),
                                            this._v("\n                              FFmpeg Conversion ( Upcoming )\n                            "),
                                            e("i", { staticClass: "input-helper" }),
                                        ]),
                                    ]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "col-md-6" }, [
                                e("div", { staticClass: "form-group" }, [
                                    e("div", { staticClass: "form-check" }, [
                                        e("label", { staticClass: "form-check-label" }, [
                                            e("input", { staticClass: "form-check-input", attrs: { type: "checkbox", disabled: "", checked: "" } }),
                                            this._v("\n                              User Profiles Selection ( Upcoming )\n                            "),
                                            e("i", { staticClass: "input-helper" }),
                                        ]),
                                    ]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "col-md-12" }, [
                                e("div", { staticClass: "form-group" }, [
                                    e("div", { staticClass: "form-check" }, [
                                        e("p", { staticClass: "text-primary" }, [
                                            this._v(
                                                "\n                          Note : you can olso the file on your root of laravel webviewAds.html and paste your code ( a network ads script for ex ) there \n                          , will be used if no link entred in this section.\n                        "
                                            ),
                                        ]),
                                    ]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                                Upload\n                              ")]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                                      Upload\n                                    ")]),
                            ]);
                        },
                    ],
                    !1,
                    null,
                    "fce0d3cc",
                    null
                );
            e.default = p.exports;
        },
        543: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a);
            function r(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function n(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var n = t.apply(e, s);
                        function o(t) {
                            r(n, a, i, o, l, "next", t);
                        }
                        function l(t) {
                            r(n, a, i, o, l, "throw", t);
                        }
                        o(void 0);
                    });
                };
            }
            var o = {
                    data: function () {
                        return { password: "", password_confirmation: "", user: {}, avatar: url + "/api/image/users" };
                    },
                    mounted: function () {
                        var t = this;
                        return n(
                            i.a.mark(function e() {
                                var s;
                                return i.a.wrap(
                                    function (e) {
                                        for (;;)
                                            switch ((e.prev = e.next)) {
                                                case 0:
                                                    return (e.prev = 0), (e.next = 3), axios.get(url + "/admin/account/data");
                                                case 3:
                                                    (s = e.sent), (t.user = s.data), (e.next = 10);
                                                    break;
                                                case 7:
                                                    (e.prev = 7), (e.t0 = e.catch(0)), t.showError();
                                                case 10:
                                                case "end":
                                                    return e.stop();
                                            }
                                    },
                                    e,
                                    null,
                                    [[0, 7]]
                                );
                            })
                        )();
                    },
                    methods: {
                        updateAvatar: function (t) {
                            var e = this;
                            return n(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (s.prev = 0), (a = new FormData()).append("image", t.target.files[0]), (s.next = 5), axios.post(url + "/admin/update/avatar", a);
                                                    case 5:
                                                        (r = s.sent), (e.logo = r.data.image_path), e.showSuccess(r.data.message), (s.next = 13);
                                                        break;
                                                    case 10:
                                                        (s.prev = 10), (s.t0 = s.catch(0)), e.showError(s.t0.response);
                                                    case 13:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 10]]
                                    );
                                })
                            )();
                        },
                        update: function () {
                            var t = this;
                            return n(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.put(url + "/admin/account/update", t.user);
                                                    case 3:
                                                        (s = e.sent), (t.user = s.data.body), t.showSuccess(s.data.message), (e.next = 11);
                                                        break;
                                                    case 8:
                                                        (e.prev = 8), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 11:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 8]]
                                    );
                                })
                            )();
                        },
                        change: function () {
                            var t = this;
                            return n(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.put(url + "/admin/account/password/update", { password: t.password, password_confirmation: t.password_confirmation });
                                                    case 3:
                                                        (s = e.sent), (t.password = ""), (t.password_confirmation = ""), t.showSuccess(s.data.message), (e.next = 12);
                                                        break;
                                                    case 9:
                                                        (e.prev = 9), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 12:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 9]]
                                    );
                                })
                            )();
                        },
                    },
                    mixins: [s(3).a],
                },
                l = s(4),
                c = Object(l.a)(
                    o,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            s("div", { staticClass: "col-md-6 grid-margin stretch-card" }, [
                                s("div", { staticClass: "card" }, [
                                    s("div", { staticClass: "card-body" }, [
                                        s("h4", { staticClass: "card-title" }, [t._v("Update Profile")]),
                                        t._v(" "),
                                        s("form", { staticClass: "forms-sample" }, [
                                            s("div", { staticClass: "form-group" }, [
                                                s("div", { staticClass: "form-group" }, [
                                                    s("label", { attrs: { for: "name" } }, [t._v("Name")]),
                                                    t._v(" "),
                                                    s("input", {
                                                        directives: [{ name: "model", rawName: "v-model", value: t.user.name, expression: "user.name" }],
                                                        staticClass: "form-control",
                                                        attrs: { id: "name", placeholder: "Name", type: "text" },
                                                        domProps: { value: t.user.name },
                                                        on: {
                                                            input: function (e) {
                                                                e.target.composing || t.$set(t.user, "name", e.target.value);
                                                            },
                                                        },
                                                    }),
                                                ]),
                                                t._v(" "),
                                                s("div", { staticClass: "form-group" }, [
                                                    s("label", { attrs: { for: "email" } }, [t._v("E-mail")]),
                                                    t._v(" "),
                                                    s("input", {
                                                        directives: [{ name: "model", rawName: "v-model", value: t.user.email, expression: "user.email" }],
                                                        staticClass: "form-control",
                                                        attrs: { id: "email", placeholder: "Email", type: "email" },
                                                        domProps: { value: t.user.email },
                                                        on: {
                                                            input: function (e) {
                                                                e.target.composing || t.$set(t.user, "email", e.target.value);
                                                            },
                                                        },
                                                    }),
                                                ]),
                                                t._v(" "),
                                                s("div", { staticClass: "form-group" }, [
                                                    s("label", { attrs: { for: "avatar" } }, [t._v("Avatar")]),
                                                    t._v(" "),
                                                    s("input", {
                                                        directives: [{ name: "model", rawName: "v-model", value: t.user.avatar, expression: "user.avatar" }],
                                                        staticClass: "form-control",
                                                        attrs: { id: "avatar", placeholder: "avatar", type: "avatar" },
                                                        domProps: { value: t.user.avatar },
                                                        on: {
                                                            input: function (e) {
                                                                e.target.composing || t.$set(t.user, "avatar", e.target.value);
                                                            },
                                                        },
                                                    }),
                                                ]),
                                                t._v(" "),
                                                s("div", { staticClass: "row" }, [s("div", { staticClass: "col-md-8" }, [t.avatar ? s("div", { staticClass: "logo" }, [s("img", { attrs: { src: t.avatar, alt: "avatar" } })]) : t._e()])]),
                                                t._v(" "),
                                                s("div", { staticClass: "form-group" }, [
                                                    s("label", [t._v("Avatar upload")]),
                                                    t._v(" "),
                                                    s("input", { staticClass: "file-upload-default" }),
                                                    t._v(" "),
                                                    s("div", { staticClass: "input-group col-xs-12" }, [
                                                        s("input", { staticClass: "form-control file-upload-info", attrs: { id: "avatar", placeholder: "Upload Image", type: "file" }, on: { change: t.updateAvatar } }),
                                                        t._v(" "),
                                                        t._m(0),
                                                    ]),
                                                ]),
                                                t._v(" "),
                                                s(
                                                    "button",
                                                    {
                                                        staticClass: "btn btn-info",
                                                        attrs: { disabled: !t.user.name || !t.user.email, "aria-pressed": "true", type: "button" },
                                                        on: {
                                                            click: function (e) {
                                                                return e.preventDefault(), t.update();
                                                            },
                                                        },
                                                    },
                                                    [t._v("Update")]
                                                ),
                                            ]),
                                            t._v(" "),
                                            s("div", { staticClass: "row" }, [
                                                s("div", { staticClass: "col-md-12" }, [
                                                    s("div", { staticClass: "form-group" }, [
                                                        s("label", { attrs: { for: "password" } }, [t._v("Password")]),
                                                        t._v(" "),
                                                        s("input", {
                                                            directives: [{ name: "model", rawName: "v-model", value: t.password, expression: "password" }],
                                                            staticClass: "form-control",
                                                            attrs: { id: "password", placeholder: "Password", type: "password" },
                                                            domProps: { value: t.password },
                                                            on: {
                                                                input: function (e) {
                                                                    e.target.composing || (t.password = e.target.value);
                                                                },
                                                            },
                                                        }),
                                                    ]),
                                                    t._v(" "),
                                                    s("div", { staticClass: "form-group" }, [
                                                        s("label", { attrs: { for: "password_confirmation" } }, [t._v("Confirm Password")]),
                                                        t._v(" "),
                                                        s("input", {
                                                            directives: [{ name: "model", rawName: "v-model", value: t.password_confirmation, expression: "password_confirmation" }],
                                                            staticClass: "form-control",
                                                            attrs: { id: "password_confirmation", placeholder: "Password", type: "password" },
                                                            domProps: { value: t.password_confirmation },
                                                            on: {
                                                                input: function (e) {
                                                                    e.target.composing || (t.password_confirmation = e.target.value);
                                                                },
                                                            },
                                                        }),
                                                    ]),
                                                    t._v(" "),
                                                    s(
                                                        "button",
                                                        {
                                                            staticClass: "btn btn-info",
                                                            attrs: { disabled: t.password.length < 6 || t.password_confirmation.length < 6 || t.password !== t.password_confirmation, "aria-pressed": "true", type: "button" },
                                                            on: {
                                                                click: function (e) {
                                                                    return e.preventDefault(), t.change();
                                                                },
                                                            },
                                                        },
                                                        [t._v("Update Password Only")]
                                                    ),
                                                ]),
                                            ]),
                                        ]),
                                    ]),
                                ]),
                            ]),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("Upload")])]);
                        },
                    ],
                    !1,
                    null,
                    "2e291b37",
                    null
                );
            e.default = c.exports;
        },
        544: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a),
                r = s(3),
                n = s(6);
            function o(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function l(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var r = t.apply(e, s);
                        function n(t) {
                            o(r, a, i, n, l, "next", t);
                        }
                        function l(t) {
                            o(r, a, i, n, l, "throw", t);
                        }
                        n(void 0);
                    });
                };
            }
            var c = {
                    data: function () {
                        return { index: !0, search: "", form: { report: { name: "", message: "" }, notification: !1 }, reports: [], options: [], loading: !1, paginate: ["filteredReports"] };
                    },
                    mounted: function () {
                        var t = this;
                        return l(
                            i.a.mark(function e() {
                                var s;
                                return i.a.wrap(function (e) {
                                    for (;;)
                                        switch ((e.prev = e.next)) {
                                            case 0:
                                                return (e.next = 2), axios.get(url + "/admin/reports/data");
                                            case 2:
                                                (s = e.sent), (t.reports = s.data);
                                            case 4:
                                            case "end":
                                                return e.stop();
                                        }
                                }, e);
                            })
                        )();
                    },
                    methods: {
                        back: function () {
                            (this.form.report = ""), (this.add = !1), (this.edit = !1), (this.index = !0);
                        },
                        destroy: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                l(
                                    i.a.mark(function a() {
                                        var r, n;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            return (a.prev = 0), (a.next = 3), axios.delete(url + "/admin/reports/destroy/" + t);
                                                        case 3:
                                                            (r = a.sent),
                                                                (n = s.reports.findIndex(function (e) {
                                                                    return e.id === t;
                                                                })),
                                                                s.reports.splice(n, 1),
                                                                s.paginate.filteredReports.list.splice(e, 1),
                                                                s.showSuccess(r.data.message),
                                                                (a.next = 13);
                                                            break;
                                                        case 10:
                                                            (a.prev = 10), (a.t0 = a.catch(0)), s.showError();
                                                        case 13:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 10]]
                                        );
                                    })
                                )
                            );
                        },
                    },
                    computed: {
                        filteredReports: function () {
                            var t = this;
                            return this.reports.filter(function (e) {
                                return e.title.toLowerCase().match(t.search.toLowerCase());
                            });
                        },
                    },
                    mixins: [r.a, n.a],
                },
                d = s(4),
                u = Object(d.a)(
                    c,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            t.index
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s("div", { staticClass: "table-responsive" }, [
                                                  s(
                                                      "table",
                                                      { staticClass: "table", attrs: { "aria-describedby": "Report Table" } },
                                                      [
                                                          t._m(0),
                                                          t._v(" "),
                                                          s(
                                                              "tbody",
                                                              t._l(t.paginated("filteredReports"), function (e, a) {
                                                                  return s("tr", { key: a }, [
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.id))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.title))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.message))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [
                                                                          s(
                                                                              "button",
                                                                              {
                                                                                  staticClass: "btn btn-danger btn-sm",
                                                                                  attrs: { type: "button" },
                                                                                  on: {
                                                                                      click: function (s) {
                                                                                          return t.destroy(e.id, a);
                                                                                      },
                                                                                  },
                                                                              },
                                                                              [t._v("Dismiss")]
                                                                          ),
                                                                      ]),
                                                                  ]);
                                                              }),
                                                              0
                                                          ),
                                                          t._v(" "),
                                                          t.filteredReports.length ? s("paginate", { attrs: { list: t.filteredReports, per: 5, name: "filteredReports", tag: "tbody" } }) : t._e(),
                                                          t._v(" "),
                                                          t.filteredReports.length
                                                              ? s("paginate-links", {
                                                                    staticClass: "float-right",
                                                                    attrs: {
                                                                        async: !0,
                                                                        classes: { ul: "pagination", li: "page-item", a: "page-link", ".next > a": "next-link", ".prev > a": "prev-link" },
                                                                        "hide-single-page": !0,
                                                                        limit: 5,
                                                                        "show-step-links": !0,
                                                                        for: "filteredReports",
                                                                    },
                                                                })
                                                              : t._e(),
                                                      ],
                                                      1
                                                  ),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("thead", [
                                e("tr", [
                                    e("th", { staticClass: "text-center", attrs: { id: "id" } }, [this._v("ID")]),
                                    this._v(" "),
                                    e("th", { staticClass: "text-center", attrs: { id: "movie_name" } }, [this._v("Movie Name")]),
                                    this._v(" "),
                                    e("th", { staticClass: "text-center", attrs: { id: "message" } }, [this._v("Message")]),
                                    this._v(" "),
                                    e("th", { staticClass: "text-center", attrs: { id: "actions" } }, [this._v("Actions")]),
                                ]),
                            ]);
                        },
                    ],
                    !1,
                    null,
                    null,
                    null
                );
            e.default = u.exports;
        },
        545: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a),
                r = s(3),
                n = s(6);
            function o(t, e) {
                return (
                    (function (t) {
                        if (Array.isArray(t)) return t;
                    })(t) ||
                    (function (t, e) {
                        var s = null == t ? null : ("undefined" != typeof Symbol && t[Symbol.iterator]) || t["@@iterator"];
                        if (null == s) return;
                        var a,
                            i,
                            r = [],
                            n = !0,
                            o = !1;
                        try {
                            for (s = s.call(t); !(n = (a = s.next()).done) && (r.push(a.value), !e || r.length !== e); n = !0);
                        } catch (t) {
                            (o = !0), (i = t);
                        } finally {
                            try {
                                n || null == s.return || s.return();
                            } finally {
                                if (o) throw i;
                            }
                        }
                        return r;
                    })(t, e) ||
                    c(t, e) ||
                    (function () {
                        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                    })()
                );
            }
            function l(t, e) {
                var s = ("undefined" != typeof Symbol && t[Symbol.iterator]) || t["@@iterator"];
                if (!s) {
                    if (Array.isArray(t) || (s = c(t)) || (e && t && "number" == typeof t.length)) {
                        s && (t = s);
                        var a = 0,
                            i = function () {};
                        return {
                            s: i,
                            n: function () {
                                return a >= t.length ? { done: !0 } : { done: !1, value: t[a++] };
                            },
                            e: function (t) {
                                throw t;
                            },
                            f: i,
                        };
                    }
                    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
                }
                var r,
                    n = !0,
                    o = !1;
                return {
                    s: function () {
                        s = s.call(t);
                    },
                    n: function () {
                        var t = s.next();
                        return (n = t.done), t;
                    },
                    e: function (t) {
                        (o = !0), (r = t);
                    },
                    f: function () {
                        try {
                            n || null == s.return || s.return();
                        } finally {
                            if (o) throw r;
                        }
                    },
                };
            }
            function c(t, e) {
                if (t) {
                    if ("string" == typeof t) return d(t, e);
                    var s = Object.prototype.toString.call(t).slice(8, -1);
                    return "Object" === s && t.constructor && (s = t.constructor.name), "Map" === s || "Set" === s ? Array.from(t) : "Arguments" === s || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(s) ? d(t, e) : void 0;
                }
            }
            function d(t, e) {
                (null == e || e > t.length) && (e = t.length);
                for (var s = 0, a = new Array(e); s < e; s++) a[s] = t[s];
                return a;
            }
            function u(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function m(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var r = t.apply(e, s);
                        function n(t) {
                            u(r, a, i, n, o, "next", t);
                        }
                        function o(t) {
                            u(r, a, i, n, o, "throw", t);
                        }
                        n(void 0);
                    });
                };
            }
            var p = {
                    data: function () {
                        return {
                            isuploading: !1,
                            fetchingCompleted: !1,
                            isFetchingData: !0,
                            percent: 0,
                            index: !0,
                            add: !1,
                            edit: !1,
                            size: "default",
                            align: "right",
                            animes: {},
                            customEpisodes: { name: "", episode_number: "", overview: "" },
                            customSeason: { name: "", season_number: "", episodes: [] },
                            paginate: ["animes", "filteredAnimes"],
                            tmdb: null,
                            pageNum: null,
                            form: { anime: { backdrop_path: "", poster_path: "", preview_path: "", genres: [], casterslist: [], networks: [], seasons: [{ episodes: [{ videos: [], downloads: [], substitles: [] }] }] }, notification: !1 },
                            substypes: ["srt", "vtt", "ass"],
                            typesubstitle: "srt",
                            poster: "",
                            backdrop: "",
                            posterSeason: "",
                            stillEpisode: "",
                            search: "",
                            servers: [],
                            headers: [],
                            useragents: [],
                            server: "",
                            useragent: "",
                            header: "",
                            headerdownload: "",
                            useragentdownload: "",
                            season: null,
                            selectedSeason: -1,
                            oldSeason: {},
                            episode: null,
                            selectedEpisode: -1,
                            embed: !1,
                            supported_hosts: !1,
                            hls: !1,
                            link: "",
                            supported_hosts_download: !1,
                            external_download: !1,
                            linkDownload: "",
                            serverdownload: "",
                            serversDownloads: [],
                            linksubstitle: "",
                            options: [],
                            optionscast: [],
                            optionsnetwork: [],
                            addseason: "",
                            addepisode: "",
                            video: null,
                            showModal: !1,
                            showModalSeason: !1,
                            substitle: null,
                            loading: !1,
                            zip: !1,
                        };
                    },
                    mounted: function () {
                        var t = this;
                        return m(
                            i.a.mark(function e() {
                                var s;
                                return i.a.wrap(function (e) {
                                    for (;;)
                                        switch ((e.prev = e.next)) {
                                            case 0:
                                                return (e.next = 2), axios.get(url + "/admin/animes/data");
                                            case 2:
                                                return (s = e.sent), (t.animes = s.data), (e.next = 6), axios.get(url + "/admin/servers/dataservers");
                                            case 6:
                                                return (s = e.sent), (t.servers = s.data), (e.next = 10), axios.get(url + "/admin/genres/datagenres");
                                            case 10:
                                                return (s = e.sent), (t.options = s.data), (e.next = 14), axios.get(url + "/admin/casters/datawebcaster");
                                            case 14:
                                                return (s = e.sent), (t.optionscast = s.data), (e.next = 18), axios.get(url + "/admin/networks/datawebnetworks");
                                            case 18:
                                                return (s = e.sent), (t.optionsnetwork = s.data), (e.next = 22), axios.get(url + "/admin/headers/dataheaders");
                                            case 22:
                                                return (s = e.sent), (t.headers = s.data), (e.next = 26), axios.get(url + "/admin/useragents/datausersagentoptions");
                                            case 26:
                                                (s = e.sent), (t.useragents = s.data);
                                            case 28:
                                            case "end":
                                                return e.stop();
                                        }
                                }, e);
                            })
                        )();
                    },
                    methods: {
                        getResults: function () {
                            var t = this,
                                e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
                            axios.get(url + "/admin/animes/data?page=" + e).then(function (s) {
                                (t.animes = s.data), (t.pageNum = e);
                            });
                        },
                        searchUnit: _.debounce(function () {
                            var t = this;
                            axios.get(url + "/admin/search_animes?q=" + this.search).then(function (e) {
                                t.animes.data = e.data.animes;
                            });
                        }),
                        create: function () {
                            (this.index = !1), (this.edit = !1), (this.add = !0);
                        },
                        back: function () {
                            (this.form.anime = { backdrop_path: "", poster_path: "", preview_path: "", genres: [], typesubstitle: "", networks: [], seasons: [{ episodes: [{ videos: [], downloads: [], substitles: [] }] }] }),
                                (this.link = ""),
                                (this.linksubstitle = ""),
                                (this.server = ""),
                                (this.video = null),
                                (this.substitle = null),
                                (this.tmdb = null),
                                (this.add = !1),
                                (this.edit = !1),
                                (this.index = !0);
                        },
                        editing: function (t) {
                            (this.index = !1), (this.add = !1), (this.edit = !0), (this.form.anime = t), (this.tmdb = t.tmdb_id);
                        },
                        getSearchByName: function (t) {
                            var e = this.settings.tmdb_api_key,
                                s = this.settings.tmdb_lang.iso_639_1,
                                a = "".concat("https://api.themoviedb.org/3/search/tv?api_key=").concat(e, "&language=").concat(s, "&query=").concat(encodeURI(t), "&include_adult=false=");
                            return new Promise(function (e) {
                                if (t.length < 1) return e([]);
                                fetch(a)
                                    .then(function (t) {
                                        return t.json();
                                    })
                                    .then(function (t) {
                                        e(t.results);
                                    });
                            });
                        },
                        getResultValue: function (t) {
                            return t.name;
                        },
                        onSubmit: function (t) {
                            (this.tmdb = t.id), this.getanime();
                        },
                        getSerie_Find: function () {
                            var t = this;
                            return m(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), http.get("https://api.themoviedb.org/3/find/" + t.tmdb + "?api_key=" + t.settings.tmdb_api_key + "&external_source=imdb_id");
                                                    case 3:
                                                        (s = e.sent), (t.tmdb = s.data.tv_results[0].id), t.getanime(), (e.next = 11);
                                                        break;
                                                    case 8:
                                                        (e.prev = 8), (e.t0 = e.catch(0)), t.showError();
                                                    case 11:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 8]]
                                    );
                                })
                            )();
                        },
                        getanime: function () {
                            var t = this;
                            return m(
                                i.a.mark(function e() {
                                    var s, a, r, n, c, d, u, m, p, v, f;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (
                                                            (s = ""),
                                                            (a = t.form.anime),
                                                            (r = ""),
                                                            (n = ""),
                                                            (e.prev = 4),
                                                            (e.next = 7),
                                                            http.get(
                                                                "https://api.themoviedb.org/3/tv/" +
                                                                    t.tmdb +
                                                                    "?api_key=" +
                                                                    t.settings.tmdb_api_key +
                                                                    "&language=" +
                                                                    t.settings.tmdb_lang.iso_639_1 +
                                                                    "&append_to_response=videos,external_ids,casts,networks"
                                                            )
                                                        );
                                                    case 7:
                                                        (c = e.sent), (d = l(c.data.networks));
                                                        try {
                                                            for (d.s(); !(u = d.n()).done; ) (m = u.value).logo_path && (m.logo_path = t.settings.imdb_cover_path + m.logo_path);
                                                        } catch (t) {
                                                            d.e(t);
                                                        } finally {
                                                            d.f();
                                                        }
                                                        if (
                                                            ((s = _.mapKeys(c.data, function (t, e) {
                                                                return "id" == e ? "tmdb_id" : e;
                                                            })),
                                                            t.edit && (s.id = a.id),
                                                            void 0 === s.videos.results[0])
                                                        ) {
                                                            e.next = 16;
                                                            break;
                                                        }
                                                        (s.preview_path = s.videos.results[0].key), (e.next = 24);
                                                        break;
                                                    case 16:
                                                        if (!t.edit || !a.preview_path) {
                                                            e.next = 20;
                                                            break;
                                                        }
                                                        (s.preview_path = a.preview_path), (e.next = 24);
                                                        break;
                                                    case 20:
                                                        return (e.next = 22), http.get("https://api.themoviedb.org/3/tv/" + t.tmdb + "/videos?api_key=" + t.settings.tmdb_api_key);
                                                    case 22:
                                                        (c = e.sent).data.results[0] && (s.preview_path = c.data.results[0].key);
                                                    case 24:
                                                        s.external_ids.imdb_id && (s.imdb_external_id = s.external_ids.imdb_id),
                                                            s.poster_path && (s.poster_path = t.settings.imdb_cover_path + s.poster_path),
                                                            s.backdrop_path && (s.backdrop_path = t.settings.imdb_cover_path + s.backdrop_path),
                                                            (p = l(s.seasons.entries())),
                                                            (e.prev = 28),
                                                            (f = i.a.mark(function e() {
                                                                var d, u, m, p, f, g, h, b, C, x, w;
                                                                return i.a.wrap(function (e) {
                                                                    for (;;)
                                                                        switch ((e.prev = e.next)) {
                                                                            case 0:
                                                                                return (
                                                                                    (d = o(v.value, 2)),
                                                                                    (u = d[0]),
                                                                                    (m = d[1]),
                                                                                    (s.seasons[u] = _.mapKeys(m, function (t, e) {
                                                                                        return "id" == e ? "tmdb_id" : e;
                                                                                    })),
                                                                                    t.edit &&
                                                                                        void 0 !==
                                                                                            (r = a.seasons.find(function (t) {
                                                                                                return t.season_number === m.season_number;
                                                                                            })) &&
                                                                                        ((s.seasons[u].id = r.id), (s.seasons[u].anime_id = r.anime_id)),
                                                                                    s.seasons[u].poster_path && (s.seasons[u].poster_path = t.settings.imdb_cover_path + s.seasons[u].poster_path),
                                                                                    (p = []),
                                                                                    (e.next = 7),
                                                                                    http.get(
                                                                                        "https://api.themoviedb.org/3/tv/" +
                                                                                            t.tmdb +
                                                                                            "/season/" +
                                                                                            m.season_number +
                                                                                            "?api_key=" +
                                                                                            t.settings.tmdb_api_key +
                                                                                            "&language=" +
                                                                                            t.settings.tmdb_lang.iso_639_1
                                                                                    )
                                                                                );
                                                                            case 7:
                                                                                (c = e.sent), (f = l(c.data.episodes));
                                                                                try {
                                                                                    for (
                                                                                        h = function () {
                                                                                            var e = g.value;
                                                                                            (e = _.mapKeys(e, function (t, e) {
                                                                                                return "id" == e ? "tmdb_id" : e;
                                                                                            })).still_path && (e.still_path = t.settings.imdb_cover_path + e.still_path),
                                                                                                t.edit &&
                                                                                                    void 0 !== r &&
                                                                                                    void 0 !==
                                                                                                        (n = r.episodes.find(function (t) {
                                                                                                            return t.tmdb_id === e.tmdb_id;
                                                                                                        })) &&
                                                                                                    ((e.id = n.id), (e.season_id = n.season_id), (e.videos = n.videos)),
                                                                                                p.push(e);
                                                                                        },
                                                                                            f.s();
                                                                                        !(g = f.n()).done;

                                                                                    )
                                                                                        h();
                                                                                } catch (t) {
                                                                                    f.e(t);
                                                                                } finally {
                                                                                    f.f();
                                                                                }
                                                                                return (
                                                                                    (b = []),
                                                                                    (e.next = 13),
                                                                                    http.get("https://api.themoviedb.org/3/tv/" + t.tmdb + "/credits?api_key=" + t.settings.tmdb_api_key + "&language=" + t.settings.tmdb_lang.iso_639_1)
                                                                                );
                                                                            case 13:
                                                                                (c = e.sent), (C = l(c.data.cast));
                                                                                try {
                                                                                    for (
                                                                                        w = function () {
                                                                                            var e = x.value;
                                                                                            e.profile_path && (e.profile_path = t.settings.imdb_cover_path + e.profile_path),
                                                                                                axios
                                                                                                    .get("https://api.themoviedb.org/3/person/" + e.id + "?api_key=" + t.settings.tmdb_api_key + "&language=" + t.settings.tmdb_lang.iso_639_1)
                                                                                                    .then(function (t) {
                                                                                                        null != t.data.biography && (e.biography = t.data.biography),
                                                                                                            null != t.data.place_of_birth && (e.place_of_birth = t.data.place_of_birth),
                                                                                                            null != t.data.birthday && (e.birthday = t.data.birthday);
                                                                                                    }),
                                                                                                b.push(e);
                                                                                        },
                                                                                            C.s();
                                                                                        !(x = C.n()).done;

                                                                                    )
                                                                                        w();
                                                                                } catch (t) {
                                                                                    C.e(t);
                                                                                } finally {
                                                                                    C.f();
                                                                                }
                                                                                (s.casterslist = b), (s.seasons[u].episodes = p);
                                                                            case 18:
                                                                            case "end":
                                                                                return e.stop();
                                                                        }
                                                                }, e);
                                                            })),
                                                            p.s();
                                                    case 31:
                                                        if ((v = p.n()).done) {
                                                            e.next = 35;
                                                            break;
                                                        }
                                                        return e.delegateYield(f(), "t0", 33);
                                                    case 33:
                                                        e.next = 31;
                                                        break;
                                                    case 35:
                                                        e.next = 40;
                                                        break;
                                                    case 37:
                                                        (e.prev = 37), (e.t1 = e.catch(28)), p.e(e.t1);
                                                    case 40:
                                                        return (e.prev = 40), p.f(), e.finish(40);
                                                    case 43:
                                                        (t.form.anime = s), (e.next = 49);
                                                        break;
                                                    case 46:
                                                        (e.prev = 46), (e.t2 = e.catch(4)), t.showError();
                                                    case 49:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [
                                            [4, 46],
                                            [28, 37, 40, 43],
                                        ]
                                    );
                                })
                            )();
                        },
                        store: function () {
                            var t = this;
                            return m(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.post(url + "/admin/animes/store", t.form);
                                                    case 3:
                                                        (s = e.sent),
                                                            (t.add = !1),
                                                            (t.edit = !1),
                                                            (t.index = !0),
                                                            (t.form.anime = { backdrop_path: "", poster_path: "", preview_path: "", genres: [], seasons: [{ episodes: [{ videos: [], substitles: [] }] }] }),
                                                            (t.tmdb = null),
                                                            (t.selectedSeason = -1),
                                                            (t.selectedEpisode = -1),
                                                            (t.season = null),
                                                            (t.episode = null),
                                                            (t.link = ""),
                                                            (t.linksubstitle = ""),
                                                            (t.server = ""),
                                                            (t.video = null),
                                                            (t.substitle = null),
                                                            t.animes.data.unshift(s.data.body),
                                                            t.showSuccess(s.data.message),
                                                            (e.next = 25);
                                                        break;
                                                    case 22:
                                                        (e.prev = 22), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 25:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 22]]
                                    );
                                })
                            )();
                        },
                        update: function () {
                            var t = this;
                            return m(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.put(url + "/admin/animes/update/" + t.form.anime.id, t.form);
                                                    case 3:
                                                        (s = e.sent),
                                                            (t.add = !1),
                                                            (t.edit = !1),
                                                            (t.index = !0),
                                                            (t.form.anime = { backdrop_path: "", poster_path: "", preview_path: "", genres: [], seasons: [{ episodes: [{ videos: [] }] }] }),
                                                            (t.tmdb = null),
                                                            (t.selectedSeason = -1),
                                                            (t.selectedEpisode = -1),
                                                            (t.season = null),
                                                            (t.episode = null),
                                                            (t.link = ""),
                                                            (t.server = ""),
                                                            (t.video = null),
                                                            t.showSuccess(s.data.message),
                                                            axios.get(url + "/admin/animes/data?page=" + t.pageNum).then(function (e) {
                                                                t.animes = e.data;
                                                            }),
                                                            (e.next = 23);
                                                        break;
                                                    case 20:
                                                        (e.prev = 20), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 23:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 20]]
                                    );
                                })
                            )();
                        },
                        destroy: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                m(
                                    i.a.mark(function e() {
                                        var a, r;
                                        return i.a.wrap(
                                            function (e) {
                                                for (;;)
                                                    switch ((e.prev = e.next)) {
                                                        case 0:
                                                            return (e.prev = 0), (e.next = 3), axios.delete(url + "/admin/animes/destroy/" + t);
                                                        case 3:
                                                            (a = e.sent),
                                                                (r = s.animes.data.findIndex(function (e) {
                                                                    return e.id === t;
                                                                })),
                                                                s.animes.data.splice(r, 1),
                                                                (s.selectedSeason = -1),
                                                                (s.selectedEpisode = -1),
                                                                (s.season = null),
                                                                (s.episode = null),
                                                                s.showSuccess(a.data.message),
                                                                (e.next = 16);
                                                            break;
                                                        case 13:
                                                            (e.prev = 13), (e.t0 = e.catch(0)), s.showError();
                                                        case 16:
                                                        case "end":
                                                            return e.stop();
                                                    }
                                            },
                                            e,
                                            null,
                                            [[0, 13]]
                                        );
                                    })
                                )
                            );
                        },
                        storePoster: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (s.prev = 0), (e.poster = t.target.files[0]), (a = new FormData()).append("image", e.poster), (s.next = 6), axios.post(url + "/admin/animes/image/store", a);
                                                    case 6:
                                                        (r = s.sent), (e.form.anime.poster_path = r.data.image_path), e.showSuccess(r.data.message), (s.next = 14);
                                                        break;
                                                    case 11:
                                                        (s.prev = 11), (s.t0 = s.catch(0)), e.showError(s.t0.response);
                                                    case 14:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 11]]
                                    );
                                })
                            )();
                        },
                        storePosterSeason: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (s.prev = 0), (e.posterSeason = t.target.files[0]), (a = new FormData()).append("image", e.posterSeason), (s.next = 6), axios.post(url + "/admin/animes/image/store", a);
                                                    case 6:
                                                        (r = s.sent), (e.form.anime.seasons[e.selectedSeason].poster_path = r.data.image_path), e.showSuccess(r.data.message), (s.next = 14);
                                                        break;
                                                    case 11:
                                                        (s.prev = 11), (s.t0 = s.catch(0)), e.showError(s.t0.response);
                                                    case 14:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 11]]
                                    );
                                })
                            )();
                        },
                        storeStillEpisode: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (s.prev = 0), (e.stillEpisode = t.target.files[0]), (a = new FormData()).append("image", e.stillEpisode), (s.next = 6), axios.post(url + "/admin/animes/image/store", a);
                                                    case 6:
                                                        (r = s.sent), (e.form.anime.seasons[e.selectedSeason].episodes[e.selectedEpisode].still_path = r.data.image_path), e.showSuccess(r.data.message), (s.next = 14);
                                                        break;
                                                    case 11:
                                                        (s.prev = 11), (s.t0 = s.catch(0)), e.showError(s.t0.response);
                                                    case 14:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 11]]
                                    );
                                })
                            )();
                        },
                        storeBackdrop: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (s.prev = 0), (e.backdrop = t.target.files[0]), (a = new FormData()).append("image", e.backdrop), (s.next = 6), axios.post(url + "/admin/animes/image/store", a);
                                                    case 6:
                                                        (r = s.sent), (e.form.anime.backdrop_path = r.data.image_path), e.showSuccess(r.data.message), (s.next = 14);
                                                        break;
                                                    case 11:
                                                        (s.prev = 11), (s.t0 = s.catch(0)), e.showError(s.t0.response);
                                                    case 14:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 11]]
                                    );
                                })
                            )();
                        },
                        storeVideo: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (
                                                            (s.prev = 0),
                                                            (e.video = t.target.files[0]),
                                                            (a = new FormData()).append("video", e.video),
                                                            (s.next = 6),
                                                            axios.post(url + "/admin/video/store", a, {
                                                                onUploadProgress: function (t) {
                                                                    (e.isuploading = !0), (e.percent = Math.round((t.loaded / t.total) * 100));
                                                                },
                                                            })
                                                        );
                                                    case 6:
                                                        (r = s.sent),
                                                            (e.link = r.data.video_path),
                                                            (e.server = { name: r.data.server }),
                                                            e.showSuccess(r.data.message),
                                                            setTimeout(function () {
                                                                return (e.isuploading = !1);
                                                            }, 2e3),
                                                            (s.next = 17);
                                                        break;
                                                    case 13:
                                                        (s.prev = 13),
                                                            (s.t0 = s.catch(0)),
                                                            e.showError(),
                                                            setTimeout(function () {
                                                                return (e.isuploading = !1);
                                                            }, 2e3);
                                                    case 17:
                                                        return (s.prev = 17), s.finish(17);
                                                    case 19:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 13, 17, 19]]
                                    );
                                })
                            )();
                        },
                        addNewSeason: function () {
                            var t = this;
                            return m(
                                i.a.mark(function e() {
                                    return i.a.wrap(function (e) {
                                        for (;;)
                                            switch ((e.prev = e.next)) {
                                                case 0:
                                                    t.form.anime.seasons.push({ name: t.customSeason.name, overview: t.customSeason.overview, season_number: t.customSeason.season_number, episodes: [] }),
                                                        (t.customSeason.name = ""),
                                                        (t.customSeason.overview = ""),
                                                        (t.customSeason.season_number = ""),
                                                        (t.showModalSeason = !1);
                                                case 5:
                                                case "end":
                                                    return e.stop();
                                            }
                                    }, e);
                                })
                            )();
                        },
                        addNewEpisode: function () {
                            var t = this;
                            return m(
                                i.a.mark(function e() {
                                    return i.a.wrap(function (e) {
                                        for (;;)
                                            switch ((e.prev = e.next)) {
                                                case 0:
                                                    t.form.anime.seasons[t.selectedSeason].episodes.push({ name: t.customEpisodes.name, overview: t.customEpisodes.overview, episode_number: t.customEpisodes.episode_number }),
                                                        (t.customEpisodes.name = ""),
                                                        (t.customEpisodes.overview = ""),
                                                        (t.customEpisodes.episode_number = ""),
                                                        (t.showModal = !1);
                                                case 5:
                                                case "end":
                                                    return e.stop();
                                            }
                                    }, e);
                                })
                            )();
                        },
                        addSubs: function () {
                            if ("" !== this.linksubstitle && "" !== this.form.anime) {
                                var t = this.form.anime.seasons[this.selectedSeason].episodes[this.selectedEpisode];
                                t.substitles || Vue.set(t, "substitles", []),
                                    t.substitles.unshift({
                                        link: this.linksubstitle,
                                        type: this.typesubstitle,
                                        lang: this.langsub.english_name && "No Language" !== this.langsub.english_name ? this.langsub.english_name : this.settings.tmdb_lang.english_name,
                                        zip: this.zip,
                                    }),
                                    (this.linksubstitle = ""),
                                    (this.server = ""),
                                    (this.typesubstitle = ""),
                                    (this.substitle = null),
                                    (this.zip = !1);
                            }
                        },
                        addLinkDownload: function () {
                            var t = this.form.anime.seasons[this.selectedSeason].episodes[this.selectedEpisode];
                            t.downloads || Vue.set(t, "downloads", []),
                                t.downloads.unshift({
                                    server: this.serverdownload.name,
                                    header: this.headerdownload.name,
                                    useragent: this.useragentdownload.name,
                                    link: this.linkDownload,
                                    lang: this.langdownload.english_name && "No Language" !== this.langdownload.english_name ? this.langdownload.english_name : this.settings.tmdb_lang.english_name,
                                    external: this.external_download,
                                    supported_hosts: this.supported_hosts_download,
                                }),
                                (this.linkDownload = ""),
                                (this.serverdownload = ""),
                                (this.headerdownload = ""),
                                (this.useragentdownload = ""),
                                (this.download = null),
                                (this.supported_hosts_download = !1),
                                (this.external_download = !1);
                        },
                        addLink: function () {
                            if ("" !== this.selectedServer && "" !== this.link && "" !== this.form.anime && 0 !== this.selectedServer) {
                                var t = this.form.anime.seasons[this.selectedSeason].episodes[this.selectedEpisode];
                                t.videos || Vue.set(t, "videos", []),
                                    t.videos.unshift({
                                        server: this.server.name,
                                        header: this.header.name,
                                        useragent: this.useragent.name,
                                        link: this.link,
                                        lang: this.lang.english_name && "No Language" !== this.lang.english_name ? this.lang.english_name : this.settings.tmdb_lang.english_name,
                                        embed: this.embed,
                                        hls: this.hls,
                                        supported_hosts: this.supported_hosts,
                                    }),
                                    (this.link = ""),
                                    (this.server = ""),
                                    (this.header = ""),
                                    (this.useragent = ""),
                                    (this.video = null),
                                    (this.supported_hosts = !1),
                                    (this.embed = !1),
                                    (this.hls = !1);
                            }
                        },
                        deleteLinkDownload: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                m(
                                    i.a.mark(function a() {
                                        var r;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            if (((a.prev = 0), !t.id)) {
                                                                a.next = 6;
                                                                break;
                                                            }
                                                            return (a.next = 4), axios.delete(url + "/admin/animes/downloads/destroy/" + t.id);
                                                        case 4:
                                                            (r = a.sent), s.showSuccess(r.data.message);
                                                        case 6:
                                                            s.form.anime.seasons[s.selectedSeason].episodes[s.selectedEpisode].downloads.splice(e, 1), (a.next = 12);
                                                            break;
                                                        case 9:
                                                            (a.prev = 9), (a.t0 = a.catch(0)), s.showError();
                                                        case 12:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 9]]
                                        );
                                    })
                                )
                            );
                        },
                        deleteLink: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                m(
                                    i.a.mark(function a() {
                                        var r;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            if (((a.prev = 0), !t.id)) {
                                                                a.next = 6;
                                                                break;
                                                            }
                                                            return (a.next = 4), axios.delete(url + "/admin/animes/videos/destroy/" + t.id);
                                                        case 4:
                                                            (r = a.sent), s.showSuccess(r.data.message);
                                                        case 6:
                                                            s.form.anime.seasons[s.selectedSeason].episodes[s.selectedEpisode].videos.splice(e, 1), (a.next = 12);
                                                            break;
                                                        case 9:
                                                            (a.prev = 9), (a.t0 = a.catch(0)), s.showError();
                                                        case 12:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 9]]
                                        );
                                    })
                                )
                            );
                        },
                        destroyCast: function (t) {
                            var e = this;
                            null !== t.cast &&
                                axios
                                    .delete(url + "/admin/animes/casts/destroy/" + t.id)
                                    .then(function (t) {
                                        return e.showSuccess(t.data.message);
                                    })
                                    .catch(function (t) {
                                        return e.showError();
                                    }),
                                console.log(t.id);
                        },
                        storeSubstitle: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (
                                                            (s.prev = 0),
                                                            (e.loading = !0),
                                                            (e.substitle = t.target.files[0]),
                                                            (a = new FormData()).append("substitle", e.substitle),
                                                            (s.next = 7),
                                                            axios.post(url + "/admin/substitle/store", a)
                                                        );
                                                    case 7:
                                                        (r = s.sent), (e.linksubstitle = r.data.substitle_path), (e.zip = !0), e.showSuccess(r.data.message), (s.next = 16);
                                                        break;
                                                    case 13:
                                                        (s.prev = 13), (s.t0 = s.catch(0)), e.showError();
                                                    case 16:
                                                        return (s.prev = 16), (e.loading = !1), s.finish(16);
                                                    case 19:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 13, 16, 19]]
                                    );
                                })
                            )();
                        },
                        deleteLinkSubs: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                m(
                                    i.a.mark(function a() {
                                        var r;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            if (((a.prev = 0), !t.id)) {
                                                                a.next = 6;
                                                                break;
                                                            }
                                                            return (a.next = 4), axios.delete(url + "/admin/animes/substitles/destroy/" + t.id);
                                                        case 4:
                                                            (r = a.sent), s.showSuccess(r.data.message);
                                                        case 6:
                                                            s.form.anime.seasons[s.selectedSeason].episodes[s.selectedEpisode].substitles.splice(e, 1), (a.next = 12);
                                                            break;
                                                        case 9:
                                                            (a.prev = 9), (a.t0 = a.catch(0)), s.showError();
                                                        case 12:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 9]]
                                        );
                                    })
                                )
                            );
                        },
                        storeVideoTrailer: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a, r, n;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (
                                                            (s.prev = 0),
                                                            (a = e.form.anime.name),
                                                            (e.video_trailer = t.target.files[0]),
                                                            (r = new FormData()).append("video", e.video_trailer),
                                                            r.append("movie_title", a.replace(/ /g, "_")),
                                                            (s.next = 8),
                                                            axios.post(url + "/admin/video/store", r, {
                                                                onUploadProgress: function (t) {
                                                                    (e.isuploading = !0), (e.percent = Math.round((t.loaded / t.total) * 100));
                                                                },
                                                            })
                                                        );
                                                    case 8:
                                                        (n = s.sent),
                                                            (e.form.anime.trailer_url = n.data.video_path),
                                                            e.showSuccess(n.data.message),
                                                            console.log(r),
                                                            setTimeout(function () {
                                                                return (e.isuploading = !1);
                                                            }, 2e3),
                                                            (s.next = 19);
                                                        break;
                                                    case 15:
                                                        (s.prev = 15),
                                                            (s.t0 = s.catch(0)),
                                                            e.showError(),
                                                            setTimeout(function () {
                                                                return (e.isuploading = !1);
                                                            }, 2e3);
                                                    case 19:
                                                        return (s.prev = 19), s.finish(19);
                                                    case 21:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 15, 19, 21]]
                                    );
                                })
                            )();
                        },
                        selectSeason: function (t) {
                            (this.selectedSeason = this.form.anime.seasons.indexOf(t)), (this.episode = null), (this.selectedEpisode = -1);
                        },
                        selectEpisode: function (t) {
                            this.selectedEpisode = this.form.anime.seasons[this.selectedSeason].episodes.indexOf(t);
                        },
                        destroyGenre: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        if (void 0 === t.genre) {
                                                            s.next = 11;
                                                            break;
                                                        }
                                                        return (s.prev = 1), (s.next = 4), axios.delete(url + "/admin/animes/genres/destroy/" + t.id);
                                                    case 4:
                                                        (a = s.sent), e.showSuccess(a.data.message), (s.next = 11);
                                                        break;
                                                    case 8:
                                                        (s.prev = 8), (s.t0 = s.catch(1)), e.showError();
                                                    case 11:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[1, 8]]
                                    );
                                })
                            )();
                        },
                        getSeason: function () {
                            var t = this;
                            return m(
                                i.a.mark(function e() {
                                    var s, a, r, n, c, d;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (
                                                            (e.prev = 0),
                                                            (e.next = 3),
                                                            http.get(
                                                                "https://api.themoviedb.org/3/tv/" + t.form.anime.tmdb_id + "/season/" + t.addseason + "?api_key=" + t.settings.tmdb_api_key + "&language=" + t.settings.tmdb_lang.iso_639_1
                                                            )
                                                        );
                                                    case 3:
                                                        ((s = e.sent).data = _.mapKeys(s.data, function (t, e) {
                                                            return "id" == e ? "tmdb_id" : e;
                                                        })),
                                                            s.data.poster_path && (s.data.poster_path = t.settings.imdb_cover_path + s.data.poster_path),
                                                            (a = l(s.data.episodes.entries()));
                                                        try {
                                                            for (a.s(); !(r = a.n()).done; )
                                                                (n = o(r.value, 2)),
                                                                    (c = n[0]),
                                                                    (d = n[1]),
                                                                    (s.data.episodes[c] = _.mapKeys(d, function (t, e) {
                                                                        return "id" == e ? "tmdb_id" : e;
                                                                    })),
                                                                    d.still_path && (s.data.episodes[c].still_path = t.settings.imdb_cover_path + d.still_path);
                                                        } catch (t) {
                                                            a.e(t);
                                                        } finally {
                                                            a.f();
                                                        }
                                                        t.form.anime.seasons.findIndex(function (t) {
                                                            return t.season_number === s.data.season_number;
                                                        }) < 0
                                                            ? (t.form.anime.seasons.push(s.data), t.showSuccess())
                                                            : t.showError("this season already exists"),
                                                            (t.addseason = ""),
                                                            (e.next = 16);
                                                        break;
                                                    case 13:
                                                        (e.prev = 13), (e.t0 = e.catch(0)), t.showError();
                                                    case 16:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 13]]
                                    );
                                })
                            )();
                        },
                        destroySeason: function () {
                            var t = this;
                            this.showConfirm(
                                m(
                                    i.a.mark(function e() {
                                        var s, a;
                                        return i.a.wrap(
                                            function (e) {
                                                for (;;)
                                                    switch ((e.prev = e.next)) {
                                                        case 0:
                                                            if (!(s = t.form.anime.seasons[t.selectedSeason]).id) {
                                                                e.next = 12;
                                                                break;
                                                            }
                                                            return (e.prev = 2), (e.next = 5), axios.delete(url + "/admin/animes/seasons/destroy/" + s.id);
                                                        case 5:
                                                            (a = e.sent), t.showSuccess(a.data.message), (e.next = 12);
                                                            break;
                                                        case 9:
                                                            (e.prev = 9), (e.t0 = e.catch(2)), t.showError();
                                                        case 12:
                                                            t.form.anime.seasons.splice(t.selectedSeason, 1), (t.season = null), (t.episode = null), (t.selectedSeason = -1), (t.selectedEpisode = -1);
                                                        case 17:
                                                        case "end":
                                                            return e.stop();
                                                    }
                                            },
                                            e,
                                            null,
                                            [[2, 9]]
                                        );
                                    })
                                )
                            );
                        },
                        getEpisode: function () {
                            var t = this;
                            return m(
                                i.a.mark(function e() {
                                    var s, a;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (
                                                            (e.prev = 0),
                                                            (e.next = 3),
                                                            http.get(
                                                                "https://api.themoviedb.org/3/tv/" +
                                                                    t.tmdb +
                                                                    "/season/" +
                                                                    t.form.anime.seasons[t.selectedSeason].season_number +
                                                                    "/episode/" +
                                                                    t.addepisode +
                                                                    "?api_key=" +
                                                                    t.settings.tmdb_api_key +
                                                                    "&language=" +
                                                                    t.settings.tmdb_lang.iso_639_1
                                                            )
                                                        );
                                                    case 3:
                                                        (s = e.sent),
                                                            t.form.anime.seasons[t.selectedSeason].episodes.findIndex(function (t) {
                                                                return t.episode_number === s.data.episode_number;
                                                            }) < 0
                                                                ? ((a = _.mapKeys(s.data, function (t, e) {
                                                                      return "id" == e ? "tmdb_id" : e;
                                                                  })).still_path && (a.still_path = t.settings.imdb_cover_path + a.still_path),
                                                                  t.form.anime.seasons[t.selectedSeason].episodes.push(a),
                                                                  t.showSuccess())
                                                                : t.showError("this episode already exists"),
                                                            (t.addepisode = ""),
                                                            (e.next = 12);
                                                        break;
                                                    case 9:
                                                        (e.prev = 9), (e.t0 = e.catch(0)), t.showError();
                                                    case 12:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 9]]
                                    );
                                })
                            )();
                        },
                        send: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (
                                                            (e.form.anime = t),
                                                            console.log(t.name),
                                                            (s.prev = 2),
                                                            (a = { headers: { Authorization: "key=" + e.settings.authorization } }),
                                                            (r = { to: "/topics/all", data: { title: t.name, message: t.overview, image: t.backdrop_path, type: "2", tmdb: t.id } }),
                                                            (s.next = 7),
                                                            http.post("https://fcm.googleapis.com/fcm/send", r, a)
                                                        );
                                                    case 7:
                                                        e.showSuccess(), (e.title = ""), (e.body = ""), (e.image = ""), (s.next = 16);
                                                        break;
                                                    case 13:
                                                        (s.prev = 13), (s.t0 = s.catch(2)), e.showError();
                                                    case 16:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[2, 13]]
                                    );
                                })
                            )();
                        },
                        sendEpisode: function (t) {
                            var e = this;
                            return m(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (
                                                            (s.prev = 0),
                                                            (a = { headers: { Authorization: "key=" + e.settings.authorization } }),
                                                            (r = { to: "/topics/all", data: { title: t.name, image: t.still_path, type: "episode_anime", link: "", tmdb: t.id, message: t.overview } }),
                                                            (s.next = 5),
                                                            http.post("https://fcm.googleapis.com/fcm/send", r, a)
                                                        );
                                                    case 5:
                                                        e.showSuccess(), (e.title = ""), (e.body = ""), (e.image = ""), (e.link = ""), (e.tmdb = ""), (s.next = 16);
                                                        break;
                                                    case 13:
                                                        (s.prev = 13), (s.t0 = s.catch(0)), e.showError();
                                                    case 16:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 13]]
                                    );
                                })
                            )();
                        },
                        destroyNetwork: function (t) {
                            var e = this;
                            null !== t.network &&
                                axios
                                    .delete(url + "/admin/animes/networks/destroy/" + t.id)
                                    .then(function (t) {
                                        return e.showSuccess(t.data.message);
                                    })
                                    .catch(function (t) {
                                        return e.showError(t);
                                    });
                        },
                        destroySubs: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                m(
                                    i.a.mark(function a() {
                                        var r;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            if (((a.prev = 0), !t.id)) {
                                                                a.next = 6;
                                                                break;
                                                            }
                                                            return (a.next = 4), axios.delete(url + "/admin/animes/substitles/destroy/" + t.id);
                                                        case 4:
                                                            (r = a.sent), s.showSuccess(r.data.message);
                                                        case 6:
                                                            s.form.anime.seasons[s.selectedSeason].episodes[s.selectedEpisode].substitles.splice(e, 1), (a.next = 12);
                                                            break;
                                                        case 9:
                                                            (a.prev = 9), (a.t0 = a.catch(0)), s.showError();
                                                        case 12:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 9]]
                                        );
                                    })
                                )
                            );
                        },
                        destroyEpisode: function () {
                            var t = this;
                            this.showConfirm(
                                m(
                                    i.a.mark(function e() {
                                        var s, a;
                                        return i.a.wrap(
                                            function (e) {
                                                for (;;)
                                                    switch ((e.prev = e.next)) {
                                                        case 0:
                                                            if (!(s = t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode]).id) {
                                                                e.next = 12;
                                                                break;
                                                            }
                                                            return (e.prev = 2), (e.next = 5), axios.delete(url + "/admin/animes/episodes/destroy/" + s.id);
                                                        case 5:
                                                            (a = e.sent), t.showSuccess(a.data.message), (e.next = 12);
                                                            break;
                                                        case 9:
                                                            (e.prev = 9), (e.t0 = e.catch(2)), t.showError();
                                                        case 12:
                                                            t.form.anime.seasons[t.selectedSeason].episodes.splice(t.selectedEpisode, 1), (t.episode = null), (t.selectedEpisode = -1);
                                                        case 15:
                                                        case "end":
                                                            return e.stop();
                                                    }
                                            },
                                            e,
                                            null,
                                            [[2, 9]]
                                        );
                                    })
                                )
                            );
                        },
                    },
                    computed: {
                        filteredAnimes: function () {
                            var t = this;
                            return this.animes.filter(function (e) {
                                return e.name.toLowerCase().match(t.search.toLowerCase());
                            });
                        },
                    },
                    mixins: [r.a, n.a],
                },
                v = (s(531), s(4)),
                f = Object(v.a)(
                    p,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            s("div", { staticClass: "col-md-12 grid-margin" }, [
                                s("div", { staticClass: "d-flex justify-content-between flex-wrap" }, [
                                    t._m(0),
                                    t._v(" "),
                                    s("div", { staticClass: "d-flex justify-content-between align-items-end flex-wrap" }, [
                                        t.index
                                            ? s(
                                                  "button",
                                                  {
                                                      staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                      on: {
                                                          click: function (e) {
                                                              return t.create();
                                                          },
                                                      },
                                                  },
                                                  [t._v("Add Anime")]
                                              )
                                            : t._e(),
                                        t._v(" "),
                                        t.index
                                            ? t._e()
                                            : s(
                                                  "button",
                                                  {
                                                      staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                      on: {
                                                          click: function (e) {
                                                              return t.back();
                                                          },
                                                      },
                                                  },
                                                  [t._v("Back")]
                                              ),
                                    ]),
                                ]),
                            ]),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-md-6 grid-margin" }, [
                                      s("ul", { staticClass: "navbar-nav mr-lg-4 w-100" }, [
                                          s("li", { staticClass: "nav-item nav-search d-none d-lg-block w-100" }, [
                                              s("div", { staticClass: "input-group" }, [
                                                  t._m(1),
                                                  t._v(" "),
                                                  s("input", {
                                                      directives: [{ name: "model", rawName: "v-model", value: t.search, expression: "search" }],
                                                      staticClass: "form-control",
                                                      attrs: { type: "text", placeholder: "Search now", "aria-label": "search", "aria-describedby": "search" },
                                                      domProps: { value: t.search },
                                                      on: {
                                                          keyup: t.searchUnit,
                                                          input: function (e) {
                                                              e.target.composing || (t.search = e.target.value);
                                                          },
                                                      },
                                                  }),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s(
                                                  "div",
                                                  { staticClass: "table-responsive" },
                                                  [
                                                      s("table", { staticClass: "table", attrs: { "aria-describedby": "table animes", id: "table animes" } }, [
                                                          t._m(2),
                                                          t._v(" "),
                                                          s(
                                                              "tbody",
                                                              t._l(t.animes.data, function (e) {
                                                                  return s("tr", { key: e.id }, [
                                                                      s("td", { staticClass: "text-center" }, [s("img", { attrs: { src: e.poster_path, alt: "poster path", height: "80", width: "80" } })]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.id))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.tmdb_id))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.name))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.vote_average))]),
                                                                      t._v(" "),
                                                                      1 === e.active
                                                                          ? s("td", { staticClass: "text-center" }, [s("label", { staticClass: "badge badge-success" }, [t._v("Visible")])])
                                                                          : s("td", { staticClass: "text-center" }, [s("label", { staticClass: "badge badge-danger" }, [t._v("Invisible")])]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [
                                                                          s("div", { staticClass: "list-icons" }, [
                                                                              s(
                                                                                  "a",
                                                                                  {
                                                                                      staticClass: "list-icons-item mr-2",
                                                                                      attrs: { "data-original-title": "Send Notification", rel: "tooltip", title: "" },
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return t.send(e);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [s("em", { staticClass: "mdi mdi-bell-ring menu-icon", staticStyle: { color: "#4d83ff" } })]
                                                                              ),
                                                                              t._v(" "),
                                                                              s(
                                                                                  "a",
                                                                                  {
                                                                                      staticClass: "list-icons-item mr-2",
                                                                                      attrs: { "data-original-title": "Edit", rel: "tooltip", title: "" },
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return t.editing(e);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [s("em", { staticClass: "mdi mdi-pencil fa-lg", staticStyle: { color: "#4d83ff" } })]
                                                                              ),
                                                                              t._v(" "),
                                                                              s(
                                                                                  "a",
                                                                                  {
                                                                                      staticClass: "list-icons-item text-warning",
                                                                                      attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return t.destroy(e.id, t.index);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                              ),
                                                                          ]),
                                                                      ]),
                                                                  ]);
                                                              }),
                                                              0
                                                          ),
                                                      ]),
                                                      t._v(" "),
                                                      s("pagination", { staticClass: "mb-0", attrs: { data: t.animes, "show-disabled": !1, limit: 5, size: t.size, align: t.align }, on: { "pagination-change-page": t.getResults } }),
                                                  ],
                                                  1
                                              ),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.add || t.edit
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s("section", [
                                                  s("div", { staticClass: "poster-container" }, [
                                                      t.form.anime.poster_path
                                                          ? s("img", { staticClass: "poster", attrs: { src: t.form.anime.poster_path, alt: "anime poster", "data-loaded": "true", height: "316", width: "210" } })
                                                          : t._e(),
                                                      t._v(" "),
                                                      s("div", { staticClass: "many-inputs" }, [
                                                          s("div", { staticClass: "input-container" }, [
                                                              s(
                                                                  "div",
                                                                  { staticClass: "form-group" },
                                                                  [
                                                                      s("autocomplete", {
                                                                          attrs: { search: t.getSearchByName, placeholder: "Search Anime by Name", "aria-label": "Search Anime by Name", "get-result-value": t.getResultValue },
                                                                          on: { submit: t.onSubmit },
                                                                      }),
                                                                  ],
                                                                  1
                                                              ),
                                                              t._v(" "),
                                                              t.add
                                                                  ? s("div", { staticClass: "form-group" }, [
                                                                        s("div", { staticClass: "input-group" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.tmdb, expression: "tmdb" }],
                                                                                staticClass: "form-control",
                                                                                attrs: { type: "text", placeholder: "Example : tt7286456", "aria-label": "Search Movie" },
                                                                                domProps: { value: t.tmdb },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || (t.tmdb = e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "input-group-append" }, [
                                                                                s(
                                                                                    "button",
                                                                                    {
                                                                                        staticClass: "btn btn-sm btn-primary",
                                                                                        attrs: { type: "type", disabled: !t.settings.tmdb_api_key },
                                                                                        on: {
                                                                                            click: function (e) {
                                                                                                return t.getSerie_Find();
                                                                                            },
                                                                                        },
                                                                                    },
                                                                                    [t._v("Search")]
                                                                                ),
                                                                            ]),
                                                                        ]),
                                                                    ])
                                                                  : t._e(),
                                                              t._v(" "),
                                                              t.edit
                                                                  ? s("div", { staticClass: "form-group" }, [
                                                                        s("div", { staticClass: "input-group" }, [
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.tmdb, expression: "tmdb" }],
                                                                                staticClass: "form-control",
                                                                                attrs: { type: "text", placeholder: "Example : tt7286456", "aria-label": "Search Movie" },
                                                                                domProps: { value: t.tmdb },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || (t.tmdb = e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "input-group-append" }, [
                                                                                s(
                                                                                    "button",
                                                                                    {
                                                                                        staticClass: "btn btn-sm btn-primary",
                                                                                        attrs: { type: "type", disabled: !t.settings.tmdb_api_key },
                                                                                        on: {
                                                                                            click: function (e) {
                                                                                                return t.getanime();
                                                                                            },
                                                                                        },
                                                                                    },
                                                                                    [t._v("Search")]
                                                                                ),
                                                                            ]),
                                                                        ]),
                                                                    ])
                                                                  : t._e(),
                                                              t._v(" "),
                                                              s("div", { staticClass: "input-container" }, [
                                                                  s("div", { staticClass: "row" }, [
                                                                      s("div", { staticClass: "col-md-4" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "name" } }, [t._v("Serie Name")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.anime.name, expression: "form.anime.name" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "name", type: "text" },
                                                                                  domProps: { value: t.form.anime.name },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.anime, "name", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-4" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "imdb_external_id" } }, [t._v("External IMDB ID")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.anime.imdb_external_id, expression: "form.anime.imdb_external_id" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "imdb_external_id", type: "text" },
                                                                                  domProps: { value: t.form.anime.imdb_external_id },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.anime, "imdb_external_id", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-4" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "original_name" } }, [t._v("Original title")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.anime.original_name, expression: "form.anime.original_name" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "original_name", type: "text" },
                                                                                  domProps: { value: t.form.anime.original_name },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.anime, "original_name", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                  ]),
                                                              ]),
                                                              t._v(" "),
                                                              s("div", { staticClass: "input-container" }, [
                                                                  s("div", { staticClass: "row" }, [
                                                                      s("div", { staticClass: "col-md-4" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                  s("input", {
                                                                                      directives: [{ name: "model", rawName: "v-model", value: t.form.anime.premuim, expression: "form.anime.premuim" }],
                                                                                      staticClass: "custom-control-input",
                                                                                      attrs: { placeholder: "Premuim", id: "premuim", type: "checkbox" },
                                                                                      domProps: { checked: Array.isArray(t.form.anime.premuim) ? t._i(t.form.anime.premuim, null) > -1 : t.form.anime.premuim },
                                                                                      on: {
                                                                                          change: function (e) {
                                                                                              var s = t.form.anime.premuim,
                                                                                                  a = e.target,
                                                                                                  i = !!a.checked;
                                                                                              if (Array.isArray(s)) {
                                                                                                  var r = t._i(s, null);
                                                                                                  a.checked
                                                                                                      ? r < 0 && t.$set(t.form.anime, "premuim", s.concat([null]))
                                                                                                      : r > -1 && t.$set(t.form.anime, "premuim", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                              } else t.$set(t.form.anime, "premuim", i);
                                                                                          },
                                                                                      },
                                                                                  }),
                                                                                  t._v(" "),
                                                                                  s("label", { staticClass: "custom-control-label", attrs: { for: "premuim" } }, [
                                                                                      t._v("\n                              Premuim\n                              Only\n                            "),
                                                                                  ]),
                                                                              ]),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      t.edit
                                                                          ? s("div", { staticClass: "col-md-3" }, [
                                                                                s("div", { staticClass: "form-group" }, [
                                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                        s("input", {
                                                                                            directives: [{ name: "model", rawName: "v-model", value: t.form.anime.active, expression: "form.anime.active" }],
                                                                                            staticClass: "custom-control-input",
                                                                                            attrs: { id: "active", type: "checkbox" },
                                                                                            domProps: { checked: Array.isArray(t.form.anime.active) ? t._i(t.form.anime.active, null) > -1 : t.form.anime.active },
                                                                                            on: {
                                                                                                change: function (e) {
                                                                                                    var s = t.form.anime.active,
                                                                                                        a = e.target,
                                                                                                        i = !!a.checked;
                                                                                                    if (Array.isArray(s)) {
                                                                                                        var r = t._i(s, null);
                                                                                                        a.checked
                                                                                                            ? r < 0 && t.$set(t.form.anime, "active", s.concat([null]))
                                                                                                            : r > -1 && t.$set(t.form.anime, "active", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                                    } else t.$set(t.form.anime, "active", i);
                                                                                                },
                                                                                            },
                                                                                        }),
                                                                                        t._v(" "),
                                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "active" } }, [t._v("Active")]),
                                                                                    ]),
                                                                                ]),
                                                                            ])
                                                                          : t._e(),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-4" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                  s("input", {
                                                                                      directives: [{ name: "model", rawName: "v-model", value: t.form.anime.newEpisodes, expression: "form.anime.newEpisodes" }],
                                                                                      staticClass: "custom-control-input",
                                                                                      attrs: { id: "newEpisodes", type: "checkbox" },
                                                                                      domProps: { checked: Array.isArray(t.form.anime.newEpisodes) ? t._i(t.form.anime.newEpisodes, null) > -1 : t.form.anime.newEpisodes },
                                                                                      on: {
                                                                                          change: function (e) {
                                                                                              var s = t.form.anime.newEpisodes,
                                                                                                  a = e.target,
                                                                                                  i = !!a.checked;
                                                                                              if (Array.isArray(s)) {
                                                                                                  var r = t._i(s, null);
                                                                                                  a.checked
                                                                                                      ? r < 0 && t.$set(t.form.anime, "newEpisodes", s.concat([null]))
                                                                                                      : r > -1 && t.$set(t.form.anime, "newEpisodes", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                              } else t.$set(t.form.anime, "newEpisodes", i);
                                                                                          },
                                                                                      },
                                                                                  }),
                                                                                  t._v(" "),
                                                                                  s("label", { staticClass: "custom-control-label", attrs: { for: "newEpisodes" } }, [t._v("Has New episodes ?")]),
                                                                              ]),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-3" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                  s("input", {
                                                                                      directives: [{ name: "model", rawName: "v-model", value: t.form.anime.pinned, expression: "form.anime.pinned" }],
                                                                                      staticClass: "custom-control-input",
                                                                                      attrs: { id: "pinned", type: "checkbox" },
                                                                                      domProps: { checked: Array.isArray(t.form.anime.pinned) ? t._i(t.form.anime.pinned, null) > -1 : t.form.anime.pinned },
                                                                                      on: {
                                                                                          change: function (e) {
                                                                                              var s = t.form.anime.pinned,
                                                                                                  a = e.target,
                                                                                                  i = !!a.checked;
                                                                                              if (Array.isArray(s)) {
                                                                                                  var r = t._i(s, null);
                                                                                                  a.checked
                                                                                                      ? r < 0 && t.$set(t.form.anime, "pinned", s.concat([null]))
                                                                                                      : r > -1 && t.$set(t.form.anime, "pinned", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                              } else t.$set(t.form.anime, "pinned", i);
                                                                                          },
                                                                                      },
                                                                                  }),
                                                                                  t._v(" "),
                                                                                  s("label", { staticClass: "custom-control-label", attrs: { for: "pinned" } }, [t._v("Pinned")]),
                                                                              ]),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      t.add
                                                                          ? s("div", { staticClass: "col-md-4" }, [
                                                                                s("div", { staticClass: "form-group" }, [
                                                                                    s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                        s("input", {
                                                                                            directives: [{ name: "model", rawName: "v-model", value: t.form.notification, expression: "form.notification" }],
                                                                                            staticClass: "custom-control-input",
                                                                                            attrs: { id: "notification", type: "checkbox" },
                                                                                            domProps: { checked: Array.isArray(t.form.notification) ? t._i(t.form.notification, null) > -1 : t.form.notification },
                                                                                            on: {
                                                                                                change: function (e) {
                                                                                                    var s = t.form.notification,
                                                                                                        a = e.target,
                                                                                                        i = !!a.checked;
                                                                                                    if (Array.isArray(s)) {
                                                                                                        var r = t._i(s, null);
                                                                                                        a.checked
                                                                                                            ? r < 0 && t.$set(t.form, "notification", s.concat([null]))
                                                                                                            : r > -1 && t.$set(t.form, "notification", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                                    } else t.$set(t.form, "notification", i);
                                                                                                },
                                                                                            },
                                                                                        }),
                                                                                        t._v(" "),
                                                                                        s("label", { staticClass: "custom-control-label", attrs: { for: "notification" } }, [t._v("Push notification")]),
                                                                                    ]),
                                                                                ]),
                                                                            ])
                                                                          : t._e(),
                                                                  ]),
                                                              ]),
                                                              t._v(" "),
                                                              s("div", { staticClass: "input-container" }, [
                                                                  s("div", { staticClass: "row" }, [
                                                                      s("div", { staticClass: "col-md-6" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "poster_path" } }, [t._v("Poster Path")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.anime.poster_path, expression: "form.anime.poster_path" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "poster_path", name: "poster_path", type: "text" },
                                                                                  domProps: { value: t.form.anime.poster_path },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.anime, "poster_path", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-6" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", [t._v("Poster upload")]),
                                                                              t._v(" "),
                                                                              s("input", { staticClass: "file-upload-default" }),
                                                                              t._v(" "),
                                                                              s("div", { staticClass: "input-group col-xs-12" }, [
                                                                                  s("input", {
                                                                                      staticClass: "form-control file-upload-info",
                                                                                      attrs: { id: "poster", placeholder: "Upload Image", type: "file" },
                                                                                      on: { change: t.storePoster },
                                                                                  }),
                                                                                  t._v(" "),
                                                                                  t._m(3),
                                                                              ]),
                                                                          ]),
                                                                      ]),
                                                                  ]),
                                                              ]),
                                                              t._v(" "),
                                                              s("div", { staticClass: "row" }, [
                                                                  s("div", { staticClass: "col-md-12" }, [
                                                                      s(
                                                                          "div",
                                                                          { staticClass: "form-group" },
                                                                          [
                                                                              s("multiselect", {
                                                                                  attrs: {
                                                                                      "clear-on-select": !1,
                                                                                      "close-on-select": !1,
                                                                                      hideSelected: !0,
                                                                                      multiple: !0,
                                                                                      options: t.options,
                                                                                      "preserve-search": !0,
                                                                                      label: "name",
                                                                                      placeholder: "Select Genre",
                                                                                      "track-by": "name",
                                                                                  },
                                                                                  on: { remove: t.destroyGenre },
                                                                                  model: {
                                                                                      value: t.form.anime.genres,
                                                                                      callback: function (e) {
                                                                                          t.$set(t.form.anime, "genres", e);
                                                                                      },
                                                                                      expression: "form.anime.genres",
                                                                                  },
                                                                              }),
                                                                          ],
                                                                          1
                                                                      ),
                                                                  ]),
                                                              ]),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-6" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "poster_path" } }, [t._v("Backdrop Path")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.anime.backdrop_path, expression: "form.anime.backdrop_path" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "backdrop_path", name: "backdrop_path", type: "text" },
                                                                  domProps: { value: t.form.anime.backdrop_path },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.anime, "backdrop_path", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                      t._v(" "),
                                                      s("div", { staticClass: "col-md-6" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", [t._v("Backdrop upload")]),
                                                              t._v(" "),
                                                              s("input", { staticClass: "file-upload-default" }),
                                                              t._v(" "),
                                                              s("div", { staticClass: "input-group col-xs-12" }, [
                                                                  s("input", { staticClass: "form-control file-upload-info", attrs: { id: "backdrop", placeholder: "Upload Image", type: "file" }, on: { change: t.storeBackdrop } }),
                                                                  t._v(" "),
                                                                  t._m(4),
                                                              ]),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      t._m(5),
                                                      t._v(" "),
                                                      s("div", { staticClass: "row" }, [
                                                          s("div", { staticClass: "col-md-12" }, [
                                                              s(
                                                                  "div",
                                                                  { staticClass: "form-group" },
                                                                  [
                                                                      s("multiselect", {
                                                                          attrs: {
                                                                              "clear-on-select": !1,
                                                                              "close-on-select": !1,
                                                                              hideSelected: !0,
                                                                              multiple: !0,
                                                                              options: t.optionsnetwork,
                                                                              "preserve-search": !0,
                                                                              "open-direction": "bottom",
                                                                              noResult: "No Cast found. Consider changing the search query",
                                                                              "track-by": "id",
                                                                              label: "name",
                                                                              placeholder: "Select Network",
                                                                          },
                                                                          on: { remove: t.destroyNetwork },
                                                                          model: {
                                                                              value: t.form.anime.networks,
                                                                              callback: function (e) {
                                                                                  t.$set(t.form.anime, "networks", e);
                                                                              },
                                                                              expression: "form.anime.networks",
                                                                          },
                                                                      }),
                                                                  ],
                                                                  1
                                                              ),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      t._m(6),
                                                      t._v(" "),
                                                      s("div", { staticClass: "row" }, [
                                                          s("div", { staticClass: "col-md-4" }, [
                                                              s("div", { staticClass: "form-group" }, [
                                                                  s("label", { attrs: { for: "preview_path" } }, [t._v("Youtube Trailer ID")]),
                                                                  t._v(" "),
                                                                  s("input", {
                                                                      directives: [{ name: "model", rawName: "v-model", value: t.form.anime.preview_path, expression: "form.anime.preview_path" }],
                                                                      staticClass: "form-control",
                                                                      attrs: { id: "preview_path", type: "text" },
                                                                      domProps: { value: t.form.anime.preview_path },
                                                                      on: {
                                                                          input: function (e) {
                                                                              e.target.composing || t.$set(t.form.anime, "preview_path", e.target.value);
                                                                          },
                                                                      },
                                                                  }),
                                                              ]),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "col-md-4" }, [
                                                              s("div", { staticClass: "form-group" }, [
                                                                  s("label", { attrs: { for: "trailer_url" } }, [t._v("Youtube Trailer Self Hosted")]),
                                                                  t._v(" "),
                                                                  s("input", {
                                                                      directives: [{ name: "model", rawName: "v-model", value: t.form.anime.trailer_url, expression: "form.anime.trailer_url" }],
                                                                      staticClass: "form-control",
                                                                      attrs: { id: "trailer_url", type: "text" },
                                                                      domProps: { value: t.form.anime.trailer_url },
                                                                      on: {
                                                                          input: function (e) {
                                                                              e.target.composing || t.$set(t.form.anime, "trailer_url", e.target.value);
                                                                          },
                                                                      },
                                                                  }),
                                                              ]),
                                                          ]),
                                                          t._v(" "),
                                                          s("div", { staticClass: "col-md-4" }, [
                                                              s("div", { staticClass: "form-group" }, [
                                                                  s("label", [t._v("Upload Trailer")]),
                                                                  t._v(" "),
                                                                  s("input", { staticClass: "file-upload-default" }),
                                                                  t._v(" "),
                                                                  s("div", { staticClass: "input-group col-xs-12" }, [
                                                                      s("input", {
                                                                          staticClass: "form-control file-upload-info",
                                                                          attrs: { id: "video_trailer", placeholder: "Upload Image", type: "file" },
                                                                          on: { change: t.storeVideoTrailer },
                                                                      }),
                                                                      t._v(" "),
                                                                      t._m(7),
                                                                  ]),
                                                              ]),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      t._m(8),
                                                      t._v(" "),
                                                      s("div", { staticClass: "row" }, [
                                                          s("div", { staticClass: "col-md-12" }, [
                                                              s(
                                                                  "div",
                                                                  { staticClass: "form-group" },
                                                                  [
                                                                      s("multiselect", {
                                                                          attrs: {
                                                                              "clear-on-select": !1,
                                                                              "close-on-select": !1,
                                                                              hideSelected: !0,
                                                                              multiple: !0,
                                                                              options: t.optionscast,
                                                                              "preserve-search": !0,
                                                                              "open-direction": "bottom",
                                                                              noResult: "No Cast found. Consider changing the search query",
                                                                              "track-by": "id",
                                                                              label: "name",
                                                                              placeholder: "Select Cast",
                                                                          },
                                                                          on: { remove: t.destroyCast },
                                                                          model: {
                                                                              value: t.form.anime.casterslist,
                                                                              callback: function (e) {
                                                                                  t.$set(t.form.anime, "casterslist", e);
                                                                              },
                                                                              expression: "form.anime.casterslist",
                                                                          },
                                                                      }),
                                                                  ],
                                                                  1
                                                              ),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "overview" } }, [t._v("Details")]),
                                                              t._v(" "),
                                                              s("textarea", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.anime.overview, expression: "form.anime.overview" }],
                                                                  staticClass: "form-control pb-3",
                                                                  attrs: { id: "overview", rows: "6", type: "text" },
                                                                  domProps: { value: t.form.anime.overview },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.anime, "overview", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-4" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "release_date" } }, [t._v("Release Date")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.anime.first_air_date, expression: "form.anime.first_air_date" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "release_date", type: "date" },
                                                                  domProps: { value: t.form.anime.first_air_date },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.anime, "first_air_date", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                      t._v(" "),
                                                      s("div", { staticClass: "col-md-4" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "preview_path" } }, [t._v("Youtube Trailer ID")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.anime.preview_path, expression: "form.anime.preview_path" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "preview_path", type: "text" },
                                                                  domProps: { value: t.form.anime.preview_path },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.anime, "preview_path", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                      t._v(" "),
                                                      s("div", { staticClass: "col-md-4" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "vote_average" } }, [t._v("Vote Average")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.anime.vote_average, expression: "form.anime.vote_average" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "vote_average", type: "text" },
                                                                  domProps: { value: t.form.anime.vote_average },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.anime, "vote_average", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-6" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "vote_count" } }, [t._v("Vote Count")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.anime.vote_count, expression: "form.anime.vote_count" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "vote_count", type: "text" },
                                                                  domProps: { value: t.form.anime.vote_count },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.anime, "vote_count", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                      t._v(" "),
                                                      s("div", { staticClass: "col-md-6" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "popularity" } }, [t._v("Popularity")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.anime.popularity, expression: "form.anime.popularity" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "popularity", type: "text" },
                                                                  domProps: { value: t.form.anime.popularity },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.anime, "popularity", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s(
                                                      "div",
                                                      { staticClass: "row" },
                                                      [
                                                          s(
                                                              "div",
                                                              { staticClass: "col-md-6" },
                                                              [
                                                                  s("div", { staticClass: "input-group" }, [
                                                                      s("input", {
                                                                          directives: [{ name: "model", rawName: "v-model", value: t.addseason, expression: "addseason" }],
                                                                          staticClass: "form-control input",
                                                                          attrs: { type: "text", placeholder: "Season number" },
                                                                          domProps: { value: t.addseason },
                                                                          on: {
                                                                              input: function (e) {
                                                                                  e.target.composing || (t.addseason = e.target.value);
                                                                              },
                                                                          },
                                                                      }),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "input-group-btn" }, [
                                                                          s(
                                                                              "button",
                                                                              {
                                                                                  staticClass: "btn btn-primary ml-2",
                                                                                  attrs: { type: "submit" },
                                                                                  on: {
                                                                                      click: function (e) {
                                                                                          return e.preventDefault(), t.getSeason();
                                                                                      },
                                                                                  },
                                                                              },
                                                                              [t._v("Add from TMDB")]
                                                                          ),
                                                                          t._v(" "),
                                                                          s(
                                                                              "button",
                                                                              {
                                                                                  staticClass: "btn btn-primary ml-2",
                                                                                  attrs: { type: "submit" },
                                                                                  on: {
                                                                                      click: function (e) {
                                                                                          t.showModalSeason = !0;
                                                                                      },
                                                                                  },
                                                                              },
                                                                              [t._v("Add Custom Season")]
                                                                          ),
                                                                      ]),
                                                                  ]),
                                                                  t._v(" "),
                                                                  s(
                                                                      "Modal",
                                                                      {
                                                                          attrs: { title: "Add New Season" },
                                                                          model: {
                                                                              value: t.showModalSeason,
                                                                              callback: function (e) {
                                                                                  t.showModalSeason = e;
                                                                              },
                                                                              expression: "showModalSeason",
                                                                          },
                                                                      },
                                                                      [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "season_number" } }, [t._v("Season Number")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.customSeason.season_number, expression: "customSeason.season_number" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "season_number", type: "text" },
                                                                                  domProps: { value: t.customSeason.season_number },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.customSeason, "season_number", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                          t._v(" "),
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "season_number" } }, [t._v("Season Name")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.customSeason.name, expression: "customSeason.name" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "name", type: "text" },
                                                                                  domProps: { value: t.customSeason.name },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.customSeason, "name", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                          t._v(" "),
                                                                          s("label", { attrs: { for: "seasonoverview" } }, [t._v("Season Overview")]),
                                                                          t._v(" "),
                                                                          s("textarea", {
                                                                              directives: [{ name: "model", rawName: "v-model", value: t.customSeason.overview, expression: "customSeason.overview" }],
                                                                              staticClass: "form-control",
                                                                              attrs: { id: "seasonoverview", required: "" },
                                                                              domProps: { value: t.customSeason.overview },
                                                                              on: {
                                                                                  input: function (e) {
                                                                                      e.target.composing || t.$set(t.customSeason, "overview", e.target.value);
                                                                                  },
                                                                              },
                                                                          }),
                                                                          t._v(" "),
                                                                          s("div", { staticClass: "input-group" }, [
                                                                              s("div", { staticClass: "input-group-btn" }, [
                                                                                  s(
                                                                                      "button",
                                                                                      {
                                                                                          staticClass: "btn btn-primary ml-2",
                                                                                          attrs: { type: "submit" },
                                                                                          on: {
                                                                                              click: function (e) {
                                                                                                  return e.preventDefault(), t.addNewSeason();
                                                                                              },
                                                                                          },
                                                                                      },
                                                                                      [t._v("Save")]
                                                                                  ),
                                                                              ]),
                                                                          ]),
                                                                      ]
                                                                  ),
                                                                  t._v(" "),
                                                                  s(
                                                                      "div",
                                                                      { staticClass: "form-group" },
                                                                      [
                                                                          s("label", { attrs: { for: "season" } }, [t._v("Season")]),
                                                                          t._v(" "),
                                                                          s("multiselect", {
                                                                              attrs: {
                                                                                  "deselect-label": "Can't remove this value",
                                                                                  "track-by": "season_number",
                                                                                  label: "season_number",
                                                                                  placeholder: "Select season",
                                                                                  options: t.form.anime.seasons,
                                                                                  searchable: !0,
                                                                                  "allow-empty": !0,
                                                                              },
                                                                              on: { select: t.selectSeason },
                                                                              scopedSlots: t._u(
                                                                                  [
                                                                                      {
                                                                                          key: "singleLabel",
                                                                                          fn: function (e) {
                                                                                              return [s("span", { staticClass: "option__title ml-1" }, [t._v(t._s(e.option.name))])];
                                                                                          },
                                                                                      },
                                                                                  ],
                                                                                  null,
                                                                                  !1,
                                                                                  3162673735
                                                                              ),
                                                                              model: {
                                                                                  value: t.season,
                                                                                  callback: function (e) {
                                                                                      t.season = e;
                                                                                  },
                                                                                  expression: "season",
                                                                              },
                                                                          }),
                                                                      ],
                                                                      1
                                                                  ),
                                                                  t._v(" "),
                                                                  t.selectedSeason >= 0 && t.form.anime.seasons[t.selectedSeason]
                                                                      ? s("div", { staticClass: "form-group" }, [
                                                                            s("label", { attrs: { for: "seasonoverview" } }, [t._v("Season Id")]),
                                                                            t._v(" "),
                                                                            s("textarea", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.form.anime.seasons[t.selectedSeason].id, expression: "form.anime.seasons[selectedSeason].id" }],
                                                                                staticClass: "form-control",
                                                                                attrs: { id: "seasonoverview", required: "" },
                                                                                domProps: { value: t.form.anime.seasons[t.selectedSeason].id },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || t.$set(t.form.anime.seasons[t.selectedSeason], "id", e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { attrs: { for: "seasonoverview" } }, [t._v("Season Name")]),
                                                                            t._v(" "),
                                                                            s("textarea", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.form.anime.seasons[t.selectedSeason].name, expression: "form.anime.seasons[selectedSeason].name" }],
                                                                                staticClass: "form-control",
                                                                                attrs: { id: "seasonoverview", required: "" },
                                                                                domProps: { value: t.form.anime.seasons[t.selectedSeason].name },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || t.$set(t.form.anime.seasons[t.selectedSeason], "name", e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                            t._v(" "),
                                                                            s("label", { attrs: { for: "seasonoverview" } }, [t._v("Season Overview")]),
                                                                            t._v(" "),
                                                                            s("textarea", {
                                                                                directives: [
                                                                                    { name: "model", rawName: "v-model", value: t.form.anime.seasons[t.selectedSeason].overview, expression: "form.anime.seasons[selectedSeason].overview" },
                                                                                ],
                                                                                staticClass: "form-control",
                                                                                attrs: { id: "seasonoverview", required: "" },
                                                                                domProps: { value: t.form.anime.seasons[t.selectedSeason].overview },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || t.$set(t.form.anime.seasons[t.selectedSeason], "overview", e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                        ])
                                                                      : t._e(),
                                                                  t._v(" "),
                                                                  t.selectedSeason >= 0
                                                                      ? s("div", { staticClass: "input-group" }, [
                                                                            t._m(9),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "custom-file" }, [
                                                                                s("input", {
                                                                                    staticClass: "custom-file-input",
                                                                                    attrs: { type: "file", id: "posterSeason" },
                                                                                    on: {
                                                                                        change: function (e) {
                                                                                            return t.storePosterSeason();
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("label", { staticClass: "custom-file-label", attrs: { for: "posterSeason" } }, [
                                                                                    t._v(t._s(t.posterSeason.length ? t.posterSeason.name : "Choose poster season")),
                                                                                ]),
                                                                            ]),
                                                                        ])
                                                                      : t._e(),
                                                                  t._v(" "),
                                                                  t.selectedSeason >= 0
                                                                      ? s("div", { staticClass: "float-right my-2" }, [
                                                                            s(
                                                                                "button",
                                                                                {
                                                                                    staticClass: "btn btn-danger mr-2",
                                                                                    on: {
                                                                                        click: function (e) {
                                                                                            return t.destroySeason();
                                                                                        },
                                                                                    },
                                                                                },
                                                                                [t._v("Delete Season")]
                                                                            ),
                                                                        ])
                                                                      : t._e(),
                                                              ],
                                                              1
                                                          ),
                                                          t._v(" "),
                                                          t.selectedSeason >= 0
                                                              ? [
                                                                    s(
                                                                        "div",
                                                                        { staticClass: "col-md-6" },
                                                                        [
                                                                            s("div", { staticClass: "input-group" }, [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.addepisode, expression: "addepisode" }],
                                                                                    staticClass: "form-control input",
                                                                                    attrs: { type: "text", placeholder: "Episode number" },
                                                                                    domProps: { value: t.addepisode },
                                                                                    on: {
                                                                                        input: function (e) {
                                                                                            e.target.composing || (t.addepisode = e.target.value);
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("div", { staticClass: "input-group-btn" }, [
                                                                                    s(
                                                                                        "button",
                                                                                        {
                                                                                            staticClass: "btn btn-primary ml-2",
                                                                                            attrs: { type: "submit" },
                                                                                            on: {
                                                                                                click: function (e) {
                                                                                                    return e.preventDefault(), t.getEpisode.apply(null, arguments);
                                                                                                },
                                                                                            },
                                                                                        },
                                                                                        [t._v("Add from TMDB")]
                                                                                    ),
                                                                                    t._v(" "),
                                                                                    s(
                                                                                        "button",
                                                                                        {
                                                                                            staticClass: "btn btn-primary ml-2",
                                                                                            attrs: { type: "submit" },
                                                                                            on: {
                                                                                                click: function (e) {
                                                                                                    t.showModal = !0;
                                                                                                },
                                                                                            },
                                                                                        },
                                                                                        [t._v("Add Custom Episode")]
                                                                                    ),
                                                                                ]),
                                                                            ]),
                                                                            t._v(" "),
                                                                            s(
                                                                                "Modal",
                                                                                {
                                                                                    attrs: { title: "Add New Episode" },
                                                                                    model: {
                                                                                        value: t.showModal,
                                                                                        callback: function (e) {
                                                                                            t.showModal = e;
                                                                                        },
                                                                                        expression: "showModal",
                                                                                    },
                                                                                },
                                                                                [
                                                                                    s("label", { attrs: { for: "episode_number" } }, [t._v("Episode Number")]),
                                                                                    t._v(" "),
                                                                                    s("textarea", {
                                                                                        directives: [{ name: "model", rawName: "v-model", value: t.customEpisodes.episode_number, expression: "customEpisodes.episode_number" }],
                                                                                        staticClass: "form-control",
                                                                                        attrs: { id: "episode_number", required: "" },
                                                                                        domProps: { value: t.customEpisodes.episode_number },
                                                                                        on: {
                                                                                            input: function (e) {
                                                                                                e.target.composing || t.$set(t.customEpisodes, "episode_number", e.target.value);
                                                                                            },
                                                                                        },
                                                                                    }),
                                                                                    t._v(" "),
                                                                                    s("label", { attrs: { for: "episode_number" } }, [t._v("Episode Name")]),
                                                                                    t._v(" "),
                                                                                    s("textarea", {
                                                                                        directives: [{ name: "model", rawName: "v-model", value: t.customEpisodes.name, expression: "customEpisodes.name" }],
                                                                                        staticClass: "form-control",
                                                                                        attrs: { id: "name", required: "" },
                                                                                        domProps: { value: t.customEpisodes.name },
                                                                                        on: {
                                                                                            input: function (e) {
                                                                                                e.target.composing || t.$set(t.customEpisodes, "name", e.target.value);
                                                                                            },
                                                                                        },
                                                                                    }),
                                                                                    t._v(" "),
                                                                                    s("label", { attrs: { for: "seasonoverview" } }, [t._v("Episode Overview")]),
                                                                                    t._v(" "),
                                                                                    s("textarea", {
                                                                                        directives: [{ name: "model", rawName: "v-model", value: t.customEpisodes.overview, expression: "customEpisodes.overview" }],
                                                                                        staticClass: "form-control",
                                                                                        attrs: { id: "seasonoverview", required: "" },
                                                                                        domProps: { value: t.customEpisodes.overview },
                                                                                        on: {
                                                                                            input: function (e) {
                                                                                                e.target.composing || t.$set(t.customEpisodes, "overview", e.target.value);
                                                                                            },
                                                                                        },
                                                                                    }),
                                                                                    t._v(" "),
                                                                                    s("div", { staticClass: "input-group" }, [
                                                                                        s("div", { staticClass: "input-group-btn" }, [
                                                                                            s(
                                                                                                "button",
                                                                                                {
                                                                                                    staticClass: "btn btn-primary ml-2",
                                                                                                    attrs: { type: "submit" },
                                                                                                    on: {
                                                                                                        click: function (e) {
                                                                                                            return e.preventDefault(), t.addNewEpisode();
                                                                                                        },
                                                                                                    },
                                                                                                },
                                                                                                [t._v("Save")]
                                                                                            ),
                                                                                        ]),
                                                                                    ]),
                                                                                ]
                                                                            ),
                                                                            t._v(" "),
                                                                            t.selectedSeason >= 0
                                                                                ? s(
                                                                                      "div",
                                                                                      { staticClass: "form-group" },
                                                                                      [
                                                                                          s("label", { attrs: { for: "episode" } }, [t._v("Episode")]),
                                                                                          t._v(" "),
                                                                                          s("multiselect", {
                                                                                              attrs: {
                                                                                                  "deselect-label": "Can't remove this value",
                                                                                                  "track-by": "episode_number",
                                                                                                  label: "episode_number",
                                                                                                  placeholder: "Select episode",
                                                                                                  options: t.form.anime.seasons[t.selectedSeason].episodes,
                                                                                                  searchable: !0,
                                                                                                  "allow-empty": !1,
                                                                                              },
                                                                                              on: { select: t.selectEpisode },
                                                                                              scopedSlots: t._u(
                                                                                                  [
                                                                                                      {
                                                                                                          key: "singleLabel",
                                                                                                          fn: function (e) {
                                                                                                              var a = e.option;
                                                                                                              return [
                                                                                                                  s("img", { staticClass: "option__image", attrs: { src: a.still_path, alt: a.episode_number, height: "90" } }),
                                                                                                                  t._v(" "),
                                                                                                                  s("strong", [t._v(t._s(a.episode_number))]),
                                                                                                                  t._v(":\n                              "),
                                                                                                                  s("strong", [t._v(t._s(a.name))]),
                                                                                                              ];
                                                                                                          },
                                                                                                      },
                                                                                                  ],
                                                                                                  null,
                                                                                                  !1,
                                                                                                  1029030856
                                                                                              ),
                                                                                              model: {
                                                                                                  value: t.episode,
                                                                                                  callback: function (e) {
                                                                                                      t.episode = e;
                                                                                                  },
                                                                                                  expression: "episode",
                                                                                              },
                                                                                          }),
                                                                                      ],
                                                                                      1
                                                                                  )
                                                                                : t._e(),
                                                                            t._v(" "),
                                                                            t.selectedEpisode >= 0 && t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode]
                                                                                ? s("div", { staticClass: "form-group" }, [
                                                                                      s("div", { staticClass: "col-md-6" }, [
                                                                                          s("div", { staticClass: "form-group" }, [
                                                                                              s(
                                                                                                  "button",
                                                                                                  {
                                                                                                      staticClass: "btn btn-primary ml-2",
                                                                                                      on: {
                                                                                                          click: function (e) {
                                                                                                              return t.sendEpisode(t.episode);
                                                                                                          },
                                                                                                      },
                                                                                                  },
                                                                                                  [t._v("Send Notification")]
                                                                                              ),
                                                                                          ]),
                                                                                      ]),
                                                                                      t._v(" "),
                                                                                      s("div", { staticClass: "col-md-6" }, [
                                                                                          s("div", { staticClass: "form-group" }, [
                                                                                              s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                                  s("input", {
                                                                                                      directives: [
                                                                                                          {
                                                                                                              name: "model",
                                                                                                              rawName: "v-model",
                                                                                                              value: t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].hasrecap,
                                                                                                              expression: "form.anime.seasons[selectedSeason].episodes[selectedEpisode].hasrecap",
                                                                                                          },
                                                                                                      ],
                                                                                                      staticClass: "custom-control-input",
                                                                                                      attrs: { id: "hasrecap", type: "checkbox" },
                                                                                                      domProps: {
                                                                                                          checked: Array.isArray(t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].hasrecap)
                                                                                                              ? t._i(t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].hasrecap, null) > -1
                                                                                                              : t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].hasrecap,
                                                                                                      },
                                                                                                      on: {
                                                                                                          change: function (e) {
                                                                                                              var s = t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].hasrecap,
                                                                                                                  a = e.target,
                                                                                                                  i = !!a.checked;
                                                                                                              if (Array.isArray(s)) {
                                                                                                                  var r = t._i(s, null);
                                                                                                                  a.checked
                                                                                                                      ? r < 0 && t.$set(t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode], "hasrecap", s.concat([null]))
                                                                                                                      : r > -1 &&
                                                                                                                        t.$set(
                                                                                                                            t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode],
                                                                                                                            "hasrecap",
                                                                                                                            s.slice(0, r).concat(s.slice(r + 1))
                                                                                                                        );
                                                                                                              } else t.$set(t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode], "hasrecap", i);
                                                                                                          },
                                                                                                      },
                                                                                                  }),
                                                                                                  t._v(" "),
                                                                                                  s("label", { staticClass: "custom-control-label", attrs: { for: "hasrecap" } }, [t._v("Episode has Skip Recap ?")]),
                                                                                              ]),
                                                                                          ]),
                                                                                      ]),
                                                                                      t._v(" "),
                                                                                      s("div", { staticClass: "col-md-6" }, [
                                                                                          s("div", { staticClass: "form-group" }, [
                                                                                              s("label", { attrs: { for: "skiprecap_start_in" } }, [t._v("Episode Start in (Exprime in sec !)")]),
                                                                                              t._v(" "),
                                                                                              s("input", {
                                                                                                  directives: [
                                                                                                      {
                                                                                                          name: "model",
                                                                                                          rawName: "v-model",
                                                                                                          value: t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].skiprecap_start_in,
                                                                                                          expression: "form.anime.seasons[selectedSeason].episodes[selectedEpisode].skiprecap_start_in",
                                                                                                      },
                                                                                                  ],
                                                                                                  staticClass: "form-control",
                                                                                                  attrs: { id: "poster_path", name: "skiprecap_start_in", type: "text" },
                                                                                                  domProps: { value: t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].skiprecap_start_in },
                                                                                                  on: {
                                                                                                      input: function (e) {
                                                                                                          e.target.composing ||
                                                                                                              t.$set(t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode], "skiprecap_start_in", e.target.value);
                                                                                                      },
                                                                                                  },
                                                                                              }),
                                                                                          ]),
                                                                                      ]),
                                                                                      t._v(" "),
                                                                                      s("label", { attrs: { for: "episode_number" } }, [t._v("Episode ID")]),
                                                                                      t._v(" "),
                                                                                      s("textarea", {
                                                                                          directives: [
                                                                                              {
                                                                                                  name: "model",
                                                                                                  rawName: "v-model",
                                                                                                  value: t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].id,
                                                                                                  expression: "form.anime.seasons[selectedSeason].episodes[selectedEpisode].id",
                                                                                              },
                                                                                          ],
                                                                                          staticClass: "form-control",
                                                                                          attrs: { id: "episode_number", required: "" },
                                                                                          domProps: { value: t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].id },
                                                                                          on: {
                                                                                              input: function (e) {
                                                                                                  e.target.composing || t.$set(t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode], "id", e.target.value);
                                                                                              },
                                                                                          },
                                                                                      }),
                                                                                      t._v(" "),
                                                                                      s("label", { attrs: { for: "episode_number" } }, [t._v("Episode Number")]),
                                                                                      t._v(" "),
                                                                                      s("textarea", {
                                                                                          directives: [
                                                                                              {
                                                                                                  name: "model",
                                                                                                  rawName: "v-model",
                                                                                                  value: t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].episode_number,
                                                                                                  expression: "form.anime.seasons[selectedSeason].episodes[selectedEpisode].episode_number",
                                                                                              },
                                                                                          ],
                                                                                          staticClass: "form-control",
                                                                                          attrs: { id: "episode_number", required: "" },
                                                                                          domProps: { value: t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].episode_number },
                                                                                          on: {
                                                                                              input: function (e) {
                                                                                                  e.target.composing || t.$set(t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode], "episode_number", e.target.value);
                                                                                              },
                                                                                          },
                                                                                      }),
                                                                                      t._v(" "),
                                                                                      s("label", { attrs: { for: "episode_number" } }, [t._v("Episode Name")]),
                                                                                      t._v(" "),
                                                                                      s("textarea", {
                                                                                          directives: [
                                                                                              {
                                                                                                  name: "model",
                                                                                                  rawName: "v-model",
                                                                                                  value: t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].name,
                                                                                                  expression: "form.anime.seasons[selectedSeason].episodes[selectedEpisode].name",
                                                                                              },
                                                                                          ],
                                                                                          staticClass: "form-control",
                                                                                          attrs: { id: "name", required: "" },
                                                                                          domProps: { value: t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].name },
                                                                                          on: {
                                                                                              input: function (e) {
                                                                                                  e.target.composing || t.$set(t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode], "name", e.target.value);
                                                                                              },
                                                                                          },
                                                                                      }),
                                                                                      t._v(" "),
                                                                                      s("label", { attrs: { for: "seasonoverview" } }, [t._v("Episode Overview")]),
                                                                                      t._v(" "),
                                                                                      s("textarea", {
                                                                                          directives: [
                                                                                              {
                                                                                                  name: "model",
                                                                                                  rawName: "v-model",
                                                                                                  value: t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].overview,
                                                                                                  expression: "form.anime.seasons[selectedSeason].episodes[selectedEpisode].overview",
                                                                                              },
                                                                                          ],
                                                                                          staticClass: "form-control",
                                                                                          attrs: { id: "seasonoverview", required: "" },
                                                                                          domProps: { value: t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].overview },
                                                                                          on: {
                                                                                              input: function (e) {
                                                                                                  e.target.composing || t.$set(t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode], "overview", e.target.value);
                                                                                              },
                                                                                          },
                                                                                      }),
                                                                                      t._v(" "),
                                                                                      s("label", { attrs: { for: "still_path" } }, [t._v("Episode Cover")]),
                                                                                      t._v(" "),
                                                                                      s("input", {
                                                                                          directives: [
                                                                                              {
                                                                                                  name: "model",
                                                                                                  rawName: "v-model",
                                                                                                  value: t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].still_path,
                                                                                                  expression: "form.anime.seasons[selectedSeason].episodes[selectedEpisode].still_path",
                                                                                              },
                                                                                          ],
                                                                                          staticClass: "form-control",
                                                                                          attrs: { id: "still_path", required: "" },
                                                                                          domProps: { value: t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].still_path },
                                                                                          on: {
                                                                                              input: function (e) {
                                                                                                  e.target.composing || t.$set(t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode], "still_path", e.target.value);
                                                                                              },
                                                                                          },
                                                                                      }),
                                                                                      t._v(" "),
                                                                                      s("label", { attrs: { for: "vote_average" } }, [t._v("Episode Vote Average")]),
                                                                                      t._v(" "),
                                                                                      s("input", {
                                                                                          directives: [
                                                                                              {
                                                                                                  name: "model",
                                                                                                  rawName: "v-model",
                                                                                                  value: t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].vote_average,
                                                                                                  expression: "form.anime.seasons[selectedSeason].episodes[selectedEpisode].vote_average",
                                                                                              },
                                                                                          ],
                                                                                          staticClass: "form-control",
                                                                                          attrs: { id: "vote_average", required: "" },
                                                                                          domProps: { value: t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].vote_average },
                                                                                          on: {
                                                                                              input: function (e) {
                                                                                                  e.target.composing || t.$set(t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode], "vote_average", e.target.value);
                                                                                              },
                                                                                          },
                                                                                      }),
                                                                                      t._v(" "),
                                                                                      s("label", { attrs: { for: "air_date" } }, [t._v("Episode Air Date")]),
                                                                                      t._v(" "),
                                                                                      s("input", {
                                                                                          directives: [
                                                                                              {
                                                                                                  name: "model",
                                                                                                  rawName: "v-model",
                                                                                                  value: t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].air_date,
                                                                                                  expression: "form.anime.seasons[selectedSeason].episodes[selectedEpisode].air_date",
                                                                                              },
                                                                                          ],
                                                                                          staticClass: "form-control",
                                                                                          attrs: { id: "air_date", required: "" },
                                                                                          domProps: { value: t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].air_date },
                                                                                          on: {
                                                                                              input: function (e) {
                                                                                                  e.target.composing || t.$set(t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode], "air_date", e.target.value);
                                                                                              },
                                                                                          },
                                                                                      }),
                                                                                  ])
                                                                                : t._e(),
                                                                            t._v(" "),
                                                                            t.selectedEpisode >= 0
                                                                                ? s("div", { staticClass: "input-group" }, [
                                                                                      t._m(10),
                                                                                      t._v(" "),
                                                                                      s("div", { staticClass: "custom-file" }, [
                                                                                          s("input", { staticClass: "custom-file-input", attrs: { type: "file", id: "stillEpisode" }, on: { change: t.storeStillEpisode } }),
                                                                                          t._v(" "),
                                                                                          s("label", { staticClass: "custom-file-label", attrs: { for: "stillEpisode" } }, [
                                                                                              t._v(t._s(t.stillEpisode.length ? t.stillEpisode.name : "Choose still episode")),
                                                                                          ]),
                                                                                      ]),
                                                                                  ])
                                                                                : t._e(),
                                                                            t._v(" "),
                                                                            t.selectedEpisode >= 0
                                                                                ? s("div", { staticClass: "float-right my-2" }, [
                                                                                      s(
                                                                                          "button",
                                                                                          {
                                                                                              staticClass: "btn btn-danger ml-2",
                                                                                              attrs: { type: "button" },
                                                                                              on: {
                                                                                                  click: function (e) {
                                                                                                      return t.destroyEpisode();
                                                                                                  },
                                                                                              },
                                                                                          },
                                                                                          [s("em", { staticClass: "far fa-trash-alt" })]
                                                                                      ),
                                                                                  ])
                                                                                : t._e(),
                                                                        ],
                                                                        1
                                                                    ),
                                                                ]
                                                              : t._e(),
                                                      ],
                                                      2
                                                  ),
                                                  t._v(" "),
                                                  t.selectedEpisode >= 0
                                                      ? s("section", [
                                                            s("div", { staticClass: "form-group" }, [
                                                                t._m(11),
                                                                t._v(" "),
                                                                s("div", { staticClass: "row" }, [
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [
                                                                                s("label", { attrs: { for: "server" } }, [t._v("Server")]),
                                                                                t._v(" "),
                                                                                s("multiselect", {
                                                                                    attrs: { options: t.servers, id: "server", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                    model: {
                                                                                        value: t.server,
                                                                                        callback: function (e) {
                                                                                            t.server = e;
                                                                                        },
                                                                                        expression: "server",
                                                                                    },
                                                                                }),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [
                                                                                s("label", { attrs: { for: "lang" } }, [t._v("Language")]),
                                                                                t._v(" "),
                                                                                s("multiselect", {
                                                                                    attrs: { options: t.langs, id: "lang", label: "english_name", placeholder: "Select one (default ov)", "track-by": "iso_639_1" },
                                                                                    model: {
                                                                                        value: t.lang,
                                                                                        callback: function (e) {
                                                                                            t.lang = e;
                                                                                        },
                                                                                        expression: "lang",
                                                                                    },
                                                                                }),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [
                                                                                s("label", { attrs: { for: "header" } }, [t._v("Headers")]),
                                                                                t._v(" "),
                                                                                s("multiselect", {
                                                                                    attrs: { options: t.headers, id: "header", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                    model: {
                                                                                        value: t.header,
                                                                                        callback: function (e) {
                                                                                            t.header = e;
                                                                                        },
                                                                                        expression: "header",
                                                                                    },
                                                                                }),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [
                                                                                s("label", { attrs: { for: "useragent" } }, [t._v("User Agent")]),
                                                                                t._v(" "),
                                                                                s("multiselect", {
                                                                                    attrs: { options: t.useragents, id: "useragent", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                    model: {
                                                                                        value: t.useragent,
                                                                                        callback: function (e) {
                                                                                            t.useragent = e;
                                                                                        },
                                                                                        expression: "useragent",
                                                                                    },
                                                                                }),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-6" }, [
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.supported_hosts, expression: "supported_hosts" }],
                                                                                    staticClass: "custom-control-input",
                                                                                    attrs: { id: "supported_hosts", type: "checkbox" },
                                                                                    domProps: { checked: Array.isArray(t.supported_hosts) ? t._i(t.supported_hosts, null) > -1 : t.supported_hosts },
                                                                                    on: {
                                                                                        change: function (e) {
                                                                                            var s = t.supported_hosts,
                                                                                                a = e.target,
                                                                                                i = !!a.checked;
                                                                                            if (Array.isArray(s)) {
                                                                                                var r = t._i(s, null);
                                                                                                a.checked ? r < 0 && (t.supported_hosts = s.concat([null])) : r > -1 && (t.supported_hosts = s.slice(0, r).concat(s.slice(r + 1)));
                                                                                            } else t.supported_hosts = i;
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("label", { staticClass: "custom-control-label", attrs: { for: "supported_hosts" } }, [t._v("Supported Hosts")]),
                                                                            ]),
                                                                        ]),
                                                                        t._v(" "),
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.embed, expression: "embed" }],
                                                                                    staticClass: "custom-control-input",
                                                                                    attrs: { id: "embed", type: "checkbox" },
                                                                                    domProps: { checked: Array.isArray(t.embed) ? t._i(t.embed, null) > -1 : t.embed },
                                                                                    on: {
                                                                                        change: function (e) {
                                                                                            var s = t.embed,
                                                                                                a = e.target,
                                                                                                i = !!a.checked;
                                                                                            if (Array.isArray(s)) {
                                                                                                var r = t._i(s, null);
                                                                                                a.checked ? r < 0 && (t.embed = s.concat([null])) : r > -1 && (t.embed = s.slice(0, r).concat(s.slice(r + 1)));
                                                                                            } else t.embed = i;
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("label", { staticClass: "custom-control-label", attrs: { for: "embed" } }, [t._v("Embed")]),
                                                                            ]),
                                                                        ]),
                                                                        t._v(" "),
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.hls, expression: "hls" }],
                                                                                    staticClass: "custom-control-input",
                                                                                    attrs: { id: "hls", type: "checkbox" },
                                                                                    domProps: { checked: Array.isArray(t.hls) ? t._i(t.hls, null) > -1 : t.hls },
                                                                                    on: {
                                                                                        change: function (e) {
                                                                                            var s = t.hls,
                                                                                                a = e.target,
                                                                                                i = !!a.checked;
                                                                                            if (Array.isArray(s)) {
                                                                                                var r = t._i(s, null);
                                                                                                a.checked ? r < 0 && (t.hls = s.concat([null])) : r > -1 && (t.hls = s.slice(0, r).concat(s.slice(r + 1)));
                                                                                            } else t.hls = i;
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("label", { staticClass: "custom-control-label", attrs: { for: "hls" } }, [t._v("HlS Link (PHP FORMAT)")]),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "row" }, [
                                                                    s("div", { staticClass: "col-md-4" }, [
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("label", { attrs: { for: "link" } }, [t._v("Link")]),
                                                                            t._v(" "),
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.link, expression: "link" }],
                                                                                staticClass: "form-control",
                                                                                attrs: { id: "link", placeholder: "Upload or Insert Direct  Link", type: "text" },
                                                                                domProps: { value: t.link },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || (t.link = e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                        ]),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-4" }, [
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("label", [t._v("Upload Stream")]),
                                                                            t._v(" "),
                                                                            s("input", { staticClass: "file-upload-default" }),
                                                                            t._v(" "),
                                                                            s("div", { staticClass: "input-group col-xs-12" }, [
                                                                                s("input", { staticClass: "form-control file-upload-info", attrs: { id: "video", placeholder: "Upload Image", type: "file" }, on: { change: t.storeVideo } }),
                                                                                t._v(" "),
                                                                                t._m(12),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-2" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [t.isuploading ? s("vue-ellipse-progress", { attrs: { gap: 5, thickness: 5, animation: "default 1000", progress: t.percent, size: 60 } }) : t._e()],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-1 my-auto" }, [
                                                                        s(
                                                                            "button",
                                                                            {
                                                                                staticClass: "btn btn-primary mr-2",
                                                                                on: {
                                                                                    click: function (e) {
                                                                                        return e.preventDefault(), t.addLink();
                                                                                    },
                                                                                },
                                                                            },
                                                                            [t._v("Add")]
                                                                        ),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("table", { staticClass: "table table-striped table-links", attrs: { "aria-describedby": "video links" } }, [
                                                                    t._m(13),
                                                                    t._v(" "),
                                                                    s(
                                                                        "tbody",
                                                                        { attrs: { name: "links" } },
                                                                        t._l(t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].videos, function (e, a) {
                                                                            return s("tr", { key: a }, [
                                                                                s("td", { staticClass: "text-center" }, [
                                                                                    s("div", { staticClass: "list-icons" }, [
                                                                                        s(
                                                                                            "a",
                                                                                            {
                                                                                                staticClass: "list-icons-item text-warning",
                                                                                                attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                                on: {
                                                                                                    click: function (s) {
                                                                                                        return s.preventDefault(), t.deleteLink(e, a);
                                                                                                    },
                                                                                                },
                                                                                            },
                                                                                            [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                                        ),
                                                                                    ]),
                                                                                ]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.lang))]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.server))]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.header))]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.useragent))]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.link))]),
                                                                                t._v(" "),
                                                                                (1 === e.supported_hosts) | (!0 === e.supported_hosts)
                                                                                    ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                                    : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                                t._v(" "),
                                                                                (1 === e.hls) | (!0 === e.hls)
                                                                                    ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                                    : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                                t._v(" "),
                                                                                (1 === e.embed) | (!0 === e.embed)
                                                                                    ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                                    : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                            ]);
                                                                        }),
                                                                        0
                                                                    ),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "form-group" }, [
                                                                t._m(14),
                                                                t._v(" "),
                                                                s("div", { staticClass: "row" }, [
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [
                                                                                s("label", { attrs: { for: "server" } }, [t._v("Server")]),
                                                                                t._v(" "),
                                                                                s("multiselect", {
                                                                                    attrs: { options: t.servers, id: "server", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                    model: {
                                                                                        value: t.serverdownload,
                                                                                        callback: function (e) {
                                                                                            t.serverdownload = e;
                                                                                        },
                                                                                        expression: "serverdownload",
                                                                                    },
                                                                                }),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [
                                                                                s("label", { attrs: { for: "langdownload" } }, [t._v("Language")]),
                                                                                t._v(" "),
                                                                                s("multiselect", {
                                                                                    attrs: { options: t.langs, id: "langdownload", label: "english_name", placeholder: "Select one (default EN)", "track-by": "iso_639_1" },
                                                                                    model: {
                                                                                        value: t.langdownload,
                                                                                        callback: function (e) {
                                                                                            t.langdownload = e;
                                                                                        },
                                                                                        expression: "langdownload",
                                                                                    },
                                                                                }),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [
                                                                                s("label", { attrs: { for: "headerdownload" } }, [t._v("Headers")]),
                                                                                t._v(" "),
                                                                                s("multiselect", {
                                                                                    attrs: { options: t.headers, id: "headerdownload", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                    model: {
                                                                                        value: t.headerdownload,
                                                                                        callback: function (e) {
                                                                                            t.headerdownload = e;
                                                                                        },
                                                                                        expression: "headerdownload",
                                                                                    },
                                                                                }),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [
                                                                                s("label", { attrs: { for: "useragentdownload" } }, [t._v("User Agent")]),
                                                                                t._v(" "),
                                                                                s("multiselect", {
                                                                                    attrs: { options: t.useragents, id: "useragentdownload", label: "name", placeholder: "Select one", "track-by": "id" },
                                                                                    model: {
                                                                                        value: t.useragentdownload,
                                                                                        callback: function (e) {
                                                                                            t.useragentdownload = e;
                                                                                        },
                                                                                        expression: "useragentdownload",
                                                                                    },
                                                                                }),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-6" }, [
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.supported_hosts_download, expression: "supported_hosts_download" }],
                                                                                    staticClass: "custom-control-input",
                                                                                    attrs: { id: "supported_hosts_download", type: "checkbox" },
                                                                                    domProps: { checked: Array.isArray(t.supported_hosts_download) ? t._i(t.supported_hosts_download, null) > -1 : t.supported_hosts_download },
                                                                                    on: {
                                                                                        change: function (e) {
                                                                                            var s = t.supported_hosts_download,
                                                                                                a = e.target,
                                                                                                i = !!a.checked;
                                                                                            if (Array.isArray(s)) {
                                                                                                var r = t._i(s, null);
                                                                                                a.checked
                                                                                                    ? r < 0 && (t.supported_hosts_download = s.concat([null]))
                                                                                                    : r > -1 && (t.supported_hosts_download = s.slice(0, r).concat(s.slice(r + 1)));
                                                                                            } else t.supported_hosts_download = i;
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("label", { staticClass: "custom-control-label", attrs: { for: "supported_hosts_download" } }, [t._v("Supported Hosts")]),
                                                                            ]),
                                                                        ]),
                                                                        t._v(" "),
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.external_download, expression: "external_download" }],
                                                                                    staticClass: "custom-control-input",
                                                                                    attrs: { id: "external_download", type: "checkbox" },
                                                                                    domProps: { checked: Array.isArray(t.external_download) ? t._i(t.external_download, null) > -1 : t.external_download },
                                                                                    on: {
                                                                                        change: function (e) {
                                                                                            var s = t.external_download,
                                                                                                a = e.target,
                                                                                                i = !!a.checked;
                                                                                            if (Array.isArray(s)) {
                                                                                                var r = t._i(s, null);
                                                                                                a.checked ? r < 0 && (t.external_download = s.concat([null])) : r > -1 && (t.external_download = s.slice(0, r).concat(s.slice(r + 1)));
                                                                                            } else t.external_download = i;
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("label", { staticClass: "custom-control-label", attrs: { for: "external_download" } }, [t._v("External Link ( Via Phone Browser )")]),
                                                                            ]),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "row" }, [
                                                                    s("div", { staticClass: "col-md-6" }, [
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("label", { attrs: { for: "linkDownload" } }, [t._v("Link")]),
                                                                            t._v(" "),
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.linkDownload, expression: "linkDownload" }],
                                                                                staticClass: "form-control",
                                                                                attrs: { id: "linkDownload", placeholder: "Insert a download Link", type: "text" },
                                                                                domProps: { value: t.linkDownload },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || (t.linkDownload = e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                        ]),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-1 my-auto" }, [
                                                                        s(
                                                                            "button",
                                                                            {
                                                                                staticClass: "btn btn-primary mr-2",
                                                                                on: {
                                                                                    click: function (e) {
                                                                                        return e.preventDefault(), t.addLinkDownload();
                                                                                    },
                                                                                },
                                                                            },
                                                                            [t._v("Add")]
                                                                        ),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("table", { staticClass: "table table-striped table-links", attrs: { "aria-describedby": "video links" } }, [
                                                                    t._m(15),
                                                                    t._v(" "),
                                                                    s(
                                                                        "tbody",
                                                                        { attrs: { name: "links" } },
                                                                        t._l(t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].downloads, function (e, a) {
                                                                            return s("tr", { key: a }, [
                                                                                s("td", { staticClass: "text-center" }, [
                                                                                    s("div", { staticClass: "list-icons" }, [
                                                                                        s(
                                                                                            "a",
                                                                                            {
                                                                                                staticClass: "list-icons-item text-warning",
                                                                                                attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                                on: {
                                                                                                    click: function (s) {
                                                                                                        return s.preventDefault(), t.deleteLinkDownload(e, a);
                                                                                                    },
                                                                                                },
                                                                                            },
                                                                                            [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                                        ),
                                                                                    ]),
                                                                                ]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.lang))]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.server))]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.header))]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.useragent))]),
                                                                                t._v(" "),
                                                                                s("td", { staticClass: "text-center" }, [t._v(t._s(e.link))]),
                                                                                t._v(" "),
                                                                                (1 === e.supported_hosts) | (!0 === e.supported_hosts)
                                                                                    ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                                    : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                                t._v(" "),
                                                                                (1 === e.external) | (!0 === e.external)
                                                                                    ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                                    : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                            ]);
                                                                        }),
                                                                        0
                                                                    ),
                                                                ]),
                                                            ]),
                                                            t._v(" "),
                                                            s("div", { staticClass: "form-group" }, [
                                                                t._m(16),
                                                                t._v(" "),
                                                                s("div", { staticClass: "col-md-6" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s("label", [t._v("Upload Substitle ( Zip Format only ! )")]),
                                                                        t._v(" "),
                                                                        s("input", { staticClass: "file-upload-default" }),
                                                                        t._v(" "),
                                                                        s("div", { staticClass: "input-group col-xs-12" }, [
                                                                            s("input", {
                                                                                staticClass: "form-control file-upload-info",
                                                                                attrs: { id: "video", placeholder: "Upload Substitle as zip format", type: "file" },
                                                                                on: { change: t.storeSubstitle },
                                                                            }),
                                                                            t._v(" "),
                                                                            t._m(17),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "col-md-6" }, [
                                                                    s("div", { staticClass: "form-group" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "custom-control custom-checkbox" },
                                                                            [
                                                                                s("input", {
                                                                                    directives: [{ name: "model", rawName: "v-model", value: t.zip, expression: "zip" }],
                                                                                    staticClass: "custom-control-input",
                                                                                    attrs: { id: "zip", type: "checkbox" },
                                                                                    domProps: { checked: Array.isArray(t.zip) ? t._i(t.zip, null) > -1 : t.zip },
                                                                                    on: {
                                                                                        change: function (e) {
                                                                                            var s = t.zip,
                                                                                                a = e.target,
                                                                                                i = !!a.checked;
                                                                                            if (Array.isArray(s)) {
                                                                                                var r = t._i(s, null);
                                                                                                a.checked ? r < 0 && (t.zip = s.concat([null])) : r > -1 && (t.zip = s.slice(0, r).concat(s.slice(r + 1)));
                                                                                            } else t.zip = i;
                                                                                        },
                                                                                    },
                                                                                }),
                                                                                t._v(" "),
                                                                                s("label", { staticClass: "custom-control-label", attrs: { for: "zip" } }, [t._v("Substitle Zip Format ?")]),
                                                                                t._v(" "),
                                                                                s("b-tooltip", { attrs: { target: "zip", triggers: "hover" } }, [
                                                                                    t._v("\n                      I am tooltip "),
                                                                                    s("b", [t._v("component")]),
                                                                                    t._v(" content!\n                "),
                                                                                ]),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "row" }, [
                                                                    s("div", { staticClass: "col-md-4" }, [
                                                                        s("div", { staticClass: "form-group" }, [
                                                                            s("label", { attrs: { for: "linksubstitle" } }, [t._v("Substitle Path")]),
                                                                            t._v(" "),
                                                                            s("input", {
                                                                                directives: [{ name: "model", rawName: "v-model", value: t.linksubstitle, expression: "linksubstitle" }],
                                                                                staticClass: "form-control",
                                                                                attrs: { id: "linksubstitle", placeholder: "Upload or Insert Direct  Link", type: "text" },
                                                                                domProps: { value: t.linksubstitle },
                                                                                on: {
                                                                                    input: function (e) {
                                                                                        e.target.composing || (t.linksubstitle = e.target.value);
                                                                                    },
                                                                                },
                                                                            }),
                                                                        ]),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-4" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [
                                                                                s("label", { attrs: { for: "lang" } }, [t._v("Language")]),
                                                                                t._v(" "),
                                                                                s("multiselect", {
                                                                                    attrs: { options: t.langsubs, id: "langsub", label: "english_name", placeholder: "Select one (default EN)", "track-by": "iso_639_1" },
                                                                                    model: {
                                                                                        value: t.langsub,
                                                                                        callback: function (e) {
                                                                                            t.langsub = e;
                                                                                        },
                                                                                        expression: "langsub",
                                                                                    },
                                                                                }),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-3" }, [
                                                                        s(
                                                                            "div",
                                                                            { staticClass: "form-group" },
                                                                            [
                                                                                s("label", { attrs: { for: "lang" } }, [t._v("Substitle Type")]),
                                                                                t._v(" "),
                                                                                s("multiselect", {
                                                                                    attrs: { id: "typesub", options: t.substypes, type: "text" },
                                                                                    model: {
                                                                                        value: t.typesubstitle,
                                                                                        callback: function (e) {
                                                                                            t.typesubstitle = e;
                                                                                        },
                                                                                        expression: "typesubstitle",
                                                                                    },
                                                                                }),
                                                                            ],
                                                                            1
                                                                        ),
                                                                    ]),
                                                                    t._v(" "),
                                                                    s("div", { staticClass: "col-md-1 my-auto" }, [
                                                                        s(
                                                                            "button",
                                                                            {
                                                                                staticClass: "btn btn-primary mr-2",
                                                                                on: {
                                                                                    click: function (e) {
                                                                                        return e.preventDefault(), t.addSubs();
                                                                                    },
                                                                                },
                                                                            },
                                                                            [t._v("Add")]
                                                                        ),
                                                                    ]),
                                                                ]),
                                                                t._v(" "),
                                                                s("div", { staticClass: "table-responsive" }, [
                                                                    s("table", { staticClass: "table", attrs: { "aria-describedby": "Substitle Table" } }, [
                                                                        t._m(18),
                                                                        t._v(" "),
                                                                        s(
                                                                            "tbody",
                                                                            { attrs: { name: "linksubtitles" } },
                                                                            t._l(t.form.anime.seasons[t.selectedSeason].episodes[t.selectedEpisode].substitles, function (e, a) {
                                                                                return s("tr", { key: a }, [
                                                                                    s("td", { staticClass: "text-center" }, [
                                                                                        s("div", { staticClass: "list-icons" }, [
                                                                                            s(
                                                                                                "a",
                                                                                                {
                                                                                                    staticClass: "list-icons-item text-warning",
                                                                                                    attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                                    on: {
                                                                                                        click: function (s) {
                                                                                                            return s.preventDefault(), t.destroySubs(e, a);
                                                                                                        },
                                                                                                    },
                                                                                                },
                                                                                                [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                                            ),
                                                                                        ]),
                                                                                    ]),
                                                                                    t._v(" "),
                                                                                    s("td", { staticClass: "text-center" }, [t._v(t._s(e.lang))]),
                                                                                    t._v(" "),
                                                                                    s("td", { staticClass: "text-center" }, [t._v(" " + t._s(e.type))]),
                                                                                    t._v(" "),
                                                                                    (1 === e.zip) | (!0 === e.zip)
                                                                                        ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                                        : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                                    t._v(" "),
                                                                                    s("td", { staticClass: "text-center" }, [t._v(t._s(e.link))]),
                                                                                ]);
                                                                            }),
                                                                            0
                                                                        ),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ])
                                                      : t._e(),
                                                  t._v(" "),
                                                  s("div", { staticClass: "d-flex justify-content-between align-items-end flex-wrap" }, [
                                                      t.add
                                                          ? s(
                                                                "button",
                                                                {
                                                                    staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                                    attrs: { type: "submit" },
                                                                    on: {
                                                                        click: function (e) {
                                                                            return e.preventDefault(), t.store();
                                                                        },
                                                                    },
                                                                },
                                                                [t._v("Save")]
                                                            )
                                                          : t._e(),
                                                      t._v(" "),
                                                      t.edit
                                                          ? s(
                                                                "button",
                                                                {
                                                                    staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                                    attrs: { type: "submit" },
                                                                    on: {
                                                                        click: function (e) {
                                                                            return e.preventDefault(), t.update();
                                                                        },
                                                                    },
                                                                },
                                                                [t._v("Update")]
                                                            )
                                                          : t._e(),
                                                  ]),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "d-flex align-items-end flex-wrap" }, [e("div", { staticClass: "d-flex" })]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "input-group-prepend" }, [e("span", { staticClass: "input-group-text", attrs: { id: "search" } }, [e("i", { staticClass: "mdi mdi-magnify" })])]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { staticClass: "text-center", attrs: { id: "cover" } }, [t._v("Cover")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "id" } }, [t._v("Anime ID")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "imdb" } }, [t._v("Anime IMDB")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "name" } }, [t._v("Name")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "vote" } }, [t._v("Vote")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "status" } }, [t._v("Status")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "options" } }, [t._v("Options")]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("Upload")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("Upload")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("em", { staticClass: "mdi mdi-access-point menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("Networks")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("i", { staticClass: "mdi mdi-message-video menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("Trailers")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                          Upload\n                        ")]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("i", { staticClass: "mdi mdi-account-multiple menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("Casters")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "input-group-prepend" }, [e("span", { staticClass: "input-group-text" }, [this._v("Upload")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "input-group-prepend" }, [e("span", { staticClass: "input-group-text" }, [this._v("Upload")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("em", { staticClass: "mdi mdi-video menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("VIDEOS")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("Upload")])]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { staticClass: "text-center", attrs: { id: "actions" } }, [t._v("Actions")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "langs" } }, [t._v("Lang")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("Server")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("Header")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("UserAgent")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("Link")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "langs" } }, [t._v("Supported Hosts")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "hls" } }, [t._v("Hls Link (PHP FORMAT)")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("Embed")]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("i", { staticClass: "mdi mdi-cloud-download menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("DOWNLOADS")])]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { staticClass: "text-center", attrs: { id: "actions" } }, [t._v("Actions")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "langs" } }, [t._v("Lang")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("Server")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("Header")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "servers" } }, [t._v("UserAgent")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("Link")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "langs" } }, [t._v("Supported Hosts")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "hls" } }, [t._v("External")]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("em", { staticClass: "mdi mdi-closed-caption menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("Substitles")])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                          Upload\n                        ")]),
                            ]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { staticClass: "text-center", attrs: { id: "actions" } }, [t._v("Actions")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "langs" } }, [t._v("Lang")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "type" } }, [t._v("Type")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "type" } }, [t._v("Zip Format")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "links" } }, [t._v("Link")]),
                                ]),
                            ]);
                        },
                    ],
                    !1,
                    null,
                    "bc9b5ace",
                    null
                );
            e.default = f.exports;
        },
        546: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a),
                r = s(3),
                n = s(6);
            function o(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            var l = {
                    data: function () {
                        return { index: !0, id: "", episode_id: "", server: "", animevideos: [], loading: !1, paginate: ["filteredanimesVideos"] };
                    },
                    mounted: function () {
                        var t,
                            e = this;
                        return ((t = i.a.mark(function t() {
                            var s;
                            return i.a.wrap(function (t) {
                                for (;;)
                                    switch ((t.prev = t.next)) {
                                        case 0:
                                            return (t.next = 2), axios.get(url + "/admin/video/animes/allvideos");
                                        case 2:
                                            (s = t.sent), (e.allvideosanimes = s.data);
                                        case 4:
                                        case "end":
                                            return t.stop();
                                    }
                            }, t);
                        })),
                        function () {
                            var e = this,
                                s = arguments;
                            return new Promise(function (a, i) {
                                var r = t.apply(e, s);
                                function n(t) {
                                    o(r, a, i, n, l, "next", t);
                                }
                                function l(t) {
                                    o(r, a, i, n, l, "throw", t);
                                }
                                n(void 0);
                            });
                        })();
                    },
                    methods: {},
                    computed: {
                        filteredanimesVideos: function () {
                            var t = this;
                            return this.animevideos.filter(function (e) {
                                return e.server.toLowerCase().match(t.search.toLowerCase());
                            });
                        },
                    },
                    mixins: [r.a, n.a],
                },
                c = s(4),
                d = Object(c.a)(
                    l,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "main-content" }, [
                            s("div", { staticClass: "section__content section__content--p30" }, [
                                s("div", { staticClass: "container-fluid" }, [
                                    s("div", { staticClass: "row" }, [
                                        s("div", { staticClass: "col" }, [
                                            s("div", { staticClass: "au-card" }, [
                                                t._m(0),
                                                t._v(" "),
                                                s("div", { staticClass: "fc fc-unthemed fc-ltr", attrs: { id: "calendar" } }, [
                                                    s("div", { staticClass: "fc-toolbar fc-header-toolbar" }, [
                                                        s("div", { staticClass: "fc-left" }, [
                                                            s("div", { staticClass: "fc-button-group" }, [
                                                                s("div", { staticClass: "row m-t-30" }, [
                                                                    s("div", { staticClass: "col-md-12" }, [
                                                                        s("div", { staticClass: "table-responsive m-b-40" }, [
                                                                            t.index
                                                                                ? s(
                                                                                      "table",
                                                                                      { staticClass: "table table-borderless table-data3", attrs: { "aria-describedby": "Episodes Links Table" } },
                                                                                      [
                                                                                          t._m(1),
                                                                                          t._v(" "),
                                                                                          t.filteredanimesVideos.length
                                                                                              ? s(
                                                                                                    "paginate",
                                                                                                    { attrs: { list: t.filteredanimesVideos, per: 5, name: "filteredanimesVideos", tag: "tbody" } },
                                                                                                    t._l(t.paginated("filteredanimesVideos"), function (e, a) {
                                                                                                        return s("tr", { key: a }, [
                                                                                                            s("td", [t._v(t._s(e.id))]),
                                                                                                            t._v(" "),
                                                                                                            s("td", [t._v(t._s(e.episode_id))]),
                                                                                                            t._v(" "),
                                                                                                            s("td", [t._v(t._s(e.server))]),
                                                                                                            t._v(" "),
                                                                                                            s("td", [s("span", { staticClass: "role admin" }, [t._v("tttt")])]),
                                                                                                            t._v(" "),
                                                                                                            s("td", [
                                                                                                                s(
                                                                                                                    "button",
                                                                                                                    {
                                                                                                                        staticClass: "btn btn-danger",
                                                                                                                        attrs: { type: "button" },
                                                                                                                        on: {
                                                                                                                            click: function (s) {
                                                                                                                                return t.destroy(e.id, a);
                                                                                                                            },
                                                                                                                        },
                                                                                                                    },
                                                                                                                    [t._v("Delete")]
                                                                                                                ),
                                                                                                            ]),
                                                                                                        ]);
                                                                                                    }),
                                                                                                    0
                                                                                                )
                                                                                              : t._e(),
                                                                                          t._v(" "),
                                                                                          t.filteredanimesVideos.length
                                                                                              ? s("paginate-links", {
                                                                                                    staticClass: "float-right",
                                                                                                    attrs: {
                                                                                                        async: !0,
                                                                                                        classes: { ul: "pagination", li: "page-item", a: "page-link", ".next > a": "next-link", ".prev > a": "prev-link" },
                                                                                                        "hide-single-page": !0,
                                                                                                        limit: 5,
                                                                                                        "show-step-links": !0,
                                                                                                        for: "filteredanimesVideos",
                                                                                                    },
                                                                                                })
                                                                                              : t._e(),
                                                                                      ],
                                                                                      1
                                                                                  )
                                                                                : t._e(),
                                                                        ]),
                                                                    ]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                    ]),
                                                ]),
                                            ]),
                                        ]),
                                    ]),
                                ]),
                            ]),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "fc-center" }, [e("h2", [this._v("Users")])]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { attrs: { id: "id" } }, [t._v("ID")]),
                                    t._v(" "),
                                    s("th", { attrs: { id: "ep_id" } }, [t._v("Ep isode ID")]),
                                    t._v(" "),
                                    s("th", { attrs: { id: "anime" } }, [t._v("anime")]),
                                    t._v(" "),
                                    s("th", { attrs: { id: "type" } }, [t._v("Type")]),
                                    t._v(" "),
                                    s("th", { attrs: { id: "actions" } }, [t._v("Actions")]),
                                ]),
                            ]);
                        },
                    ],
                    !1,
                    null,
                    null,
                    null
                );
            e.default = d.exports;
        },
        547: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a);
            function r(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function n(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var n = t.apply(e, s);
                        function o(t) {
                            r(n, a, i, o, l, "next", t);
                        }
                        function l(t) {
                            r(n, a, i, o, l, "throw", t);
                        }
                        o(void 0);
                    });
                };
            }
            var o = {
                    data: function () {
                        return { index: !0, add: !1, edit: !1, search: "", form: { ads: { title: "", link: "", clickThroughUrl: "" } }, allads: [], paginate: ["filteredAllads"] };
                    },
                    mounted: function () {
                        var t = this;
                        return n(
                            i.a.mark(function e() {
                                var s;
                                return i.a.wrap(function (e) {
                                    for (;;)
                                        switch ((e.prev = e.next)) {
                                            case 0:
                                                return (e.next = 2), axios.get(url + "/admin/ads/data");
                                            case 2:
                                                (s = e.sent), (t.allads = s.data);
                                            case 4:
                                            case "end":
                                                return e.stop();
                                        }
                                }, e);
                            })
                        )();
                    },
                    methods: {
                        create: function () {
                            (this.index = !1), (this.edit = !1), (this.add = !0);
                        },
                        editing: function (t) {
                            (this.index = !1), (this.edit = !0), (this.form.ads = t), (this.form.allads = "");
                        },
                        back: function () {
                            (this.form.ads = ""), (this.add = !1), (this.edit = !1), (this.index = !0);
                        },
                        store: function () {
                            var t = this;
                            axios
                                .post(url + "/admin/ads/store", this.form)
                                .then(function (e) {
                                    (t.add = !1), (t.edit = !1), (t.index = !0), (t.form.ads = {}), t.allads.unshift(e.data.body), t.showSuccess(e.data.message);
                                })
                                .catch(function (e) {
                                    t.showError(e.response);
                                });
                        },
                        update: function () {
                            var t = this;
                            axios
                                .put(url + "/admin/ads/update/" + this.form.ads.id, this.form)
                                .then(function (e) {
                                    (t.edit = !1), (t.index = !0), (t.form.allads = []), t.showSuccess(e.data.message);
                                })
                                .catch(function (e) {
                                    t.showError(e.response);
                                });
                        },
                        destroy: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                n(
                                    i.a.mark(function a() {
                                        var r, n;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            return (a.prev = 0), (a.next = 3), axios.delete(url + "/admin/ads/destroy/" + t);
                                                        case 3:
                                                            (r = a.sent),
                                                                (n = s.allads.findIndex(function (e) {
                                                                    return e.id === t;
                                                                })),
                                                                s.allads.splice(n, 1),
                                                                s.paginate.filteredAllads.list.splice(e, 1),
                                                                s.showSuccess(r.data.message),
                                                                (a.next = 13);
                                                            break;
                                                        case 10:
                                                            (a.prev = 10), (a.t0 = a.catch(0)), s.showError();
                                                        case 13:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 10]]
                                        );
                                    })
                                )
                            );
                        },
                    },
                    computed: {
                        filteredAllads: function () {
                            var t = this;
                            return this.allads.filter(function (e) {
                                return e.title.toLowerCase().match(t.search.toLowerCase());
                            });
                        },
                    },
                    mixins: [s(3).a],
                },
                l = s(4),
                c = Object(l.a)(
                    o,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            s("div", { staticClass: "col-md-12 grid-margin" }, [
                                s("div", { staticClass: "d-flex justify-content-between flex-wrap" }, [
                                    t._m(0),
                                    t._v(" "),
                                    s("div", { staticClass: "d-flex justify-content-between align-items-end flex-wrap" }, [
                                        t.index
                                            ? s(
                                                  "button",
                                                  {
                                                      staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                      on: {
                                                          click: function (e) {
                                                              return t.create();
                                                          },
                                                      },
                                                  },
                                                  [t._v("Add Ads")]
                                              )
                                            : t._e(),
                                        t._v(" "),
                                        t.index
                                            ? t._e()
                                            : s(
                                                  "button",
                                                  {
                                                      staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                      on: {
                                                          click: function (e) {
                                                              return t.back();
                                                          },
                                                      },
                                                  },
                                                  [t._v("Back")]
                                              ),
                                    ]),
                                ]),
                            ]),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s("div", { staticClass: "table-responsive" }, [
                                                  s(
                                                      "table",
                                                      { staticClass: "table", attrs: { "aria-describedby": "Ads Table" } },
                                                      [
                                                          t._m(1),
                                                          t._v(" "),
                                                          s(
                                                              "tbody",
                                                              t._l(t.paginated("filteredAllads"), function (e, a) {
                                                                  return s("tr", { key: a }, [
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.id))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.title))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.clickThroughUrl))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [
                                                                          s("div", { staticClass: "list-icons" }, [
                                                                              s(
                                                                                  "a",
                                                                                  {
                                                                                      staticClass: "list-icons-item mr-2",
                                                                                      attrs: { "data-original-title": "Edit", rel: "tooltip", title: "" },
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return t.editing(e);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [s("em", { staticClass: "mdi mdi-pencil fa-lg", staticStyle: { color: "#4d83ff" } })]
                                                                              ),
                                                                              t._v(" "),
                                                                              s(
                                                                                  "a",
                                                                                  {
                                                                                      staticClass: "list-icons-item text-warning",
                                                                                      attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return t.destroy(e.id, a);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                              ),
                                                                          ]),
                                                                      ]),
                                                                  ]);
                                                              }),
                                                              0
                                                          ),
                                                          t._v(" "),
                                                          t.filteredAllads.length ? s("paginate", { attrs: { list: t.filteredAllads, per: 5, name: "filteredAllads", tag: "tbody" } }) : t._e(),
                                                          t._v(" "),
                                                          t.filteredAllads.length
                                                              ? s("paginate-links", {
                                                                    staticClass: "float-right",
                                                                    attrs: {
                                                                        async: !0,
                                                                        classes: { ul: "pagination", li: "page-item", a: "page-link", ".next > a": "next-link", ".prev > a": "prev-link" },
                                                                        "hide-single-page": !0,
                                                                        limit: 5,
                                                                        "show-step-links": !0,
                                                                        for: "filteredAllads",
                                                                    },
                                                                })
                                                              : t._e(),
                                                      ],
                                                      1
                                                  ),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.add || t.edit
                                ? s("div", { staticClass: "col-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s("form", { staticClass: "forms-sample" }, [
                                                  s("div", { staticClass: "form-group" }, [
                                                      s("label", { attrs: { for: "name" } }, [t._v("Title")]),
                                                      t._v(" "),
                                                      s("input", {
                                                          directives: [{ name: "model", rawName: "v-model", value: t.form.ads.title, expression: "form.ads.title" }],
                                                          staticClass: "form-control",
                                                          attrs: { id: "title", placeholder: "Title", type: "text" },
                                                          domProps: { value: t.form.ads.title },
                                                          on: {
                                                              input: function (e) {
                                                                  e.target.composing || t.$set(t.form.ads, "title", e.target.value);
                                                              },
                                                          },
                                                      }),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      s("label", { attrs: { for: "name" } }, [t._v("Link")]),
                                                      t._v(" "),
                                                      s("input", {
                                                          directives: [{ name: "model", rawName: "v-model", value: t.form.ads.link, expression: "form.ads.link" }],
                                                          staticClass: "form-control",
                                                          attrs: { id: "link", placeholder: "Google Ad Manager, the Google AdSense network, or any VAST-compliant ad server.", type: "text" },
                                                          domProps: { value: t.form.ads.link },
                                                          on: {
                                                              input: function (e) {
                                                                  e.target.composing || t.$set(t.form.ads, "link", e.target.value);
                                                              },
                                                          },
                                                      }),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      s("label", { attrs: { for: "name" } }, [t._v("clickThroughUrl")]),
                                                      t._v(" "),
                                                      s("input", {
                                                          directives: [{ name: "model", rawName: "v-model", value: t.form.ads.clickThroughUrl, expression: "form.ads.clickThroughUrl" }],
                                                          staticClass: "form-control",
                                                          attrs: { id: "clickThroughUrl", placeholder: "clickThroughUrl", type: "text" },
                                                          domProps: { value: t.form.ads.clickThroughUrl },
                                                          on: {
                                                              input: function (e) {
                                                                  e.target.composing || t.$set(t.form.ads, "clickThroughUrl", e.target.value);
                                                              },
                                                          },
                                                      }),
                                                  ]),
                                                  t._v(" "),
                                                  t.add
                                                      ? s(
                                                            "button",
                                                            {
                                                                staticClass: "btn btn-primary mr-2",
                                                                attrs: { type: "submit" },
                                                                on: {
                                                                    click: function (e) {
                                                                        return e.preventDefault(), t.store();
                                                                    },
                                                                },
                                                            },
                                                            [t._v("Save")]
                                                        )
                                                      : t._e(),
                                                  t._v(" "),
                                                  t.edit
                                                      ? s(
                                                            "button",
                                                            {
                                                                staticClass: "btn btn-primary mr-2",
                                                                attrs: { type: "submit" },
                                                                on: {
                                                                    click: function (e) {
                                                                        return e.preventDefault(), t.update();
                                                                    },
                                                                },
                                                            },
                                                            [t._v("Update")]
                                                        )
                                                      : t._e(),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "d-flex align-items-end flex-wrap" }, [e("div", { staticClass: "d-flex" })]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("thead", [
                                e("tr", [
                                    e("th", { staticClass: "text-center", attrs: { id: "id" } }, [this._v("ID")]),
                                    this._v(" "),
                                    e("th", { staticClass: "text-center", attrs: { id: "title" } }, [this._v("Title")]),
                                    this._v(" "),
                                    e("th", { staticClass: "text-center", attrs: { id: "ads link" } }, [this._v("Ads Url")]),
                                    this._v(" "),
                                    e("th", { staticClass: "text-center", attrs: { id: "options" } }, [this._v("Options")]),
                                ]),
                            ]);
                        },
                    ],
                    !1,
                    null,
                    null,
                    null
                );
            e.default = c.exports;
        },
        548: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a),
                r = s(3),
                n = s(6);
            function o(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function l(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var r = t.apply(e, s);
                        function n(t) {
                            o(r, a, i, n, l, "next", t);
                        }
                        function l(t) {
                            o(r, a, i, n, l, "throw", t);
                        }
                        n(void 0);
                    });
                };
            }
            var c = {
                    data: function () {
                        return {
                            index: !0,
                            add: !1,
                            edit: !1,
                            tmdb: null,
                            upcomings: [],
                            paginate: ["upcomings", "filteredUpcomings"],
                            form: { upcoming: { name: "", overview: "", link: "", backdrop_path: "", poster_path: "" }, notification: !1 },
                            poster: null,
                            backdrop: null,
                            search: "",
                        };
                    },
                    mounted: function () {
                        var t = this;
                        return l(
                            i.a.mark(function e() {
                                var s;
                                return i.a.wrap(function (e) {
                                    for (;;)
                                        switch ((e.prev = e.next)) {
                                            case 0:
                                                return (e.next = 2), axios.get(url + "/admin/upcoming/data");
                                            case 2:
                                                (s = e.sent), (t.upcomings = s.data);
                                            case 4:
                                            case "end":
                                                return e.stop();
                                        }
                                }, e);
                            })
                        )();
                    },
                    methods: {
                        create: function () {
                            (this.index = !1), (this.edit = !1), (this.add = !0), (this.tmdb = null);
                        },
                        back: function () {
                            (this.form.upcoming = ""), (this.tmdb = null), (this.add = !1), (this.edit = !1), (this.index = !0);
                        },
                        editing: function (t) {
                            (this.index = !1), (this.add = !1), (this.edit = !0), (this.form.upcoming = t), (this.tmdb = t.tmdb_id);
                        },
                        getSearchByName: function (t) {
                            var e = this.settings.tmdb_api_key,
                                s = this.settings.tmdb_lang.iso_639_1,
                                a = "".concat("https://api.themoviedb.org/3/search/multi?api_key=").concat(e, "&language=").concat(s, "&query=").concat(encodeURI(t), "&include_adult=false=");
                            return new Promise(function (e) {
                                if (t.length < 1) return e([]);
                                fetch(a)
                                    .then(function (t) {
                                        return t.json();
                                    })
                                    .then(function (t) {
                                        e(t.results);
                                    });
                            });
                        },
                        getResultValue: function (t) {
                            return "movie" === t.media_type ? t.title + "  :   Movie " : t.name + "  :   TV SHOWS";
                        },
                        onSubmit: function (t) {
                            (this.tmdb = t.id), "movie" === t.media_type ? this.getMovie() : this.getEpisode();
                        },
                        getEpisode: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    var s, a;
                                    return i.a.wrap(function (e) {
                                        for (;;)
                                            switch ((e.prev = e.next)) {
                                                case 0:
                                                    return (
                                                        (e.next = 2),
                                                        http.get("https://api.themoviedb.org/3/tv/" + t.tmdb + "?api_key=" + t.settings.tmdb_api_key + "&language=" + t.settings.tmdb_lang.iso_639_1 + "&append_to_response=videos")
                                                    );
                                                case 2:
                                                    if (
                                                        ((s = e.sent),
                                                        ((a = _.mapKeys(s.data, function (t, e) {
                                                            return "id" === e ? "tmdb_id" : e;
                                                        })).id = t.form.upcoming.id),
                                                        void 0 === a.videos.results[0])
                                                    ) {
                                                        e.next = 9;
                                                        break;
                                                    }
                                                    (a.trailer_id = a.videos.results[0].key), (e.next = 17);
                                                    break;
                                                case 9:
                                                    if (!t.edit || !t.form.upcoming.trailer_id) {
                                                        e.next = 13;
                                                        break;
                                                    }
                                                    (a.trailer_id = t.form.upcoming.trailer_id), (e.next = 17);
                                                    break;
                                                case 13:
                                                    return (e.next = 15), http.get("https://api.themoviedb.org/3/tv/" + t.tmdb + "/videos?api_key=" + t.settings.tmdb_api_key);
                                                case 15:
                                                    (s = e.sent).data.results[0] && (a.trailer_id = s.data.results[0].key);
                                                case 17:
                                                    "undefined" !== a.genres[0] && (a.genre = a.genres[0].name),
                                                        a.poster_path && (a.poster_path = t.settings.imdb_cover_path + a.poster_path),
                                                        a.backdrop_path && (a.backdrop_path = t.settings.imdb_cover_path + a.backdrop_path),
                                                        a.name && (a.title = a.name),
                                                        a.first_air_date && (a.release_date = a.first_air_date),
                                                        (t.form.upcoming = a);
                                                case 23:
                                                case "end":
                                                    return e.stop();
                                            }
                                    }, e);
                                })
                            )();
                        },
                        getMovie: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    var s, a;
                                    return i.a.wrap(function (e) {
                                        for (;;)
                                            switch ((e.prev = e.next)) {
                                                case 0:
                                                    return (
                                                        (e.next = 2),
                                                        http.get("https://api.themoviedb.org/3/movie/" + t.tmdb + "?api_key=" + t.settings.tmdb_api_key + "&language=" + t.settings.tmdb_lang.iso_639_1 + "&append_to_response=videos")
                                                    );
                                                case 2:
                                                    if (
                                                        ((s = e.sent),
                                                        ((a = _.mapKeys(s.data, function (t, e) {
                                                            return "id" === e ? "tmdb_id" : e;
                                                        })).id = t.form.upcoming.id),
                                                        void 0 === a.videos.results[0])
                                                    ) {
                                                        e.next = 9;
                                                        break;
                                                    }
                                                    (a.trailer_id = a.videos.results[0].key), (e.next = 17);
                                                    break;
                                                case 9:
                                                    if (!t.edit || !t.form.upcoming.trailer_id) {
                                                        e.next = 13;
                                                        break;
                                                    }
                                                    (a.trailer_id = t.form.upcoming.trailer_id), (e.next = 17);
                                                    break;
                                                case 13:
                                                    return (e.next = 15), http.get("https://api.themoviedb.org/3/movie/" + t.tmdb + "/videos?api_key=" + t.settings.tmdb_api_key);
                                                case 15:
                                                    (s = e.sent).data.results[0] && (a.trailer_id = s.data.results[0].key);
                                                case 17:
                                                    "undefined" !== a.genres[0] && (a.genre = a.genres[0].name),
                                                        a.poster_path && (a.poster_path = t.settings.imdb_cover_path + a.poster_path),
                                                        a.backdrop_path && (a.backdrop_path = t.settings.imdb_cover_path + a.backdrop_path),
                                                        (t.form.upcoming = a);
                                                case 21:
                                                case "end":
                                                    return e.stop();
                                            }
                                    }, e);
                                })
                            )();
                        },
                        store: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.post(url + "/admin/upcoming/store", t.form);
                                                    case 3:
                                                        (s = e.sent),
                                                            (t.add = !1),
                                                            (t.edit = !1),
                                                            (t.index = !0),
                                                            (t.form.upcoming = { name: "", overview: "", link: "", backdrop_path: "", poster_path: "" }),
                                                            (t.poster = null),
                                                            (t.backdrop = null),
                                                            t.upcomings.unshift(s.data.body),
                                                            t.showSuccess(s.data.message),
                                                            (e.next = 17);
                                                        break;
                                                    case 14:
                                                        (e.prev = 14), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 17:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 14]]
                                    );
                                })
                            )();
                        },
                        update: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.put(url + "/admin/upcoming/update/" + t.form.upcoming.id, t.form);
                                                    case 3:
                                                        (s = e.sent),
                                                            (t.add = !1),
                                                            (t.edit = !1),
                                                            (t.index = !0),
                                                            (t.form.upcoming = { name: "", overview: "", link: "", backdrop_path: "", poster_path: "" }),
                                                            t.showSuccess(s.data.message),
                                                            (e.next = 14);
                                                        break;
                                                    case 11:
                                                        (e.prev = 11), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 14:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 11]]
                                    );
                                })
                            )();
                        },
                        destroy: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                l(
                                    i.a.mark(function a() {
                                        var r, n;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            return (a.prev = 0), (a.next = 3), axios.delete(url + "/admin/upcoming/destroy/" + t);
                                                        case 3:
                                                            (r = a.sent),
                                                                (n = s.upcomings.findIndex(function (e) {
                                                                    return e.id === t;
                                                                })),
                                                                s.upcomings.splice(n, 1),
                                                                s.paginate.filteredUpcomings.list.splice(e, 1),
                                                                s.showSuccess(r.data.message),
                                                                (a.next = 13);
                                                            break;
                                                        case 10:
                                                            (a.prev = 10), (a.t0 = a.catch(0)), s.showError();
                                                        case 13:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 10]]
                                        );
                                    })
                                )
                            );
                        },
                        storePoster: function (t) {
                            var e = this;
                            return l(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        if (void 0 === t.target.files[0]) {
                                                            s.next = 14;
                                                            break;
                                                        }
                                                        return (s.prev = 1), (e.poster = t.target.files[0]), (a = new FormData()).append("image", e.poster), (s.next = 7), axios.post(url + "/admin/upcoming/image/store", a);
                                                    case 7:
                                                        (r = s.sent), (e.form.upcoming.poster_path = r.data.image_path), (s.next = 14);
                                                        break;
                                                    case 11:
                                                        (s.prev = 11), (s.t0 = s.catch(1)), e.showError(s.t0.response);
                                                    case 14:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[1, 11]]
                                    );
                                })
                            )();
                        },
                        storeBackdrop: function (t) {
                            var e = this;
                            return l(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        if (void 0 === t.target.files[0]) {
                                                            s.next = 14;
                                                            break;
                                                        }
                                                        return (s.prev = 1), (e.backdrop = t.target.files[0]), (a = new FormData()).append("image", e.backdrop), (s.next = 7), axios.post(url + "/admin/upcoming/image/store", a);
                                                    case 7:
                                                        (r = s.sent), (e.form.upcoming.backdrop_path = r.data.image_path), (s.next = 14);
                                                        break;
                                                    case 11:
                                                        (s.prev = 11), (s.t0 = s.catch(1)), e.showError(s.t0.response);
                                                    case 14:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[1, 11]]
                                    );
                                })
                            )();
                        },
                    },
                    computed: {
                        filteredUpcomings: function () {
                            var t = this;
                            return this.upcomings.filter(function (e) {
                                return e.title.toLowerCase().match(t.search.toLowerCase());
                            });
                        },
                    },
                    mixins: [r.a, n.a],
                },
                d = s(4),
                u = Object(d.a)(
                    c,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            s("div", { staticClass: "col-md-12 grid-margin" }, [
                                s("div", { staticClass: "d-flex justify-content-between flex-wrap" }, [
                                    t._m(0),
                                    t._v(" "),
                                    s("div", { staticClass: "d-flex justify-content-between align-items-end flex-wrap" }, [
                                        t.index
                                            ? s(
                                                  "button",
                                                  {
                                                      staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                      on: {
                                                          click: function (e) {
                                                              return t.create();
                                                          },
                                                      },
                                                  },
                                                  [t._v("Add Upcoming")]
                                              )
                                            : t._e(),
                                        t._v(" "),
                                        t.index
                                            ? t._e()
                                            : s(
                                                  "button",
                                                  {
                                                      staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                      on: {
                                                          click: function (e) {
                                                              return t.back();
                                                          },
                                                      },
                                                  },
                                                  [t._v("Back")]
                                              ),
                                    ]),
                                ]),
                            ]),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-md-6 grid-margin" }, [
                                      s("ul", { staticClass: "navbar-nav mr-lg-4 w-100" }, [
                                          s("li", { staticClass: "nav-item nav-search d-none d-lg-block w-100" }, [
                                              s("div", { staticClass: "input-group" }, [
                                                  t._m(1),
                                                  t._v(" "),
                                                  s("input", {
                                                      directives: [{ name: "model", rawName: "v-model", value: t.search, expression: "search" }],
                                                      staticClass: "form-control",
                                                      attrs: { type: "text", placeholder: "Search now", "aria-label": "search", "aria-describedby": "search" },
                                                      domProps: { value: t.search },
                                                      on: {
                                                          input: function (e) {
                                                              e.target.composing || (t.search = e.target.value);
                                                          },
                                                      },
                                                  }),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s(
                                                  "div",
                                                  { staticClass: "table-responsive" },
                                                  [
                                                      s(
                                                          "table",
                                                          { staticClass: "table", attrs: { "aria-describedby": "Upcoming Table" } },
                                                          [
                                                              t._m(2),
                                                              t._v(" "),
                                                              s(
                                                                  "tbody",
                                                                  t._l(t.paginated("filteredUpcomings"), function (e, a) {
                                                                      return s("tr", { key: a }, [
                                                                          s("td", [s("img", { attrs: { src: e.poster_path, alt: "poster path", height: "80", width: "80" } })]),
                                                                          t._v(" "),
                                                                          s("td", [t._v(t._s(e.id))]),
                                                                          t._v(" "),
                                                                          s("td", [t._v(t._s(e.title))]),
                                                                          t._v(" "),
                                                                          s("td", [
                                                                              s("div", { staticClass: "list-icons" }, [
                                                                                  s(
                                                                                      "a",
                                                                                      {
                                                                                          staticClass: "list-icons-item mr-2",
                                                                                          attrs: { "data-original-title": "Edit", rel: "tooltip", title: "" },
                                                                                          on: {
                                                                                              click: function (s) {
                                                                                                  return t.editing(e);
                                                                                              },
                                                                                          },
                                                                                      },
                                                                                      [s("em", { staticClass: "mdi mdi-pencil fa-lg", staticStyle: { color: "#4d83ff" } })]
                                                                                  ),
                                                                                  t._v(" "),
                                                                                  s(
                                                                                      "a",
                                                                                      {
                                                                                          staticClass: "list-icons-item text-warning",
                                                                                          attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                          on: {
                                                                                              click: function (s) {
                                                                                                  return t.destroy(e.id, a);
                                                                                              },
                                                                                          },
                                                                                      },
                                                                                      [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                                  ),
                                                                              ]),
                                                                          ]),
                                                                      ]);
                                                                  }),
                                                                  0
                                                              ),
                                                              t._v(" "),
                                                              t.filteredUpcomings.length ? s("paginate", { attrs: { list: t.filteredUpcomings, per: 5, name: "filteredUpcomings", tag: "tbody" } }) : t._e(),
                                                          ],
                                                          1
                                                      ),
                                                      t._v(" "),
                                                      t.filteredUpcomings.length
                                                          ? s("paginate-links", {
                                                                staticClass: "float-right",
                                                                attrs: {
                                                                    async: !0,
                                                                    classes: { ul: "pagination", li: "page-item", a: "page-link", ".next > a": "next-link", ".prev > a": "prev-link" },
                                                                    "hide-single-page": !0,
                                                                    limit: 5,
                                                                    "show-step-links": !0,
                                                                    for: "filteredUpcomings",
                                                                },
                                                            })
                                                          : t._e(),
                                                  ],
                                                  1
                                              ),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.add || t.edit
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s("section", [
                                                  s(
                                                      "div",
                                                      { staticClass: "form-group" },
                                                      [
                                                          s("autocomplete", {
                                                              attrs: {
                                                                  search: t.getSearchByName,
                                                                  placeholder: "Search Movie by Name",
                                                                  "aria-label": "Search Movie by Name",
                                                                  "data-loading": "true",
                                                                  "data-position": "above",
                                                                  "get-result-value": t.getResultValue,
                                                              },
                                                              on: { submit: t.onSubmit },
                                                          }),
                                                      ],
                                                      1
                                                  ),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      s("div", { staticClass: "input-group" }, [
                                                          s("input", {
                                                              directives: [{ name: "model", rawName: "v-model", value: t.tmdb, expression: "tmdb" }],
                                                              staticClass: "form-control",
                                                              attrs: { type: "text", placeholder: "Example : tt7286456", "aria-label": "Search Movie - Series - Animes" },
                                                              domProps: { value: t.tmdb },
                                                              on: {
                                                                  input: function (e) {
                                                                      e.target.composing || (t.tmdb = e.target.value);
                                                                  },
                                                              },
                                                          }),
                                                          t._v(" "),
                                                          s("div", { staticClass: "input-group-append" }, [
                                                              s(
                                                                  "button",
                                                                  {
                                                                      staticClass: "btn btn-sm btn-primary",
                                                                      attrs: { type: "type", disabled: !t.settings.tmdb_api_key },
                                                                      on: {
                                                                          click: function (e) {
                                                                              return t.getMovie();
                                                                          },
                                                                      },
                                                                  },
                                                                  [t._v("Search")]
                                                              ),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "title" } }, [t._v("Upcoming Title")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.upcoming.title, expression: "form.upcoming.title" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "title", type: "text" },
                                                                  domProps: { value: t.form.upcoming.title },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.upcoming, "title", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "title" } }, [t._v("Overview")]),
                                                              t._v(" "),
                                                              s("textarea", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.upcoming.overview, expression: "form.upcoming.overview" }],
                                                                  staticClass: "form-control pb-3",
                                                                  attrs: { id: "overview", required: "", rows: "8" },
                                                                  domProps: { value: t.form.upcoming.overview },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.upcoming, "overview", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              t.form.upcoming.poster_path
                                                                  ? s("img", { staticClass: "poster", attrs: { src: t.form.upcoming.poster_path, alt: "poster path", "data-loaded": "true", height: "316", width: "210" } })
                                                                  : t._e(),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.upcoming.poster_path, expression: "form.upcoming.poster_path" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "poster_path", name: "poster_path", placeholder: "Poster Image Link or Upload", required: "", type: "text" },
                                                                  domProps: { value: t.form.upcoming.poster_path },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.upcoming, "poster_path", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "col-md-4" }, [
                                                      s("div", { staticClass: "form-group" }, [
                                                          s("label", [t._v("Poster upload")]),
                                                          t._v(" "),
                                                          s("input", { staticClass: "file-upload-default" }),
                                                          t._v(" "),
                                                          s("div", { staticClass: "input-group col-xs-12" }, [
                                                              s("input", { staticClass: "form-control file-upload-info", attrs: { id: "poster", placeholder: "Upload Image", type: "file" }, on: { change: t.storePoster } }),
                                                              t._v(" "),
                                                              t._m(3),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "title" } }, [t._v("Backdrop Path")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.upcoming.backdrop_path, expression: "form.upcoming.backdrop_path" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "backdrop_path", name: "backdrop_path", placeholder: "Poster Image Link", required: "", type: "text" },
                                                                  domProps: { value: t.form.upcoming.backdrop_path },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.upcoming, "backdrop_path", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "title" } }, [t._v("Genre")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.upcoming.genre, expression: "form.upcoming.genre" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "link", placeholder: "Trailer ID", required: "", type: "text" },
                                                                  domProps: { value: t.form.upcoming.genre },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.upcoming, "genre", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "release_date" } }, [t._v("Release Date")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.upcoming.release_date, expression: "form.upcoming.release_date" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "release_date", placeholder: "Release Date", required: "", type: "Date" },
                                                                  domProps: { value: t.form.upcoming.release_date },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.upcoming, "release_date", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "title" } }, [t._v("Youtube Trailer ID")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.upcoming.trailer_url, expression: "form.upcoming.trailer_url" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "link", placeholder: "Trailer ID", required: "", type: "text" },
                                                                  domProps: { value: t.form.upcoming.trailer_url },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.upcoming, "trailer_url", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "title" } }, [t._v("Youtube Trailer ID")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.upcoming.trailer_url, expression: "form.upcoming.trailer_url" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "link", placeholder: "Trailer ID", required: "", type: "text" },
                                                                  domProps: { value: t.form.upcoming.trailer_url },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.upcoming, "trailer_url", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row justify-content-end" }, [
                                                      s("div", { staticClass: "col-auto" }, [
                                                          t.add
                                                              ? s(
                                                                    "button",
                                                                    {
                                                                        staticClass: "btn btn-primary mr-2",
                                                                        attrs: { type: "submit" },
                                                                        on: {
                                                                            click: function (e) {
                                                                                return e.preventDefault(), t.store();
                                                                            },
                                                                        },
                                                                    },
                                                                    [t._v("Save")]
                                                                )
                                                              : t._e(),
                                                          t._v(" "),
                                                          t.edit
                                                              ? s(
                                                                    "button",
                                                                    {
                                                                        staticClass: "btn btn-primary mr-2",
                                                                        attrs: { type: "submit" },
                                                                        on: {
                                                                            click: function (e) {
                                                                                return e.preventDefault(), t.update();
                                                                            },
                                                                        },
                                                                    },
                                                                    [t._v("Update")]
                                                                )
                                                              : t._e(),
                                                      ]),
                                                  ]),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "d-flex align-items-end flex-wrap" }, [e("div", { staticClass: "d-flex" })]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "input-group-prepend" }, [e("span", { staticClass: "input-group-text", attrs: { id: "search" } }, [e("i", { staticClass: "mdi mdi-magnify" })])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("thead", [
                                e("tr", [
                                    e("th", { attrs: { id: "cover" } }, [this._v("Cover")]),
                                    this._v(" "),
                                    e("th", { attrs: { id: "id" } }, [this._v("ID")]),
                                    this._v(" "),
                                    e("th", { attrs: { id: "name" } }, [this._v("Title")]),
                                    this._v(" "),
                                    e("th", { attrs: { id: "options" } }, [this._v("OPTIONS")]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                              Upload\n                            ")]),
                            ]);
                        },
                    ],
                    !1,
                    null,
                    null,
                    null
                );
            e.default = u.exports;
        },
        549: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a);
            function r(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function n(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var n = t.apply(e, s);
                        function o(t) {
                            r(n, a, i, o, l, "next", t);
                        }
                        function l(t) {
                            r(n, a, i, o, l, "throw", t);
                        }
                        o(void 0);
                    });
                };
            }
            var o = {
                    data: function () {
                        return {
                            index: !0,
                            add: !1,
                            edit: !1,
                            search: "",
                            form: { plan: { name: "", price: "", description: "", is_active: "", currency: "" } },
                            plans: [],
                            subscriptions: [],
                            paypal: [],
                            paginate: ["filteredPlans", "filteredSubscriptions", "filteredPaypal"],
                        };
                    },
                    mounted: function () {
                        var t = this;
                        return n(
                            i.a.mark(function e() {
                                var s;
                                return i.a.wrap(function (e) {
                                    for (;;)
                                        switch ((e.prev = e.next)) {
                                            case 0:
                                                return (e.next = 2), axios.get(url + "/admin/plans/data");
                                            case 2:
                                                return (s = e.sent), (t.plans = s.data), (e.next = 6), axios.get(url + "/admin/subscriptions/data");
                                            case 6:
                                                return (s = e.sent), (t.subscriptions = s.data), (e.next = 10), axios.get(url + "/admin/subscriptions/paypal");
                                            case 10:
                                                (s = e.sent), (t.paypal = s.data);
                                            case 12:
                                            case "end":
                                                return e.stop();
                                        }
                                }, e);
                            })
                        )();
                    },
                    methods: {
                        create: function () {
                            (this.index = !1), (this.edit = !1), (this.add = !0);
                        },
                        editing: function (t) {
                            (this.index = !1), (this.edit = !0), (this.form.plan = t), (this.form.plans = "");
                        },
                        back: function () {
                            (this.form.plan = ""), (this.add = !1), (this.edit = !1), (this.index = !0);
                        },
                        store: function () {
                            var t = this;
                            axios
                                .post(url + "/admin/plans/store", this.form)
                                .then(function (e) {
                                    (t.add = !1), (t.edit = !1), (t.index = !0), (t.form.plan = {}), t.plans.unshift(e.data.body), t.showSuccess(e.data.message);
                                })
                                .catch(function (e) {
                                    t.showError(e.response);
                                });
                        },
                        update: function () {
                            var t = this;
                            axios
                                .put(url + "/admin/plans/update/" + this.form.plan.id, this.form)
                                .then(function (e) {
                                    (t.edit = !1), (t.index = !0), (t.form.plans = []), t.showSuccess(e.data.message);
                                })
                                .catch(function (e) {
                                    t.showError(e.response);
                                });
                        },
                        destroy: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                n(
                                    i.a.mark(function a() {
                                        var r, n;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            return (a.prev = 0), (a.next = 3), axios.delete(url + "/admin/plans/destroy/" + t);
                                                        case 3:
                                                            (r = a.sent),
                                                                (n = s.plans.findIndex(function (e) {
                                                                    return e.id === t;
                                                                })),
                                                                s.plans.splice(n, 1),
                                                                s.paginate.filteredPlans.list.splice(e, 1),
                                                                s.showSuccess(r.data.message),
                                                                (a.next = 13);
                                                            break;
                                                        case 10:
                                                            (a.prev = 10), (a.t0 = a.catch(0)), s.showError();
                                                        case 13:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 10]]
                                        );
                                    })
                                )
                            );
                        },
                    },
                    computed: {
                        filteredPlans: function () {
                            var t = this;
                            return this.plans.filter(function (e) {
                                return e.name.toLowerCase().match(t.search.toLowerCase());
                            });
                        },
                        filteredSubscriptions: function () {
                            return _.orderBy(this.subscriptions, "created_at").reverse().splice(0, 10);
                        },
                        filteredPaypal: function () {
                            return _.orderBy(this.paypal, "created_at").reverse().splice(0, 10);
                        },
                    },
                    mixins: [s(3).a],
                },
                l = s(4),
                c = Object(l.a)(
                    o,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            s("div", { staticClass: "col-md-12 grid-margin" }, [
                                s("div", { staticClass: "d-flex justify-content-between flex-wrap" }, [
                                    t._m(0),
                                    t._v(" "),
                                    s("div", { staticClass: "d-flex justify-content-between align-items-end flex-wrap" }, [
                                        t.index
                                            ? s(
                                                  "button",
                                                  {
                                                      staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                      on: {
                                                          click: function (e) {
                                                              return t.create();
                                                          },
                                                      },
                                                  },
                                                  [t._v("Add Plan")]
                                              )
                                            : t._e(),
                                        t._v(" "),
                                        t.index
                                            ? t._e()
                                            : s(
                                                  "button",
                                                  {
                                                      staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                      on: {
                                                          click: function (e) {
                                                              return t.back();
                                                          },
                                                      },
                                                  },
                                                  [t._v("Back")]
                                              ),
                                    ]),
                                ]),
                            ]),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s("div", { staticClass: "table-responsive" }, [
                                                  s(
                                                      "table",
                                                      { staticClass: "table", attrs: { "aria-describedby": "Ads Table" } },
                                                      [
                                                          t._m(1),
                                                          t._v(" "),
                                                          s(
                                                              "tbody",
                                                              t._l(t.paginated("filteredPlans"), function (e, a) {
                                                                  return s("tr", { key: a }, [
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.name))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.price))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.description))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [
                                                                          s("div", { staticClass: "list-icons" }, [
                                                                              s(
                                                                                  "a",
                                                                                  {
                                                                                      staticClass: "list-icons-item mr-2",
                                                                                      attrs: { "data-original-title": "Edit", rel: "tooltip", title: "" },
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return t.editing(e);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [s("em", { staticClass: "mdi mdi-pencil fa-lg", staticStyle: { color: "#4d83ff" } })]
                                                                              ),
                                                                              t._v(" "),
                                                                              s(
                                                                                  "a",
                                                                                  {
                                                                                      staticClass: "list-icons-item text-warning",
                                                                                      attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return t.destroy(e.id, a);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                              ),
                                                                          ]),
                                                                      ]),
                                                                  ]);
                                                              }),
                                                              0
                                                          ),
                                                          t._v(" "),
                                                          t.filteredPlans.length ? s("paginate", { attrs: { list: t.filteredPlans, per: 5, name: "filteredPlans", tag: "tbody" } }) : t._e(),
                                                          t._v(" "),
                                                          t.filteredPlans.length
                                                              ? s("paginate-links", {
                                                                    staticClass: "float-right",
                                                                    attrs: {
                                                                        async: !0,
                                                                        classes: { ul: "pagination", li: "page-item", a: "page-link", ".next > a": "next-link", ".prev > a": "prev-link" },
                                                                        "hide-single-page": !0,
                                                                        limit: 5,
                                                                        "show-step-links": !0,
                                                                        for: "filteredPlans",
                                                                    },
                                                                })
                                                              : t._e(),
                                                      ],
                                                      1
                                                  ),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s("p", { staticClass: "card-title" }, [t._v("Stripe Active Subscriptions")]),
                                              t._v(" "),
                                              s("div", { staticClass: "table-responsive" }, [
                                                  s(
                                                      "table",
                                                      { staticClass: "table", attrs: { "aria-describedby": "Ads Table" } },
                                                      [
                                                          t._m(2),
                                                          t._v(" "),
                                                          s(
                                                              "tbody",
                                                              t._l(t.paginated("filteredSubscriptions"), function (e, a) {
                                                                  return s("tr", { key: a }, [
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.id))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.email))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.user_id))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.pack_name))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.stripe_status))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.stripe_plan))]),
                                                                  ]);
                                                              }),
                                                              0
                                                          ),
                                                          t._v(" "),
                                                          t.filteredSubscriptions.length ? s("paginate", { attrs: { list: t.filteredSubscriptions, per: 5, name: "filteredSubscriptions", tag: "tbody" } }) : t._e(),
                                                          t._v(" "),
                                                          t.filteredSubscriptions.length
                                                              ? s("paginate-links", {
                                                                    staticClass: "float-right",
                                                                    attrs: {
                                                                        async: !0,
                                                                        classes: { ul: "pagination", li: "page-item", a: "page-link", ".next > a": "next-link", ".prev > a": "prev-link" },
                                                                        "hide-single-page": !0,
                                                                        limit: 5,
                                                                        "show-step-links": !0,
                                                                        for: "filteredSubscriptions",
                                                                    },
                                                                })
                                                              : t._e(),
                                                      ],
                                                      1
                                                  ),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s("p", { staticClass: "card-title" }, [t._v("Paypal Subscriptions")]),
                                              t._v(" "),
                                              s("div", { staticClass: "table-responsive" }, [
                                                  s(
                                                      "table",
                                                      { staticClass: "table", attrs: { "aria-describedby": "Ads Table" } },
                                                      [
                                                          t._m(3),
                                                          t._v(" "),
                                                          s(
                                                              "tbody",
                                                              t._l(t.paginated("filteredPaypal"), function (e, a) {
                                                                  return s("tr", { key: a }, [
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.id))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.email))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.pack_name))]),
                                                                      t._v(" "),
                                                                      1 === e.premuim
                                                                          ? s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-check" })])
                                                                          : s("td", { staticClass: "text-center" }, [s("em", { staticClass: "mdi mdi-close" })]),
                                                                  ]);
                                                              }),
                                                              0
                                                          ),
                                                          t._v(" "),
                                                          t.filteredPaypal.length ? s("paginate", { attrs: { list: t.filteredPaypal, per: 5, name: "filteredPaypal", tag: "tbody" } }) : t._e(),
                                                          t._v(" "),
                                                          t.filteredPaypal.length
                                                              ? s("paginate-links", {
                                                                    staticClass: "float-right",
                                                                    attrs: {
                                                                        async: !0,
                                                                        classes: { ul: "pagination", li: "page-item", a: "page-link", ".next > a": "next-link", ".prev > a": "prev-link" },
                                                                        "hide-single-page": !0,
                                                                        limit: 5,
                                                                        "show-step-links": !0,
                                                                        for: "filteredPaypal",
                                                                    },
                                                                })
                                                              : t._e(),
                                                      ],
                                                      1
                                                  ),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.add || t.edit
                                ? s("div", { staticClass: "col-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s("form", { staticClass: "forms-sample" }, [
                                                  s("div", { staticClass: "form-group" }, [
                                                      s("label", { attrs: { for: "name" } }, [t._v("Title")]),
                                                      t._v(" "),
                                                      s("input", {
                                                          directives: [{ name: "model", rawName: "v-model", value: t.form.plan.name, expression: "form.plan.name" }],
                                                          staticClass: "form-control",
                                                          attrs: { id: "name", placeholder: "Title", type: "text" },
                                                          domProps: { value: t.form.plan.name },
                                                          on: {
                                                              input: function (e) {
                                                                  e.target.composing || t.$set(t.form.plan, "name", e.target.value);
                                                              },
                                                          },
                                                      }),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      s("label", { attrs: { for: "Description" } }, [t._v("Description")]),
                                                      t._v(" "),
                                                      s("textarea", {
                                                          directives: [{ name: "model", rawName: "v-model", value: t.form.plan.description, expression: "form.plan.description" }],
                                                          staticClass: "form-control",
                                                          attrs: { id: "Description", placeholder: "Description", type: "text", rows: "4" },
                                                          domProps: { value: t.form.plan.description },
                                                          on: {
                                                              input: function (e) {
                                                                  e.target.composing || t.$set(t.form.plan, "description", e.target.value);
                                                              },
                                                          },
                                                      }),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      s("label", { attrs: { for: "price" } }, [t._v("Price")]),
                                                      t._v(" "),
                                                      s("input", {
                                                          directives: [{ name: "model", rawName: "v-model", value: t.form.plan.price, expression: "form.plan.price" }],
                                                          staticClass: "form-control",
                                                          attrs: { id: "price", placeholder: "price", type: "text" },
                                                          domProps: { value: t.form.plan.price },
                                                          on: {
                                                              input: function (e) {
                                                                  e.target.composing || t.$set(t.form.plan, "price", e.target.value);
                                                              },
                                                          },
                                                      }),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      s("label", { attrs: { for: "currency_plan_app" } }, [t._v("Currency (inside the app text only)")]),
                                                      t._v(" "),
                                                      s("input", {
                                                          directives: [{ name: "model", rawName: "v-model", value: t.form.plan.currency_plan_app, expression: "form.plan.currency_plan_app" }],
                                                          staticClass: "form-control",
                                                          attrs: { id: "currency_plan_app", placeholder: "currency_plan_app", type: "text" },
                                                          domProps: { value: t.form.plan.currency_plan_app },
                                                          on: {
                                                              input: function (e) {
                                                                  e.target.composing || t.$set(t.form.plan, "currency_plan_app", e.target.value);
                                                              },
                                                          },
                                                      }),
                                                  ]),
                                                  t._v(" "),
                                                  t._m(4),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      s("label", { attrs: { for: "stripe_plan_id" } }, [t._v("Stripe Product Id")]),
                                                      t._v(" "),
                                                      s("input", {
                                                          directives: [{ name: "model", rawName: "v-model", value: t.form.plan.stripe_plan_id, expression: "form.plan.stripe_plan_id" }],
                                                          staticClass: "form-control",
                                                          attrs: { id: "stripe_plan_id", placeholder: "stripe_plan_id", type: "text" },
                                                          domProps: { value: t.form.plan.stripe_plan_id },
                                                          on: {
                                                              input: function (e) {
                                                                  e.target.composing || t.$set(t.form.plan, "stripe_plan_id", e.target.value);
                                                              },
                                                          },
                                                      }),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      s("label", { attrs: { for: "stripe_price_id" } }, [t._v("Stripe Price Id")]),
                                                      t._v(" "),
                                                      s("input", {
                                                          directives: [{ name: "model", rawName: "v-model", value: t.form.plan.stripe_price_id, expression: "form.plan.stripe_price_id" }],
                                                          staticClass: "form-control",
                                                          attrs: { id: "stripe_price_id", placeholder: "stripe_price_id", type: "text" },
                                                          domProps: { value: t.form.plan.stripe_price_id },
                                                          on: {
                                                              input: function (e) {
                                                                  e.target.composing || t.$set(t.form.plan, "stripe_price_id", e.target.value);
                                                              },
                                                          },
                                                      }),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "form-group" }, [
                                                      s("label", { attrs: { for: "name" } }, [t._v("Pack Duration ( Billing period )")]),
                                                      t._v(" "),
                                                      s("input", {
                                                          directives: [{ name: "model", rawName: "v-model", value: t.form.plan.pack_duration, expression: "form.plan.pack_duration" }],
                                                          staticClass: "form-control",
                                                          attrs: { id: "pack_duration", placeholder: "pack_duration", type: "number" },
                                                          domProps: { value: t.form.plan.pack_duration },
                                                          on: {
                                                              input: function (e) {
                                                                  e.target.composing || t.$set(t.form.plan, "pack_duration", e.target.value);
                                                              },
                                                          },
                                                      }),
                                                  ]),
                                                  t._v(" "),
                                                  t.add
                                                      ? s(
                                                            "button",
                                                            {
                                                                staticClass: "btn btn-primary mr-2",
                                                                attrs: { type: "submit" },
                                                                on: {
                                                                    click: function (e) {
                                                                        return e.preventDefault(), t.store();
                                                                    },
                                                                },
                                                            },
                                                            [t._v("Save")]
                                                        )
                                                      : t._e(),
                                                  t._v(" "),
                                                  t.edit
                                                      ? s(
                                                            "button",
                                                            {
                                                                staticClass: "btn btn-primary mr-2",
                                                                attrs: { type: "submit" },
                                                                on: {
                                                                    click: function (e) {
                                                                        return e.preventDefault(), t.update();
                                                                    },
                                                                },
                                                            },
                                                            [t._v("Update")]
                                                        )
                                                      : t._e(),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "d-flex align-items-end flex-wrap" }, [e("div", { staticClass: "d-flex" })]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("thead", [
                                e("tr", [
                                    e("th", { staticClass: "text-center", attrs: { id: "title" } }, [this._v("Title")]),
                                    this._v(" "),
                                    e("th", { staticClass: "text-center", attrs: { id: "ads link" } }, [this._v("Price")]),
                                    this._v(" "),
                                    e("th", { staticClass: "text-center", attrs: { id: "options" } }, [this._v("Description")]),
                                    this._v(" "),
                                    e("th", { staticClass: "text-center", attrs: { id: "options" } }, [this._v("Options")]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { staticClass: "text-center", attrs: { id: "title" } }, [t._v("ID")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "ads link" } }, [t._v("User E-mail")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "ads link" } }, [t._v("User id")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "ads link" } }, [t._v("Pack Name")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "options" } }, [t._v("Stripe Status")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "options" } }, [t._v("Stripe Plan")]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("thead", [
                                e("tr", [
                                    e("th", { staticClass: "text-center", attrs: { id: "title" } }, [this._v("ID")]),
                                    this._v(" "),
                                    e("th", { staticClass: "text-center", attrs: { id: "ads link" } }, [this._v("E-Email")]),
                                    this._v(" "),
                                    e("th", { staticClass: "text-center", attrs: { id: "options" } }, [this._v("Package Name")]),
                                    this._v(" "),
                                    e("th", { staticClass: "text-center", attrs: { id: "premuim" } }, [this._v("Premuim Status")]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("form", { staticClass: "form-inline" }, [e("em", { staticClass: "mdi mdi-video menu-icon fa-2x" }), this._v(" "), e("h3", { staticClass: "card-title" }, [this._v("STRIPE")])]);
                        },
                    ],
                    !1,
                    null,
                    null,
                    null
                );
            e.default = c.exports;
        },
        550: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a),
                r = s(3),
                n = s(6);
            function o(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function l(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var r = t.apply(e, s);
                        function n(t) {
                            o(r, a, i, n, l, "next", t);
                        }
                        function l(t) {
                            o(r, a, i, n, l, "throw", t);
                        }
                        n(void 0);
                    });
                };
            }
            var c = {
                    data: function () {
                        return { genres: [], genre: "", paginate: ["genres"], edit: !1, editing: {} };
                    },
                    mounted: function () {
                        var t = this;
                        return l(
                            i.a.mark(function e() {
                                var s;
                                return i.a.wrap(function (e) {
                                    for (;;)
                                        switch ((e.prev = e.next)) {
                                            case 0:
                                                return (e.next = 2), axios.get(url + "/admin/categories/data");
                                            case 2:
                                                (s = e.sent), (t.genres = s.data);
                                            case 4:
                                            case "end":
                                                return e.stop();
                                        }
                                }, e);
                            })
                        )();
                    },
                    methods: {
                        store: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.post(url + "/admin/categories/store", { name: t.genre });
                                                    case 3:
                                                        (s = e.sent), t.genres.unshift(s.data.body), (t.genre = ""), t.showSuccess(s.data.message), (e.next = 12);
                                                        break;
                                                    case 9:
                                                        (e.prev = 9), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 12:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 9]]
                                    );
                                })
                            )();
                        },
                        destroy: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                l(
                                    i.a.mark(function a() {
                                        var r, n;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            return (a.prev = 0), (a.next = 3), axios.delete(url + "/admin/categories/destroy/" + t);
                                                        case 3:
                                                            (r = a.sent),
                                                                (n = s.genres.findIndex(function (e) {
                                                                    return e.id === t;
                                                                })),
                                                                s.genres.splice(n, 1),
                                                                s.paginate.genres.list.splice(e, 1),
                                                                s.showSuccess(r.data.message),
                                                                (a.next = 13);
                                                            break;
                                                        case 10:
                                                            (a.prev = 10), (a.t0 = a.catch(0)), s.showError();
                                                        case 13:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 10]]
                                        );
                                    })
                                )
                            );
                        },
                        update: function (t, e) {
                            (this.edit = !0), (this.genre = t.name), (this.editing = t), (this.editing.index = e);
                        },
                        cancel: function () {
                            (this.edit = !1), (this.genre = ""), (this.editing = {});
                        },
                        updateSubmit: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.put(url + "/admin/categories/update/" + t.editing.id, { name: t.genre, id: t.editing.id });
                                                    case 3:
                                                        (s = e.sent),
                                                            (t.genres[t.editing.index] = s.data.body),
                                                            (t.paginate.genres.list[t.editing.index] = s.data.body),
                                                            (t.edit = !1),
                                                            (t.genre = ""),
                                                            (t.editing = {}),
                                                            t.showSuccess(s.data.message),
                                                            (e.next = 15);
                                                        break;
                                                    case 12:
                                                        (e.prev = 12), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 15:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 12]]
                                    );
                                })
                            )();
                        },
                    },
                    mixins: [r.a, n.a],
                },
                d = s(4),
                u = Object(d.a)(
                    c,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                s("div", { staticClass: "card" }, [
                                    s("div", { staticClass: "card-body" }, [
                                        s("div", { staticClass: "row" }, [
                                            s("div", { staticClass: "col-12" }, [
                                                s("div", { staticClass: "form-group" }, [
                                                    s("label", { attrs: { for: "genre" } }, [t._v("Genre")]),
                                                    t._v(" "),
                                                    s("input", {
                                                        directives: [{ name: "model", rawName: "v-model", value: t.genre, expression: "genre" }],
                                                        staticClass: "form-control",
                                                        attrs: { id: "genre", placeholder: "Genre name", type: "text" },
                                                        domProps: { value: t.genre },
                                                        on: {
                                                            input: function (e) {
                                                                e.target.composing || (t.genre = e.target.value);
                                                            },
                                                        },
                                                    }),
                                                ]),
                                                t._v(" "),
                                                t.edit
                                                    ? t._e()
                                                    : s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-info",
                                                              attrs: { disabled: !t.genre, type: "submit" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.store();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Add")]
                                                      ),
                                                t._v(" "),
                                                t.edit
                                                    ? s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-info",
                                                              attrs: { disabled: !t.genre, type: "button" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.updateSubmit();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Update")]
                                                      )
                                                    : t._e(),
                                                t._v(" "),
                                                t.edit
                                                    ? s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-light",
                                                              attrs: { disabled: !t.genre, type: "button" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.cancel();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Cancel")]
                                                      )
                                                    : t._e(),
                                            ]),
                                        ]),
                                        t._v(" "),
                                        s(
                                            "div",
                                            { staticClass: "table-responsive" },
                                            [
                                                s(
                                                    "table",
                                                    { staticClass: "table", attrs: { "aria-describedby": "Genres Table" } },
                                                    [
                                                        t._m(0),
                                                        t._v(" "),
                                                        s(
                                                            "tbody",
                                                            t._l(t.paginated("genres"), function (e, a) {
                                                                return s("tr", { key: a }, [
                                                                    s("td", [t._v(t._s(e.name))]),
                                                                    t._v(" "),
                                                                    s("td", [
                                                                        s("div", { staticClass: "list-icons" }, [
                                                                            s(
                                                                                "a",
                                                                                {
                                                                                    staticClass: "list-icons-item mr-2",
                                                                                    attrs: { "data-original-title": "Edit", rel: "tooltip", title: "" },
                                                                                    on: {
                                                                                        click: function (s) {
                                                                                            return t.update(e, a);
                                                                                        },
                                                                                    },
                                                                                },
                                                                                [s("em", { staticClass: "mdi mdi-pencil fa-lg", staticStyle: { color: "#4d83ff" } })]
                                                                            ),
                                                                            t._v(" "),
                                                                            s(
                                                                                "a",
                                                                                {
                                                                                    staticClass: "list-icons-item text-warning",
                                                                                    attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                    on: {
                                                                                        click: function (s) {
                                                                                            return t.destroy(e.id, a);
                                                                                        },
                                                                                    },
                                                                                },
                                                                                [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                            ),
                                                                        ]),
                                                                    ]),
                                                                ]);
                                                            }),
                                                            0
                                                        ),
                                                        t._v(" "),
                                                        t.genres && t.genres.length ? s("paginate", { attrs: { list: t.genres, per: 10, name: "genres", tag: "tbody" } }) : t._e(),
                                                    ],
                                                    1
                                                ),
                                                t._v(" "),
                                                s("paginate-links", {
                                                    staticClass: "float-right",
                                                    attrs: {
                                                        async: !0,
                                                        classes: { ul: "pagination", li: "page-item", a: "page-link", ".next > a": "next-link", ".prev > a": "prev-link" },
                                                        "hide-single-page": !0,
                                                        limit: 5,
                                                        "show-step-links": !0,
                                                        for: "genres",
                                                    },
                                                }),
                                            ],
                                            1
                                        ),
                                    ]),
                                ]),
                            ]),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("thead", [e("tr", [e("th", { attrs: { id: "name" } }, [this._v("Names")]), this._v(" "), e("th", { attrs: { id: "Action" } }, [this._v("Actions")])])]);
                        },
                    ],
                    !1,
                    null,
                    null,
                    null
                );
            e.default = u.exports;
        },
        551: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a),
                r = s(3),
                n = s(6);
            function o(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function l(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var r = t.apply(e, s);
                        function n(t) {
                            o(r, a, i, n, l, "next", t);
                        }
                        function l(t) {
                            o(r, a, i, n, l, "throw", t);
                        }
                        n(void 0);
                    });
                };
            }
            var c = {
                    data: function () {
                        return { index: !0, search: "", form: { suggestion: { name: "", message: "" }, notification: !1 }, suggestions: [], options: [], loading: !1, paginate: ["filteredSuggestions"] };
                    },
                    mounted: function () {
                        var t = this;
                        return l(
                            i.a.mark(function e() {
                                var s;
                                return i.a.wrap(function (e) {
                                    for (;;)
                                        switch ((e.prev = e.next)) {
                                            case 0:
                                                return (e.next = 2), axios.get(url + "/admin/suggestions/data");
                                            case 2:
                                                (s = e.sent), (t.suggestions = s.data);
                                            case 4:
                                            case "end":
                                                return e.stop();
                                        }
                                }, e);
                            })
                        )();
                    },
                    methods: {
                        back: function () {
                            (this.form.report = ""), (this.add = !1), (this.edit = !1), (this.index = !0);
                        },
                        destroy: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                l(
                                    i.a.mark(function a() {
                                        var r, n;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            return (a.prev = 0), (a.next = 3), axios.delete(url + "/admin/suggestions/destroy/" + t);
                                                        case 3:
                                                            (r = a.sent),
                                                                (n = s.suggestions.findIndex(function (e) {
                                                                    return e.id === t;
                                                                })),
                                                                s.suggestions.splice(n, 1),
                                                                s.paginate.filteredSuggestions.list.splice(e, 1),
                                                                s.showSuccess(r.data.message),
                                                                (a.next = 13);
                                                            break;
                                                        case 10:
                                                            (a.prev = 10), (a.t0 = a.catch(0)), s.showError();
                                                        case 13:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 10]]
                                        );
                                    })
                                )
                            );
                        },
                    },
                    computed: {
                        filteredSuggestions: function () {
                            var t = this;
                            return this.suggestions.filter(function (e) {
                                return e.title.toLowerCase().match(t.search.toLowerCase());
                            });
                        },
                    },
                    mixins: [r.a, n.a],
                },
                d = s(4),
                u = Object(d.a)(
                    c,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            t.index
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s("div", { staticClass: "table-responsive" }, [
                                                  s(
                                                      "table",
                                                      { staticClass: "table", attrs: { "aria-describedby": "Report Table" } },
                                                      [
                                                          t._m(0),
                                                          t._v(" "),
                                                          s(
                                                              "tbody",
                                                              t._l(t.paginated("filteredSuggestions"), function (e, a) {
                                                                  return s("tr", { key: a }, [
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.id))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.title))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.message))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [
                                                                          s(
                                                                              "button",
                                                                              {
                                                                                  staticClass: "btn btn-danger btn-sm",
                                                                                  attrs: { type: "button" },
                                                                                  on: {
                                                                                      click: function (s) {
                                                                                          return t.destroy(e.id, a);
                                                                                      },
                                                                                  },
                                                                              },
                                                                              [t._v("Dismiss")]
                                                                          ),
                                                                      ]),
                                                                  ]);
                                                              }),
                                                              0
                                                          ),
                                                          t._v(" "),
                                                          t.filteredSuggestions.length ? s("paginate", { attrs: { list: t.filteredSuggestions, per: 5, name: "filteredSuggestions", tag: "tbody" } }) : t._e(),
                                                          t._v(" "),
                                                          t.filteredSuggestions.length
                                                              ? s("paginate-links", {
                                                                    staticClass: "float-right",
                                                                    attrs: {
                                                                        async: !0,
                                                                        classes: { ul: "pagination", li: "page-item", a: "page-link", ".next > a": "next-link", ".prev > a": "prev-link" },
                                                                        "hide-single-page": !0,
                                                                        limit: 5,
                                                                        "show-step-links": !0,
                                                                        for: "filteredSuggestions",
                                                                    },
                                                                })
                                                              : t._e(),
                                                      ],
                                                      1
                                                  ),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("thead", [
                                e("tr", [
                                    e("th", { staticClass: "text-center", attrs: { id: "id" } }, [this._v("ID")]),
                                    this._v(" "),
                                    e("th", { staticClass: "text-center", attrs: { id: "movie_name" } }, [this._v("User Name")]),
                                    this._v(" "),
                                    e("th", { staticClass: "text-center", attrs: { id: "message" } }, [this._v("Message")]),
                                    this._v(" "),
                                    e("th", { staticClass: "text-center", attrs: { id: "actions" } }, [this._v("Actions")]),
                                ]),
                            ]);
                        },
                    ],
                    !1,
                    null,
                    null,
                    null
                );
            e.default = u.exports;
        },
        552: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a),
                r = s(3),
                n = s(6);
            function o(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function l(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var r = t.apply(e, s);
                        function n(t) {
                            o(r, a, i, n, l, "next", t);
                        }
                        function l(t) {
                            o(r, a, i, n, l, "throw", t);
                        }
                        n(void 0);
                    });
                };
            }
            var c = {
                    data: function () {
                        return { index: !0, casters: {}, edit: !1, add: !1, pageNum: null, size: "default", align: "right", search: "", form: { caster: { id: "", name: "", original_name: "", profile_path: "" } } };
                    },
                    mounted: function () {
                        var t = this;
                        return l(
                            i.a.mark(function e() {
                                var s;
                                return i.a.wrap(function (e) {
                                    for (;;)
                                        switch ((e.prev = e.next)) {
                                            case 0:
                                                return (e.next = 2), axios.get(url + "/admin/casters/datacasters");
                                            case 2:
                                                (s = e.sent), (t.casters = s.data);
                                            case 4:
                                            case "end":
                                                return e.stop();
                                        }
                                }, e);
                            })
                        )();
                    },
                    methods: {
                        create: function () {
                            (this.index = !1), (this.edit = !1), (this.add = !0);
                        },
                        getCastById: function (t) {
                            var e = this;
                            return l(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        return (s.prev = 0), (s.next = 3), http.get("https://api.themoviedb.org/3/person/" + t + "?api_key=" + e.settings.tmdb_api_key + "&language=" + e.settings.tmdb_lang.iso_639_1);
                                                    case 3:
                                                        (a = s.sent),
                                                            (r = _.mapKeys(a.data, function (t, e) {
                                                                return "id" === e ? "id" : e;
                                                            })).profile_path && (r.profile_path = e.settings.imdb_cover_path + r.profile_path),
                                                            (e.form.caster = r),
                                                            (s.next = 12);
                                                        break;
                                                    case 9:
                                                        (s.prev = 9), (s.t0 = s.catch(0)), e.showError("Error");
                                                    case 12:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[0, 9]]
                                    );
                                })
                            )();
                        },
                        searchUnit: _.debounce(function () {
                            var t = this;
                            axios.get(url + "/admin/search_casts?q=" + this.search).then(function (e) {
                                t.casters.data = e.data.casts;
                            });
                        }),
                        getResults: function () {
                            var t = this,
                                e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
                            axios.get(url + "/admin/casters/datacasters?page=" + e).then(function (s) {
                                (t.casters = s.data), (t.pageNum = e);
                            });
                        },
                        back: function () {
                            (this.form.caster = ""), (this.add = !1), (this.edit = !1), (this.index = !0);
                        },
                        editing: function (t) {
                            (this.index = !1), (this.edit = !0), (this.form.caster = t);
                        },
                        store: function () {
                            var t = this;
                            axios
                                .post(url + "/admin/casts/store", {
                                    name: this.form.caster.name,
                                    original_name: this.form.caster.original_name,
                                    place_of_birth: this.form.caster.place_of_birth,
                                    profile_path: this.form.caster.profile_path,
                                    birthday: this.form.caster.birthday,
                                    biography: this.form.caster.biography,
                                })
                                .then(function (e) {
                                    (t.add = !1),
                                        (t.edit = !1),
                                        (t.index = !0),
                                        (t.form.caster.id = ""),
                                        (t.form.caster.name = ""),
                                        (t.form.caster.original_name = ""),
                                        (t.form.caster.place_of_birth = ""),
                                        (t.form.caster.profile_path = ""),
                                        (t.form.caster.birthday = ""),
                                        (t.form.caster.biography = ""),
                                        t.casters.data.unshift(e.data.body),
                                        t.showSuccess(e.data.message),
                                        axios.get(url + "/admin/casters/dataweb?page=" + t.pageNum).then(function (e) {
                                            t.casters = e.data;
                                        });
                                })
                                .catch(function (e) {
                                    t.showError(e.response);
                                });
                        },
                        destroy: function (t) {
                            var e = this;
                            this.showConfirm(
                                l(
                                    i.a.mark(function s() {
                                        var a, r;
                                        return i.a.wrap(
                                            function (s) {
                                                for (;;)
                                                    switch ((s.prev = s.next)) {
                                                        case 0:
                                                            return (s.prev = 0), (s.next = 3), axios.delete(url + "/admin/casts/destroy/" + t);
                                                        case 3:
                                                            (a = s.sent),
                                                                (r = e.casters.data.findIndex(function (e) {
                                                                    return e.id === t;
                                                                })),
                                                                e.casters.data.splice(r, 1),
                                                                e.showSuccess(a.data.message),
                                                                (s.next = 12);
                                                            break;
                                                        case 9:
                                                            (s.prev = 9), (s.t0 = s.catch(0)), e.showError();
                                                        case 12:
                                                        case "end":
                                                            return s.stop();
                                                    }
                                            },
                                            s,
                                            null,
                                            [[0, 9]]
                                        );
                                    })
                                )
                            );
                        },
                        fetch: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), http.get("https://api.themoviedb.org/3/genre/tv/list?api_key=" + t.settings.tmdb_api_key + "&language=" + t.settings.tmdb_lang.iso_639_1);
                                                    case 3:
                                                        return (
                                                            (s = e.sent),
                                                            (t.tmdb.series = s.data),
                                                            (e.next = 7),
                                                            http.get("https://api.themoviedb.org/3/genre/movie/list?api_key=" + t.settings.tmdb_api_key + "&language=" + t.settings.tmdb_lang.iso_639_1)
                                                        );
                                                    case 7:
                                                        return (s = e.sent), (t.tmdb.movies = s.data), (e.next = 11), axios.post(url + "/admin/genres/fetch", t.tmdb);
                                                    case 11:
                                                        (s = e.sent), (t.genres = s.data.body), t.showSuccess(s.data.message), (e.next = 19);
                                                        break;
                                                    case 16:
                                                        (e.prev = 16), (e.t0 = e.catch(0)), t.showError();
                                                    case 19:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 16]]
                                    );
                                })
                            )();
                        },
                        storePoster: function (t) {
                            var e = this;
                            return l(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        if (void 0 === t.target.files[0]) {
                                                            s.next = 15;
                                                            break;
                                                        }
                                                        return (s.prev = 1), (e.poster = t.target.files[0]), (a = new FormData()).append("image", e.poster), (s.next = 7), axios.post(url + "/admin/casts/image/store", a);
                                                    case 7:
                                                        (r = s.sent), (e.form.caster.profile_path = r.data.image_path), e.showSuccess(r.data.message), (s.next = 15);
                                                        break;
                                                    case 12:
                                                        (s.prev = 12), (s.t0 = s.catch(1)), e.showError(s.t0.response);
                                                    case 15:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[1, 12]]
                                    );
                                })
                            )();
                        },
                        update: function () {
                            var t = this;
                            axios
                                .put(url + "/admin/casters/updatecast/" + this.form.caster.id, {
                                    name: this.form.caster.name,
                                    id: this.form.caster.id,
                                    original_name: this.form.caster.original_name,
                                    place_of_birth: this.form.caster.place_of_birth,
                                    profile_path: this.form.caster.profile_path,
                                    biography: this.form.caster.biography,
                                })
                                .then(function (e) {
                                    (t.add = !1),
                                        (t.edit = !1),
                                        (t.index = !0),
                                        (t.form.caster = {}),
                                        t.showSuccess(e.data.message),
                                        axios.get(url + "/admin/casters/datacasters?page=" + t.pageNum).then(function (e) {
                                            t.casters = e.data;
                                        });
                                })
                                .catch(function (e) {
                                    t.showError(e.response);
                                });
                        },
                        cancel: function () {
                            (this.edit = !1), (this.genre = ""), (this.editing = {});
                        },
                        updateSubmit: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.put(url + "/admin/genres/update/" + t.editing.id, { name: t.genre, id: t.editing.id });
                                                    case 3:
                                                        (s = e.sent),
                                                            (t.genres[t.editing.index] = s.data.body),
                                                            (t.paginate.genres.list[t.editing.index] = s.data.body),
                                                            (t.edit = !1),
                                                            (t.genre = ""),
                                                            (t.editing = {}),
                                                            t.showSuccess(s.data.message),
                                                            (e.next = 15);
                                                        break;
                                                    case 12:
                                                        (e.prev = 12), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 15:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 12]]
                                    );
                                })
                            )();
                        },
                    },
                    mixins: [r.a, n.a],
                },
                d = s(4),
                u = Object(d.a)(
                    c,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            s("div", { staticClass: "col-md-12 grid-margin" }, [
                                s("div", { staticClass: "d-flex justify-content-between flex-wrap" }, [
                                    t._m(0),
                                    t._v(" "),
                                    s("div", { staticClass: "d-flex justify-content-between align-items-end flex-wrap" }, [
                                        t.index
                                            ? s(
                                                  "button",
                                                  {
                                                      staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                      on: {
                                                          click: function (e) {
                                                              return t.create();
                                                          },
                                                      },
                                                  },
                                                  [t._v("\n          Add Caster\n        ")]
                                              )
                                            : t._e(),
                                        t._v(" "),
                                        t.index
                                            ? t._e()
                                            : s(
                                                  "button",
                                                  {
                                                      staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                      on: {
                                                          click: function (e) {
                                                              return t.back();
                                                          },
                                                      },
                                                  },
                                                  [t._v("\n          Back\n        ")]
                                              ),
                                    ]),
                                ]),
                            ]),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-md-6 grid-margin" }, [
                                      s("ul", { staticClass: "navbar-nav mr-lg-4 w-100" }, [
                                          s("li", { staticClass: "nav-item nav-search d-none d-lg-block w-100" }, [
                                              s("div", { staticClass: "input-group" }, [
                                                  t._m(1),
                                                  t._v(" "),
                                                  s("input", {
                                                      directives: [{ name: "model", rawName: "v-model", value: t.search, expression: "search" }],
                                                      staticClass: "form-control",
                                                      attrs: { type: "search", placeholder: "Search now", "aria-label": "search", "aria-describedby": "search" },
                                                      domProps: { value: t.search },
                                                      on: {
                                                          keyup: t.searchUnit,
                                                          input: function (e) {
                                                              e.target.composing || (t.search = e.target.value);
                                                          },
                                                      },
                                                  }),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s(
                                                  "div",
                                                  { staticClass: "table-responsive" },
                                                  [
                                                      s("table", { staticClass: "table", attrs: { "aria-describedby": "table movies", id: "table movies" } }, [
                                                          t._m(2),
                                                          t._v(" "),
                                                          s(
                                                              "tbody",
                                                              t._l(t.casters.data, function (e) {
                                                                  return s("tr", { key: e.id }, [
                                                                      s("td", { staticClass: "text-center" }, [s("img", { attrs: { src: e.profile_path, alt: "poster path", height: "80", width: "80" } })]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.id))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [t._v(t._s(e.name))]),
                                                                      t._v(" "),
                                                                      s("td", { staticClass: "text-center" }, [
                                                                          s("div", { staticClass: "list-icons" }, [
                                                                              s(
                                                                                  "a",
                                                                                  {
                                                                                      staticClass: "list-icons-item mr-2",
                                                                                      attrs: { "data-original-title": "Edit", rel: "tooltip", title: "" },
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return t.editing(e);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [s("em", { staticClass: "mdi mdi-pencil fa-lg", staticStyle: { color: "#4d83ff" } })]
                                                                              ),
                                                                              t._v(" "),
                                                                              s(
                                                                                  "a",
                                                                                  {
                                                                                      staticClass: "list-icons-item text-warning",
                                                                                      attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                      on: {
                                                                                          click: function (s) {
                                                                                              return t.destroy(e.id);
                                                                                          },
                                                                                      },
                                                                                  },
                                                                                  [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                              ),
                                                                          ]),
                                                                      ]),
                                                                  ]);
                                                              }),
                                                              0
                                                          ),
                                                      ]),
                                                      t._v(" "),
                                                      s("pagination", { staticClass: "mb-0", attrs: { data: t.casters, "show-disabled": !1, limit: 5, size: t.size, align: t.align }, on: { "pagination-change-page": t.getResults } }),
                                                  ],
                                                  1
                                              ),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.add || t.edit
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s("section", [
                                                  s("div", { staticClass: "poster-container" }, [
                                                      t.form.caster.profile_path
                                                          ? s("img", { staticClass: "poster", attrs: { src: t.form.caster.profile_path, alt: "movie poster", "data-loaded": "true", height: "316", width: "210" } })
                                                          : t._e(),
                                                      t._v(" "),
                                                      s("div", { staticClass: "many-inputs" }, [
                                                          s("div", { staticClass: "input-container" }, [
                                                              s("div", { staticClass: "form-group" }, [
                                                                  s("div", { staticClass: "input-group" }, [
                                                                      s("input", {
                                                                          directives: [{ name: "model", rawName: "v-model", value: t.form.caster.id, expression: "form.caster.id" }],
                                                                          staticClass: "form-control",
                                                                          attrs: { type: "text", placeholder: "Update Actor From Imdb", "aria-label": "Search Movie" },
                                                                          domProps: { value: t.form.caster.id },
                                                                          on: {
                                                                              input: function (e) {
                                                                                  e.target.composing || t.$set(t.form.caster, "id", e.target.value);
                                                                              },
                                                                          },
                                                                      }),
                                                                  ]),
                                                              ]),
                                                              t._v(" "),
                                                              s("div", { staticClass: "input-container" }, [
                                                                  s("div", { staticClass: "row" }, [
                                                                      s("div", { staticClass: "col-md-4" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "title" } }, [t._v("Actor Name")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.caster.name, expression: "form.caster.name" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "title", type: "text" },
                                                                                  domProps: { value: t.form.caster.name },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.caster, "name", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-4" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "original_name" } }, [t._v("Original Name")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.caster.original_name, expression: "form.caster.original_name" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "original_name", type: "text" },
                                                                                  domProps: { value: t.form.caster.original_name },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.caster, "original_name", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                  ]),
                                                                  t._v(" "),
                                                                  s("div", { staticClass: "col-md-4" }, [
                                                                      s("div", { staticClass: "form-group" }, [
                                                                          s("label", { attrs: { for: "title" } }, [t._v("Place of Birth")]),
                                                                          t._v(" "),
                                                                          s("input", {
                                                                              directives: [{ name: "model", rawName: "v-model", value: t.form.caster.place_of_birth, expression: "form.caster.place_of_birth" }],
                                                                              staticClass: "form-control",
                                                                              attrs: { id: "title", type: "text" },
                                                                              domProps: { value: t.form.caster.place_of_birth },
                                                                              on: {
                                                                                  input: function (e) {
                                                                                      e.target.composing || t.$set(t.form.caster, "place_of_birth", e.target.value);
                                                                                  },
                                                                              },
                                                                          }),
                                                                      ]),
                                                                  ]),
                                                              ]),
                                                              t._v(" "),
                                                              s("div", { staticClass: "input-container" }, [
                                                                  s("div", { staticClass: "row" }, [
                                                                      s("div", { staticClass: "col-md-12" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "overview" } }, [t._v("Biography")]),
                                                                              t._v(" "),
                                                                              s("textarea", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.caster.biography, expression: "form.caster.biography" }],
                                                                                  staticClass: "form-control pb-3",
                                                                                  attrs: { id: "overview", rows: "6", type: "text" },
                                                                                  domProps: { value: t.form.caster.biography },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.caster, "biography", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                  ]),
                                                              ]),
                                                              t._v(" "),
                                                              s("div", { staticClass: "input-container" }, [
                                                                  s("div", { staticClass: "row" }, [
                                                                      s("div", { staticClass: "col-md-8" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", { attrs: { for: "title" } }, [t._v("Poster Path")]),
                                                                              t._v(" "),
                                                                              s("input", {
                                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.caster.profile_path, expression: "form.caster.profile_path" }],
                                                                                  staticClass: "form-control",
                                                                                  attrs: { id: "profile_path", type: "text" },
                                                                                  domProps: { value: t.form.caster.profile_path },
                                                                                  on: {
                                                                                      input: function (e) {
                                                                                          e.target.composing || t.$set(t.form.caster, "profile_path", e.target.value);
                                                                                      },
                                                                                  },
                                                                              }),
                                                                          ]),
                                                                      ]),
                                                                      t._v(" "),
                                                                      s("div", { staticClass: "col-md-8" }, [
                                                                          s("div", { staticClass: "form-group" }, [
                                                                              s("label", [t._v("Poster upload")]),
                                                                              t._v(" "),
                                                                              s("input", { staticClass: "file-upload-default" }),
                                                                              t._v(" "),
                                                                              s("div", { staticClass: "input-group col-xs-12" }, [
                                                                                  s("input", {
                                                                                      staticClass: "form-control file-upload-info",
                                                                                      attrs: { id: "poster", placeholder: "Upload Image", type: "file" },
                                                                                      on: { change: t.storePoster },
                                                                                  }),
                                                                                  t._v(" "),
                                                                                  t._m(3),
                                                                              ]),
                                                                          ]),
                                                                      ]),
                                                                  ]),
                                                              ]),
                                                              t._v(" "),
                                                              t._m(4),
                                                          ]),
                                                      ]),
                                                      t._v(" "),
                                                      s("div", { staticClass: "d-flex justify-content-end align-items-end flex-wrap" }, [
                                                          t.add
                                                              ? s(
                                                                    "button",
                                                                    {
                                                                        staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                                        attrs: { type: "submit" },
                                                                        on: {
                                                                            click: function (e) {
                                                                                return e.preventDefault(), t.store();
                                                                            },
                                                                        },
                                                                    },
                                                                    [t._v("\n                Save\n              ")]
                                                                )
                                                              : t._e(),
                                                          t._v(" "),
                                                          t.edit
                                                              ? s(
                                                                    "button",
                                                                    {
                                                                        staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                                        attrs: { type: "submit" },
                                                                        on: {
                                                                            click: function (e) {
                                                                                return e.preventDefault(), t.update();
                                                                            },
                                                                        },
                                                                    },
                                                                    [t._v("\n                Update\n              ")]
                                                                )
                                                              : t._e(),
                                                      ]),
                                                  ]),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "d-flex align-items-end flex-wrap" }, [e("div", { staticClass: "d-flex" })]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "input-group-prepend" }, [e("span", { staticClass: "input-group-text", attrs: { id: "search" } }, [e("i", { staticClass: "mdi mdi-magnify" })])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("thead", [
                                e("tr", [
                                    e("th", { staticClass: "text-center", attrs: { id: "cover" } }, [this._v("Cover")]),
                                    this._v(" "),
                                    e("th", { staticClass: "text-center", attrs: { id: "id" } }, [this._v("Caster ID")]),
                                    this._v(" "),
                                    e("th", { staticClass: "text-center", attrs: { id: "name" } }, [this._v("Name")]),
                                    this._v(" "),
                                    e("th", { staticClass: "text-center", attrs: { id: "options" } }, [this._v("Options")]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                              Upload\n                            ")]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "row" }, [e("div", { staticClass: "col-md-12" })]);
                        },
                    ],
                    !1,
                    null,
                    null,
                    null
                );
            e.default = u.exports;
        },
        553: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a),
                r = s(3),
                n = s(6);
            function o(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function l(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var r = t.apply(e, s);
                        function n(t) {
                            o(r, a, i, n, l, "next", t);
                        }
                        function l(t) {
                            o(r, a, i, n, l, "throw", t);
                        }
                        n(void 0);
                    });
                };
            }
            var c = {
                    data: function () {
                        return {
                            index: !0,
                            add: !1,
                            edit: !1,
                            featureds: [],
                            paginate: ["featureds", "filteredFeatureds"],
                            form: { featured: { title: "", featured_id: "", poster_path: "", type: "", genre: "", vote_average: "", release_date: "", custom: "" }, notification: !1 },
                            poster: null,
                            search: "",
                            type_options: ["Movie", "Serie", "Anime", "Streaming", "Custom"],
                            genres: [],
                            fea_id: 0,
                        };
                    },
                    mounted: function () {
                        var t = this;
                        return l(
                            i.a.mark(function e() {
                                var s;
                                return i.a.wrap(function (e) {
                                    for (;;)
                                        switch ((e.prev = e.next)) {
                                            case 0:
                                                return (e.next = 2), axios.get(url + "/admin/featured/data");
                                            case 2:
                                                return (s = e.sent), (t.featureds = s.data), (e.next = 6), axios.get(url + "/admin/genres/data");
                                            case 6:
                                                (s = e.sent), (t.options = s.data);
                                            case 8:
                                            case "end":
                                                return e.stop();
                                        }
                                }, e);
                            })
                        )();
                    },
                    methods: {
                        create: function () {
                            (this.index = !1), (this.edit = !1), (this.add = !0), (this.featured_id = null);
                        },
                        back: function () {
                            (this.form.featured = ""), (this.featured_id = null), (this.add = !1), (this.edit = !1), (this.index = !0);
                        },
                        editing: function (t) {
                            (this.index = !1), (this.add = !1), (this.edit = !0), (this.form.featured = t), (this.fea_id = t.id);
                        },
                        getSearchByName: function (t) {
                            var e = url + "/admin/search_featured?q=" + encodeURI(t);
                            return new Promise(function (s) {
                                if (t.length < 1) return s([]);
                                fetch(e)
                                    .then(function (t) {
                                        return t.json();
                                    })
                                    .then(function (t) {
                                        s(t.search);
                                    });
                            });
                        },
                        getResultValue: function (t) {
                            return "Anime" === t.type ? t.name + " - Anime" : "Serie" === t.type ? t.name + " - Serie" : "Streaming" === t.type ? t.name + " - Streaming" : "Movie" === t.type ? t.title + " - Movie" : void 0;
                        },
                        onSubmit: function (t) {
                            this.getFeatured(t);
                        },
                        getFeatured: function (t) {
                            var e = this;
                            return l(
                                i.a.mark(function s() {
                                    var a, r, n, o, l, c, d, u;
                                    return i.a.wrap(function (s) {
                                        for (;;)
                                            switch ((s.prev = s.next)) {
                                                case 0:
                                                    if ("Anime" !== t.type) {
                                                        s.next = 18;
                                                        break;
                                                    }
                                                    return (s.next = 3), axios.get("admin/animes/show/" + t.id);
                                                case 3:
                                                    (a = s.sent),
                                                        ((r = _.mapKeys(a, function (t, e) {
                                                            return "id" === e ? "tmdb_id" : e;
                                                        })).id = e.fea_id),
                                                        (r.featured_id = t.id),
                                                        (r.title = t.name),
                                                        (r.type = "Anime"),
                                                        (r.poster_path = t.poster_path),
                                                        (r.type = t.type),
                                                        (r.premuim = t.premuim),
                                                        (r.release_date = t.first_air_date),
                                                        (r.vote_average = t.vote_average),
                                                        void 0 !== t.genres[0] && (r.genre = t.genres[0].name),
                                                        (e.form.featured = r),
                                                        (s.next = 70);
                                                    break;
                                                case 18:
                                                    if ("Serie" !== t.type) {
                                                        s.next = 36;
                                                        break;
                                                    }
                                                    return (s.next = 21), http.get("admin/series/show/" + t.id);
                                                case 21:
                                                    (n = s.sent),
                                                        ((o = _.mapKeys(n, function (t, e) {
                                                            return "id" === e ? "tmdb_id" : e;
                                                        })).id = e.fea_id),
                                                        (o.featured_id = t.id),
                                                        (o.title = t.name),
                                                        (o.type = "Serie"),
                                                        (o.poster_path = t.poster_path),
                                                        (o.type = t.type),
                                                        (o.premuim = t.premuim),
                                                        (o.release_date = t.first_air_date),
                                                        (o.vote_average = t.vote_average),
                                                        void 0 !== t.genres[0] && (o.genre = t.genres[0].name),
                                                        (e.form.featured = o),
                                                        (s.next = 70);
                                                    break;
                                                case 36:
                                                    if ("Movie" !== t.type) {
                                                        s.next = 54;
                                                        break;
                                                    }
                                                    return (s.next = 39), http.get("admin/media/detail/" + t.id);
                                                case 39:
                                                    (l = s.sent),
                                                        ((c = _.mapKeys(l, function (t, e) {
                                                            return "id" === e ? "tmdb_id" : e;
                                                        })).id = e.fea_id),
                                                        (c.featured_id = t.id),
                                                        (c.title = t.title),
                                                        (c.type = "Movie"),
                                                        (c.poster_path = t.poster_path),
                                                        (c.type = t.type),
                                                        (c.premuim = t.premuim),
                                                        (c.release_date = t.release_date),
                                                        (c.vote_average = t.vote_average),
                                                        void 0 !== t.genres[0] && (c.genre = t.genres[0].name),
                                                        (e.form.featured = c),
                                                        (s.next = 70);
                                                    break;
                                                case 54:
                                                    if ("Streaming" !== t.type) {
                                                        s.next = 70;
                                                        break;
                                                    }
                                                    return (s.next = 57), http.get("admin/stream/show/" + t.id);
                                                case 57:
                                                    (d = s.sent),
                                                        ((u = _.mapKeys(d, function (t, e) {
                                                            return "id" === e ? "tmdb_id" : e;
                                                        })).id = e.fea_id),
                                                        (u.featured_id = t.id),
                                                        (u.title = t.name),
                                                        (u.type = "Streaming"),
                                                        (u.poster_path = t.poster_path),
                                                        (u.type = t.type),
                                                        null === t.vip ? (u.premuim = 0) : (u.premuim = t.vip),
                                                        (u.release_date = t.release_date),
                                                        (u.vote_average = t.vote_average),
                                                        void 0 !== t.genres[0] && (u.genre = t.genres[0].name),
                                                        (e.form.featured = u);
                                                case 70:
                                                case "end":
                                                    return s.stop();
                                            }
                                    }, s);
                                })
                            )();
                        },
                        storeMiniPoster: function (t) {
                            var e = this;
                            return l(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        if (void 0 === t.target.files[0]) {
                                                            s.next = 15;
                                                            break;
                                                        }
                                                        return (s.prev = 1), (e.poster = t.target.files[0]), (a = new FormData()).append("image", e.poster), (s.next = 7), axios.post(url + "/admin/featureds/image/store", a);
                                                    case 7:
                                                        (r = s.sent), (e.form.featured.miniposter = r.data.image_path), e.showSuccess(r.data.message), (s.next = 15);
                                                        break;
                                                    case 12:
                                                        (s.prev = 12), (s.t0 = s.catch(1)), e.showError(s.t0.response);
                                                    case 15:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[1, 12]]
                                    );
                                })
                            )();
                        },
                        store: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.post(url + "/admin/featured/store", t.form);
                                                    case 3:
                                                        (s = e.sent),
                                                            (t.add = !1),
                                                            (t.edit = !1),
                                                            (t.index = !0),
                                                            (t.form.featured = { title: "", poster_path: "", featured_id: "", miniposter: "", type: "", genre: "", vote_average: "", release_date: "", premuim: 0 }),
                                                            (t.poster = null),
                                                            (t.backdrop = null),
                                                            t.featureds.unshift(s.data.body),
                                                            t.showSuccess(s.data.message),
                                                            (e.next = 17);
                                                        break;
                                                    case 14:
                                                        (e.prev = 14), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 17:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 14]]
                                    );
                                })
                            )();
                        },
                        update: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.put(url + "/admin/featured/update/" + t.form.featured.id, t.form);
                                                    case 3:
                                                        (s = e.sent),
                                                            (t.add = !1),
                                                            (t.edit = !1),
                                                            (t.index = !0),
                                                            (t.form.featured = {}),
                                                            t.showSuccess(s.data.message),
                                                            axios.get(url + "/admin/featured/data").then(function (e) {
                                                                t.featureds = e.data;
                                                            }),
                                                            (e.next = 15);
                                                        break;
                                                    case 12:
                                                        (e.prev = 12), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 15:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 12]]
                                    );
                                })
                            )();
                        },
                        destroy: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                l(
                                    i.a.mark(function a() {
                                        var r, n;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            return (a.prev = 0), (a.next = 3), axios.delete(url + "/admin/featured/destroy/" + t);
                                                        case 3:
                                                            (r = a.sent),
                                                                (n = s.featureds.findIndex(function (e) {
                                                                    return e.id === t;
                                                                })),
                                                                s.featureds.splice(n, 1),
                                                                s.paginate.filteredFeatureds.list.splice(e, 1),
                                                                s.showSuccess(r.data.message),
                                                                (a.next = 13);
                                                            break;
                                                        case 10:
                                                            (a.prev = 10), (a.t0 = a.catch(0)), s.showError();
                                                        case 13:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 10]]
                                        );
                                    })
                                )
                            );
                        },
                        storePoster: function (t) {
                            var e = this;
                            return l(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        if (void 0 === t.target.files[0]) {
                                                            s.next = 14;
                                                            break;
                                                        }
                                                        return (s.prev = 1), (e.poster = t.target.files[0]), (a = new FormData()).append("image", e.poster), (s.next = 7), axios.post(url + "/admin/featured/image/store", a);
                                                    case 7:
                                                        (r = s.sent), (e.form.featured.poster_path = r.data.image_path), (s.next = 14);
                                                        break;
                                                    case 11:
                                                        (s.prev = 11), (s.t0 = s.catch(1)), e.showError(s.t0.response);
                                                    case 14:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[1, 11]]
                                    );
                                })
                            )();
                        },
                        storeBackdrop: function (t) {
                            var e = this;
                            return l(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        if (void 0 === t.target.files[0]) {
                                                            s.next = 14;
                                                            break;
                                                        }
                                                        return (s.prev = 1), (e.backdrop = t.target.files[0]), (a = new FormData()).append("image", e.backdrop), (s.next = 7), axios.post(url + "/admin/featured/image/store", a);
                                                    case 7:
                                                        (r = s.sent), (e.form.featured.backdrop_path = r.data.image_path), (s.next = 14);
                                                        break;
                                                    case 11:
                                                        (s.prev = 11), (s.t0 = s.catch(1)), e.showError(s.t0.response);
                                                    case 14:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[1, 11]]
                                    );
                                })
                            )();
                        },
                    },
                    computed: {
                        filteredFeatureds: function () {
                            var t = this;
                            return this.featureds.filter(function (e) {
                                return e.title.toLowerCase().match(t.search.toLowerCase());
                            });
                        },
                    },
                    mixins: [r.a, n.a],
                },
                d = s(4),
                u = Object(d.a)(
                    c,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            s("div", { staticClass: "col-md-12 grid-margin" }, [
                                s("div", { staticClass: "d-flex justify-content-between flex-wrap" }, [
                                    t._m(0),
                                    t._v(" "),
                                    s("div", { staticClass: "d-flex justify-content-between align-items-end flex-wrap" }, [
                                        t.index
                                            ? s(
                                                  "button",
                                                  {
                                                      staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                      on: {
                                                          click: function (e) {
                                                              return t.create();
                                                          },
                                                      },
                                                  },
                                                  [t._v("Add Featured")]
                                              )
                                            : t._e(),
                                        t._v(" "),
                                        t.index
                                            ? t._e()
                                            : s(
                                                  "button",
                                                  {
                                                      staticClass: "btn btn-primary mt-2 mt-xl-0",
                                                      on: {
                                                          click: function (e) {
                                                              return t.back();
                                                          },
                                                      },
                                                  },
                                                  [t._v("Back")]
                                              ),
                                    ]),
                                ]),
                            ]),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-md-6 grid-margin" }, [
                                      s("ul", { staticClass: "navbar-nav mr-lg-4 w-100" }, [
                                          s("li", { staticClass: "nav-item nav-search d-none d-lg-block w-100" }, [
                                              s("div", { staticClass: "input-group" }, [
                                                  t._m(1),
                                                  t._v(" "),
                                                  s("input", {
                                                      directives: [{ name: "model", rawName: "v-model", value: t.search, expression: "search" }],
                                                      staticClass: "form-control",
                                                      attrs: { type: "text", placeholder: "Search now", "aria-label": "search", "aria-describedby": "search" },
                                                      domProps: { value: t.search },
                                                      on: {
                                                          input: function (e) {
                                                              e.target.composing || (t.search = e.target.value);
                                                          },
                                                      },
                                                  }),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.index
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s(
                                                  "div",
                                                  { staticClass: "table-responsive" },
                                                  [
                                                      s(
                                                          "table",
                                                          { staticClass: "table", attrs: { "aria-describedby": "table movies", id: "table movies" } },
                                                          [
                                                              t._m(2),
                                                              t._v(" "),
                                                              s(
                                                                  "tbody",
                                                                  t._l(t.paginated("filteredFeatureds"), function (e, a) {
                                                                      return s("tr", { key: a }, [
                                                                          s("td", { staticClass: "text-center" }, [s("img", { attrs: { src: e.poster_path, alt: "poster path", height: "80", width: "80" } })]),
                                                                          t._v(" "),
                                                                          s("td", { staticClass: "text-center" }, [t._v(t._s(e.position))]),
                                                                          t._v(" "),
                                                                          s("td", { staticClass: "text-center" }, [t._v(t._s(e.id))]),
                                                                          t._v(" "),
                                                                          s("td", { staticClass: "text-center" }, [t._v(t._s(e.title))]),
                                                                          t._v(" "),
                                                                          s("td", { staticClass: "text-center" }, [t._v(t._s(e.type))]),
                                                                          t._v(" "),
                                                                          s("td", { staticClass: "text-center" }, [
                                                                              s("div", { staticClass: "list-icons" }, [
                                                                                  s(
                                                                                      "a",
                                                                                      {
                                                                                          staticClass: "list-icons-item mr-2",
                                                                                          attrs: { "data-original-title": "Edit", rel: "tooltip", title: "" },
                                                                                          on: {
                                                                                              click: function (s) {
                                                                                                  return t.editing(e);
                                                                                              },
                                                                                          },
                                                                                      },
                                                                                      [s("em", { staticClass: "mdi mdi-pencil fa-lg", staticStyle: { color: "#4d83ff" } })]
                                                                                  ),
                                                                                  t._v(" "),
                                                                                  s(
                                                                                      "a",
                                                                                      {
                                                                                          staticClass: "list-icons-item text-warning",
                                                                                          attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                          on: {
                                                                                              click: function (s) {
                                                                                                  return t.destroy(e.id, a);
                                                                                              },
                                                                                          },
                                                                                      },
                                                                                      [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                                  ),
                                                                              ]),
                                                                          ]),
                                                                      ]);
                                                                  }),
                                                                  0
                                                              ),
                                                              t._v(" "),
                                                              t.filteredFeatureds.length ? s("paginate", { attrs: { list: t.filteredFeatureds, per: 5, name: "filteredFeatureds", tag: "tbody" } }) : t._e(),
                                                          ],
                                                          1
                                                      ),
                                                      t._v(" "),
                                                      t.filteredFeatureds.length
                                                          ? s("paginate-links", {
                                                                staticClass: "float-right",
                                                                attrs: {
                                                                    async: !0,
                                                                    classes: { ul: "pagination", li: "page-item", a: "page-link", ".next > a": "next-link", ".prev > a": "prev-link" },
                                                                    "hide-single-page": !0,
                                                                    limit: 5,
                                                                    "show-step-links": !0,
                                                                    for: "filteredFeatureds",
                                                                },
                                                            })
                                                          : t._e(),
                                                  ],
                                                  1
                                              ),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                            t._v(" "),
                            t.add || t.edit
                                ? s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                      s("div", { staticClass: "card" }, [
                                          s("div", { staticClass: "card-body" }, [
                                              s("section", [
                                                  t.form.featured.custom
                                                      ? t._e()
                                                      : s(
                                                            "div",
                                                            { staticClass: "form-group" },
                                                            [
                                                                s("autocomplete", {
                                                                    attrs: {
                                                                        search: t.getSearchByName,
                                                                        placeholder: "Search Movie by Name",
                                                                        "aria-label": "Search Movie by Name",
                                                                        "data-loading": "true",
                                                                        "data-position": "above",
                                                                        "get-result-value": t.getResultValue,
                                                                    },
                                                                    on: { submit: t.onSubmit },
                                                                }),
                                                            ],
                                                            1
                                                        ),
                                                  t._v(" "),
                                                  s("div", { staticClass: "col-md-3" }, [
                                                      s("div", { staticClass: "form-group" }, [
                                                          s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.featured.custom, expression: "form.featured.custom" }],
                                                                  staticClass: "custom-control-input",
                                                                  attrs: { id: "custom", type: "checkbox" },
                                                                  domProps: { checked: Array.isArray(t.form.featured.custom) ? t._i(t.form.featured.custom, null) > -1 : t.form.featured.custom },
                                                                  on: {
                                                                      change: function (e) {
                                                                          var s = t.form.featured.custom,
                                                                              a = e.target,
                                                                              i = !!a.checked;
                                                                          if (Array.isArray(s)) {
                                                                              var r = t._i(s, null);
                                                                              a.checked ? r < 0 && t.$set(t.form.featured, "custom", s.concat([null])) : r > -1 && t.$set(t.form.featured, "custom", s.slice(0, r).concat(s.slice(r + 1)));
                                                                          } else t.$set(t.form.featured, "custom", i);
                                                                      },
                                                                  },
                                                              }),
                                                              t._v(" "),
                                                              s("label", { staticClass: "custom-control-label", attrs: { for: "custom" } }, [t._v("Custom")]),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  t.form.featured.custom
                                                      ? s("div", { staticClass: "row" }, [
                                                            s("div", { staticClass: "col-md-12" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "custom_link" } }, [t._v("Featured Custom Link")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.form.featured.custom_link, expression: "form.featured.custom_link" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "custom_link", type: "text" },
                                                                        domProps: { value: t.form.featured.custom_link },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.form.featured, "custom_link", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ])
                                                      : t._e(),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "title" } }, [t._v("Order")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.featured.position, expression: "form.featured.position" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "position", name: "position", placeholder: "Media Position", required: "", type: "text" },
                                                                  domProps: { value: t.form.featured.position },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.featured, "position", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  t.form.featured.custom
                                                      ? t._e()
                                                      : s("div", { staticClass: "row" }, [
                                                            s("div", { staticClass: "col-md-12" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "title" } }, [t._v("Featured ID")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.form.featured.id, expression: "form.featured.id" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "title", type: "text" },
                                                                        domProps: { value: t.form.featured.id },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.form.featured, "id", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                  t._v(" "),
                                                  t.form.featured.custom
                                                      ? t._e()
                                                      : s("div", { staticClass: "row" }, [
                                                            s("div", { staticClass: "col-md-12" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "title" } }, [t._v("Featured Media ID")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.form.featured.featured_id, expression: "form.featured.featured_id" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "title", type: "text" },
                                                                        domProps: { value: t.form.featured.featured_id },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.form.featured, "featured_id", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "title" } }, [t._v("Featured Title")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.featured.title, expression: "form.featured.title" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "title", type: "text" },
                                                                  domProps: { value: t.form.featured.title },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.featured, "title", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              s("label", { attrs: { for: "title" } }, [t._v("Poster Path")]),
                                                              t._v(" "),
                                                              s("input", {
                                                                  directives: [{ name: "model", rawName: "v-model", value: t.form.featured.poster_path, expression: "form.featured.poster_path" }],
                                                                  staticClass: "form-control",
                                                                  attrs: { id: "poster_path", name: "poster_path", placeholder: "Poster Image Link", required: "", type: "text" },
                                                                  domProps: { value: t.form.featured.poster_path },
                                                                  on: {
                                                                      input: function (e) {
                                                                          e.target.composing || t.$set(t.form.featured, "poster_path", e.target.value);
                                                                      },
                                                                  },
                                                              }),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s("div", { staticClass: "form-group" }, [
                                                              t.form.featured.poster_path
                                                                  ? s("img", { staticClass: "poster", attrs: { src: t.form.featured.poster_path, alt: "poster path", "data-loaded": "true", height: "316", width: "210" } })
                                                                  : t._e(),
                                                          ]),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  t.form.featured.custom
                                                      ? t._e()
                                                      : s("div", { staticClass: "col-md-3" }, [
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.form.featured.enable_miniposter, expression: "form.featured.enable_miniposter" }],
                                                                        staticClass: "custom-control-input",
                                                                        attrs: { id: "enable_miniposter", type: "checkbox" },
                                                                        domProps: { checked: Array.isArray(t.form.featured.enable_miniposter) ? t._i(t.form.featured.enable_miniposter, null) > -1 : t.form.featured.enable_miniposter },
                                                                        on: {
                                                                            change: function (e) {
                                                                                var s = t.form.featured.enable_miniposter,
                                                                                    a = e.target,
                                                                                    i = !!a.checked;
                                                                                if (Array.isArray(s)) {
                                                                                    var r = t._i(s, null);
                                                                                    a.checked
                                                                                        ? r < 0 && t.$set(t.form.featured, "enable_miniposter", s.concat([null]))
                                                                                        : r > -1 && t.$set(t.form.featured, "enable_miniposter", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                } else t.$set(t.form.featured, "enable_miniposter", i);
                                                                            },
                                                                        },
                                                                    }),
                                                                    t._v(" "),
                                                                    s("label", { staticClass: "custom-control-label", attrs: { for: "enable_miniposter" } }, [t._v("Enable Miniposter")]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                  t._v(" "),
                                                  t.form.featured.custom
                                                      ? t._e()
                                                      : s("div", { staticClass: "row" }, [
                                                            s("div", { staticClass: "col-md-12" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "title" } }, [t._v("MiniPoster Path (PNG FORMAT ONLY)")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.form.featured.miniposter, expression: "form.featured.miniposter" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "miniposter", name: "miniposter", placeholder: "Poster Image Link", required: "", type: "text" },
                                                                        domProps: { value: t.form.featured.miniposter },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.form.featured, "miniposter", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                  t._v(" "),
                                                  t.form.featured.custom
                                                      ? t._e()
                                                      : s("div", { staticClass: "row" }, [
                                                            s("div", { staticClass: "col-md-12" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    t.form.featured.miniposter
                                                                        ? s("img", { staticClass: "poster_featured", attrs: { src: t.form.featured.miniposter, alt: "miniposter path", "data-loaded": "true", height: "200", width: "200" } })
                                                                        : t._e(),
                                                                ]),
                                                            ]),
                                                        ]),
                                                  t._v(" "),
                                                  t.form.featured.custom
                                                      ? t._e()
                                                      : s("div", { staticClass: "col-md-4" }, [
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("label", [t._v("MiniPoster upload")]),
                                                                t._v(" "),
                                                                s("input", { staticClass: "file-upload-default" }),
                                                                t._v(" "),
                                                                s("div", { staticClass: "input-group col-xs-12" }, [
                                                                    s("input", { staticClass: "form-control file-upload-info", attrs: { id: "poster", placeholder: "Upload Image", type: "file" }, on: { change: t.storeMiniPoster } }),
                                                                    t._v(" "),
                                                                    t._m(3),
                                                                ]),
                                                            ]),
                                                        ]),
                                                  t._v(" "),
                                                  t.form.featured.custom
                                                      ? t._e()
                                                      : s("div", { staticClass: "col-md-3" }, [
                                                            s("div", { staticClass: "form-group" }, [
                                                                s("div", { staticClass: "custom-control custom-checkbox" }, [
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.form.featured.premuim, expression: "form.featured.premuim" }],
                                                                        staticClass: "custom-control-input",
                                                                        attrs: { id: "premuim", type: "checkbox" },
                                                                        domProps: { checked: Array.isArray(t.form.featured.premuim) ? t._i(t.form.featured.premuim, null) > -1 : t.form.featured.premuim },
                                                                        on: {
                                                                            change: function (e) {
                                                                                var s = t.form.featured.premuim,
                                                                                    a = e.target,
                                                                                    i = !!a.checked;
                                                                                if (Array.isArray(s)) {
                                                                                    var r = t._i(s, null);
                                                                                    a.checked
                                                                                        ? r < 0 && t.$set(t.form.featured, "premuim", s.concat([null]))
                                                                                        : r > -1 && t.$set(t.form.featured, "premuim", s.slice(0, r).concat(s.slice(r + 1)));
                                                                                } else t.$set(t.form.featured, "premuim", i);
                                                                            },
                                                                        },
                                                                    }),
                                                                    t._v(" "),
                                                                    s("label", { staticClass: "custom-control-label", attrs: { for: "premuim" } }, [t._v("Premuim")]),
                                                                ]),
                                                            ]),
                                                        ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row" }, [
                                                      s("div", { staticClass: "col-md-12" }, [
                                                          s(
                                                              "div",
                                                              { staticClass: "form-group" },
                                                              [
                                                                  s("label", { attrs: { for: "lang" } }, [t._v("Type")]),
                                                                  t._v(" "),
                                                                  s("multiselect", {
                                                                      attrs: { "clear-on-select": !1, options: t.type_options },
                                                                      model: {
                                                                          value: t.form.featured.type,
                                                                          callback: function (e) {
                                                                              t.$set(t.form.featured, "type", e);
                                                                          },
                                                                          expression: "form.featured.type",
                                                                      },
                                                                  }),
                                                              ],
                                                              1
                                                          ),
                                                      ]),
                                                  ]),
                                                  t._v(" "),
                                                  t.form.featured.custom
                                                      ? t._e()
                                                      : s("div", { staticClass: "row" }, [
                                                            s("div", { staticClass: "col-md-12" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "genre" } }, [t._v("Genre")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.form.featured.genre, expression: "form.featured.genre" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "genre", type: "text" },
                                                                        domProps: { value: t.form.featured.genre },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.form.featured, "genre", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                  t._v(" "),
                                                  t.form.featured.custom
                                                      ? t._e()
                                                      : s("div", { staticClass: "row" }, [
                                                            s("div", { staticClass: "col-md-12" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "release_date" } }, [t._v("Release Date")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.form.featured.release_date, expression: "form.featured.release_date" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "release_date", type: "text" },
                                                                        domProps: { value: t.form.featured.release_date },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.form.featured, "release_date", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                  t._v(" "),
                                                  t.form.featured.custom
                                                      ? t._e()
                                                      : s("div", { staticClass: "row" }, [
                                                            s("div", { staticClass: "col-md-12" }, [
                                                                s("div", { staticClass: "form-group" }, [
                                                                    s("label", { attrs: { for: "vote_average" } }, [t._v("Vote Average")]),
                                                                    t._v(" "),
                                                                    s("input", {
                                                                        directives: [{ name: "model", rawName: "v-model", value: t.form.featured.vote_average, expression: "form.featured.vote_average" }],
                                                                        staticClass: "form-control",
                                                                        attrs: { id: "vote_average", type: "text" },
                                                                        domProps: { value: t.form.featured.vote_average },
                                                                        on: {
                                                                            input: function (e) {
                                                                                e.target.composing || t.$set(t.form.featured, "vote_average", e.target.value);
                                                                            },
                                                                        },
                                                                    }),
                                                                ]),
                                                            ]),
                                                        ]),
                                                  t._v(" "),
                                                  s("div", { staticClass: "row justify-content-end" }, [
                                                      s("div", { staticClass: "col-auto" }, [
                                                          t.add
                                                              ? s(
                                                                    "button",
                                                                    {
                                                                        staticClass: "btn btn-primary mr-2",
                                                                        attrs: { type: "submit" },
                                                                        on: {
                                                                            click: function (e) {
                                                                                return e.preventDefault(), t.store();
                                                                            },
                                                                        },
                                                                    },
                                                                    [t._v("Save")]
                                                                )
                                                              : t._e(),
                                                          t._v(" "),
                                                          t.edit
                                                              ? s(
                                                                    "button",
                                                                    {
                                                                        staticClass: "btn btn-primary mr-2",
                                                                        attrs: { type: "submit" },
                                                                        on: {
                                                                            click: function (e) {
                                                                                return e.preventDefault(), t.update();
                                                                            },
                                                                        },
                                                                    },
                                                                    [t._v("Update")]
                                                                )
                                                              : t._e(),
                                                      ]),
                                                  ]),
                                              ]),
                                          ]),
                                      ]),
                                  ])
                                : t._e(),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "d-flex align-items-end flex-wrap" }, [e("div", { staticClass: "d-flex" })]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("div", { staticClass: "input-group-prepend" }, [e("span", { staticClass: "input-group-text", attrs: { id: "search" } }, [e("i", { staticClass: "mdi mdi-magnify" })])]);
                        },
                        function () {
                            var t = this,
                                e = t.$createElement,
                                s = t._self._c || e;
                            return s("thead", [
                                s("tr", [
                                    s("th", { staticClass: "text-center", attrs: { id: "cover" } }, [t._v("Cover")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "id" } }, [t._v("Media Order")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "id" } }, [t._v("Media ID")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "id" } }, [t._v("Title")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "id" } }, [t._v("Media Type")]),
                                    t._v(" "),
                                    s("th", { staticClass: "text-center", attrs: { id: "options" } }, [t._v("Options")]),
                                ]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                              Upload\n                            ")]),
                            ]);
                        },
                    ],
                    !1,
                    null,
                    null,
                    null
                );
            e.default = u.exports;
        },
        554: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a),
                r = s(3),
                n = s(6);
            function o(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function l(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var r = t.apply(e, s);
                        function n(t) {
                            o(r, a, i, n, l, "next", t);
                        }
                        function l(t) {
                            o(r, a, i, n, l, "throw", t);
                        }
                        n(void 0);
                    });
                };
            }
            var c = {
                    data: function () {
                        return { networks: [], network: "", image: "", origin_country: "", paginate: ["networks"], edit: !1, editing: {} };
                    },
                    mounted: function () {
                        var t = this;
                        return l(
                            i.a.mark(function e() {
                                var s;
                                return i.a.wrap(function (e) {
                                    for (;;)
                                        switch ((e.prev = e.next)) {
                                            case 0:
                                                return (e.next = 2), axios.get(url + "/admin/networks/datanetworks");
                                            case 2:
                                                (s = e.sent), (t.networks = s.data);
                                            case 4:
                                            case "end":
                                                return e.stop();
                                        }
                                }, e);
                            })
                        )();
                    },
                    methods: {
                        store: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.post(url + "/admin/networks/store", { name: t.network });
                                                    case 3:
                                                        (s = e.sent), t.networks.unshift(s.data.body), (t.network = ""), t.showSuccess(s.data.message), (e.next = 12);
                                                        break;
                                                    case 9:
                                                        (e.prev = 9), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 12:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 9]]
                                    );
                                })
                            )();
                        },
                        destroy: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                l(
                                    i.a.mark(function a() {
                                        var r, n;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            return (a.prev = 0), (a.next = 3), axios.delete(url + "/admin/networks/destroy/" + t);
                                                        case 3:
                                                            (r = a.sent),
                                                                (n = s.networks.findIndex(function (e) {
                                                                    return e.id === t;
                                                                })),
                                                                s.networks.splice(n, 1),
                                                                s.paginate.networks.list.splice(e, 1),
                                                                s.showSuccess(r.data.message),
                                                                (a.next = 13);
                                                            break;
                                                        case 10:
                                                            (a.prev = 10), (a.t0 = a.catch(0)), s.showError();
                                                        case 13:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 10]]
                                        );
                                    })
                                )
                            );
                        },
                        storePoster: function (t) {
                            var e = this;
                            return l(
                                i.a.mark(function s() {
                                    var a, r;
                                    return i.a.wrap(
                                        function (s) {
                                            for (;;)
                                                switch ((s.prev = s.next)) {
                                                    case 0:
                                                        if (void 0 === t.target.files[0]) {
                                                            s.next = 15;
                                                            break;
                                                        }
                                                        return (s.prev = 1), (e.poster = t.target.files[0]), (a = new FormData()).append("image", e.poster), (s.next = 7), axios.post(url + "/admin/movies/image/store", a);
                                                    case 7:
                                                        (r = s.sent), (e.image = r.data.image_path), e.showSuccess(r.data.message), (s.next = 15);
                                                        break;
                                                    case 12:
                                                        (s.prev = 12), (s.t0 = s.catch(1)), e.showError(s.t0.response);
                                                    case 15:
                                                    case "end":
                                                        return s.stop();
                                                }
                                        },
                                        s,
                                        null,
                                        [[1, 12]]
                                    );
                                })
                            )();
                        },
                        update: function (t, e) {
                            (this.edit = !0), (this.network = t.name), (this.image = t.logo_path), (this.origin_country = t.origin_country), (this.editing = t), (this.editing.index = e), window.scrollTo(0, 0);
                        },
                        cancel: function () {
                            (this.edit = !1), (this.network = ""), (this.image = ""), (this.editing = {});
                        },
                        updateSubmit: function () {
                            var t = this;
                            return l(
                                i.a.mark(function e() {
                                    return i.a.wrap(function (e) {
                                        for (;;)
                                            switch ((e.prev = e.next)) {
                                                case 0:
                                                    axios
                                                        .put(url + "/admin/networks/update/" + t.editing.id, { name: t.network, id: t.editing.id, logo_path: t.image, origin_country: t.origin_country })
                                                        .then(function (e) {
                                                            (t.networks[t.editing.index] = e.data.body),
                                                                (t.paginate.networks.list[t.editing.index] = e.data.body),
                                                                (t.edit = !1),
                                                                (t.network = ""),
                                                                (t.image = ""),
                                                                (t.origin_country = ""),
                                                                (t.editing = {}),
                                                                t.showSuccess(e.data.message),
                                                                axios.get(url + "/admin/movies/dataweb?page=" + t.pageNum).then(function (e) {
                                                                    t.movies = e.data;
                                                                });
                                                        })
                                                        .catch(function (e) {
                                                            t.showError(e.message.message);
                                                        });
                                                case 1:
                                                case "end":
                                                    return e.stop();
                                            }
                                    }, e);
                                })
                            )();
                        },
                    },
                    mixins: [r.a, n.a],
                },
                d = s(4),
                u = Object(d.a)(
                    c,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                s("div", { staticClass: "card" }, [
                                    s("div", { staticClass: "card-body" }, [
                                        s("div", { staticClass: "row" }, [
                                            s("div", { staticClass: "col-12" }, [
                                                s("div", { staticClass: "form-group" }, [
                                                    s("label", { attrs: { for: "genre" } }, [t._v("Network")]),
                                                    t._v(" "),
                                                    s("input", {
                                                        directives: [{ name: "model", rawName: "v-model", value: t.network, expression: "network" }],
                                                        staticClass: "form-control",
                                                        attrs: { id: "network", placeholder: "Network name", type: "text" },
                                                        domProps: { value: t.network },
                                                        on: {
                                                            input: function (e) {
                                                                e.target.composing || (t.network = e.target.value);
                                                            },
                                                        },
                                                    }),
                                                ]),
                                                t._v(" "),
                                                t.edit
                                                    ? t._e()
                                                    : s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-info",
                                                              attrs: { disabled: !t.network, type: "submit" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.store();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Add")]
                                                      ),
                                                t._v(" "),
                                                t.edit
                                                    ? t._e()
                                                    : s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-dark",
                                                              attrs: { "aria-pressed": "true" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.fetch();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("\n              Fetch from\n              TMDB\n            ")]
                                                      ),
                                                t._v(" "),
                                                s("div", { staticClass: "row" }, [
                                                    s("div", { staticClass: "col-md-12" }, [
                                                        s("div", { staticClass: "form-group" }, [
                                                            t.image ? s("img", { staticClass: "poster_networks", attrs: { src: t.image, alt: "poster path", "data-loaded": "true", height: "150", width: "250" } }) : t._e(),
                                                        ]),
                                                    ]),
                                                ]),
                                                t._v(" "),
                                                t.edit
                                                    ? s("div", { staticClass: "form-group" }, [
                                                          s("label", { attrs: { for: "genre" } }, [t._v("Network Image")]),
                                                          t._v(" "),
                                                          t.edit
                                                              ? s("input", {
                                                                    directives: [{ name: "model", rawName: "v-model", value: t.image, expression: "image" }],
                                                                    staticClass: "form-control",
                                                                    attrs: { id: "network", placeholder: "Network Image", type: "text" },
                                                                    domProps: { value: t.image },
                                                                    on: {
                                                                        input: function (e) {
                                                                            e.target.composing || (t.image = e.target.value);
                                                                        },
                                                                    },
                                                                })
                                                              : t._e(),
                                                      ])
                                                    : t._e(),
                                                t._v(" "),
                                                t.edit
                                                    ? s("div", { staticClass: "form-group" }, [
                                                          s("label", [t._v("Network Image Upload")]),
                                                          t._v(" "),
                                                          s("input", { staticClass: "file-upload-default" }),
                                                          t._v(" "),
                                                          s("div", { staticClass: "input-group col-xs-12" }, [
                                                              s("input", { staticClass: "form-control file-upload-info", attrs: { id: "poster", placeholder: "Upload Image", type: "file" }, on: { change: t.storePoster } }),
                                                              t._v(" "),
                                                              t._m(0),
                                                          ]),
                                                      ])
                                                    : t._e(),
                                                t._v(" "),
                                                t.edit
                                                    ? s("div", { staticClass: "form-group" }, [
                                                          s("label", { attrs: { for: "origin_country" } }, [t._v("Network Origin Country")]),
                                                          t._v(" "),
                                                          t.edit
                                                              ? s("input", {
                                                                    directives: [{ name: "model", rawName: "v-model", value: t.origin_country, expression: "origin_country" }],
                                                                    staticClass: "form-control",
                                                                    attrs: { id: "origin_country", placeholder: "origin_country", type: "text" },
                                                                    domProps: { value: t.origin_country },
                                                                    on: {
                                                                        input: function (e) {
                                                                            e.target.composing || (t.origin_country = e.target.value);
                                                                        },
                                                                    },
                                                                })
                                                              : t._e(),
                                                      ])
                                                    : t._e(),
                                                t._v(" "),
                                                t.edit
                                                    ? s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-info",
                                                              attrs: { disabled: !t.network, type: "button" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.updateSubmit();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Update")]
                                                      )
                                                    : t._e(),
                                                t._v(" "),
                                                t.edit
                                                    ? s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-light",
                                                              attrs: { disabled: !t.network, type: "button" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.cancel();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Cancel")]
                                                      )
                                                    : t._e(),
                                            ]),
                                        ]),
                                        t._v(" "),
                                        s(
                                            "div",
                                            { staticClass: "table-responsive" },
                                            [
                                                s(
                                                    "table",
                                                    { staticClass: "table", attrs: { "aria-describedby": "Network Table" } },
                                                    [
                                                        t._m(1),
                                                        t._v(" "),
                                                        s(
                                                            "tbody",
                                                            t._l(t.paginated("networks"), function (e, a) {
                                                                return s("tr", { key: a }, [
                                                                    s("td", [e.logo_path ? s("img", { staticClass: "poster", attrs: { src: e.logo_path, alt: "poster path", "data-loaded": "true", height: "316", width: "210" } }) : t._e()]),
                                                                    t._v(" "),
                                                                    s("td", [t._v(t._s(e.name))]),
                                                                    t._v(" "),
                                                                    s("td", [
                                                                        s("div", { staticClass: "list-icons" }, [
                                                                            s(
                                                                                "a",
                                                                                {
                                                                                    staticClass: "list-icons-item mr-2",
                                                                                    attrs: { "data-original-title": "Edit", rel: "tooltip", title: "" },
                                                                                    on: {
                                                                                        click: function (s) {
                                                                                            return t.update(e, a);
                                                                                        },
                                                                                    },
                                                                                },
                                                                                [s("em", { staticClass: "mdi mdi-pencil fa-lg", staticStyle: { color: "#4d83ff" } })]
                                                                            ),
                                                                            t._v(" "),
                                                                            s(
                                                                                "a",
                                                                                {
                                                                                    staticClass: "list-icons-item text-warning",
                                                                                    attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                    on: {
                                                                                        click: function (s) {
                                                                                            return t.destroy(e.id, a);
                                                                                        },
                                                                                    },
                                                                                },
                                                                                [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                            ),
                                                                        ]),
                                                                    ]),
                                                                ]);
                                                            }),
                                                            0
                                                        ),
                                                        t._v(" "),
                                                        t.networks && t.networks.length ? s("paginate", { attrs: { list: t.networks, per: 10, name: "networks", tag: "tbody" } }) : t._e(),
                                                    ],
                                                    1
                                                ),
                                                t._v(" "),
                                                s("paginate-links", {
                                                    staticClass: "float-right",
                                                    attrs: {
                                                        async: !0,
                                                        classes: { ul: "pagination", li: "page-item", a: "page-link", ".next > a": "next-link", ".prev > a": "prev-link" },
                                                        "hide-single-page": !0,
                                                        limit: 5,
                                                        "show-step-links": !0,
                                                        for: "networks",
                                                    },
                                                }),
                                            ],
                                            1
                                        ),
                                    ]),
                                ]),
                            ]),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("span", { staticClass: "input-group-append" }, [
                                e("button", { staticClass: "file-upload-browse btn btn-primary", attrs: { type: "button" } }, [this._v("\n                              Upload\n                            ")]),
                            ]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("thead", [
                                e("tr", [
                                    e("th", { attrs: { id: "name" } }, [this._v("Image")]),
                                    this._v(" "),
                                    e("th", { attrs: { id: "name" } }, [this._v("Names")]),
                                    this._v(" "),
                                    e("th", { attrs: { id: "Action" } }, [this._v("Actions")]),
                                ]),
                            ]);
                        },
                    ],
                    !1,
                    null,
                    null,
                    null
                );
            e.default = u.exports;
        },
        555: function (t, e, s) {
            "use strict";
            s.r(e);
            var a = s(0),
                i = s.n(a);
            function r(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            function n(t) {
                return function () {
                    var e = this,
                        s = arguments;
                    return new Promise(function (a, i) {
                        var n = t.apply(e, s);
                        function o(t) {
                            r(n, a, i, o, l, "next", t);
                        }
                        function l(t) {
                            r(n, a, i, o, l, "throw", t);
                        }
                        o(void 0);
                    });
                };
            }
            var o = {
                    data: function () {
                        return {
                            size: "default",
                            align: "right",
                            form: { name: "", id: "" },
                            formuseragent: { name: "", id: "" },
                            headers: [],
                            useragents: {},
                            paginate: ["headers"],
                            edit: !1,
                            edituseragent: !1,
                            editing: { header: "", index: "" },
                            editinguseragent: { useragent: "", indexuseragent: "" },
                        };
                    },
                    mounted: function () {
                        var t = this;
                        return n(
                            i.a.mark(function e() {
                                var s;
                                return i.a.wrap(function (e) {
                                    for (;;)
                                        switch ((e.prev = e.next)) {
                                            case 0:
                                                return (e.next = 2), axios.get(url + "/admin/headers/dataheaders");
                                            case 2:
                                                (s = e.sent),
                                                    (t.headers = s.data),
                                                    axios
                                                        .get(url + "/admin/useragents/datausersagent")
                                                        .then(function (e) {
                                                            200 === s.status && (t.useragents = e.data);
                                                        })
                                                        .catch(function (t) {});
                                            case 5:
                                            case "end":
                                                return e.stop();
                                        }
                                }, e);
                            })
                        )();
                    },
                    methods: {
                        getUserAgentResults: function () {
                            var t = this,
                                e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
                            axios.get(url + "/admin/useragents/datausersagent?page=" + e).then(function (e) {
                                t.useragents = e.data;
                            });
                        },
                        store: function () {
                            var t = this;
                            return n(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.post(url + "/admin/headers/store", t.form);
                                                    case 3:
                                                        (s = e.sent), t.headers.unshift(s.data.body), (t.form.name = ""), t.showSuccess(s.data.message), (e.next = 12);
                                                        break;
                                                    case 9:
                                                        (e.prev = 9), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 12:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 9]]
                                    );
                                })
                            )();
                        },
                        useragentsstore: function () {
                            var t = this;
                            return n(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (e.next = 3), axios.post(url + "/admin/useragents/store", t.formuseragent);
                                                    case 3:
                                                        (s = e.sent), t.useragents.data.unshift(s.data.body), (t.formuseragent.name = ""), t.showSuccess(s.data.message), (e.next = 12);
                                                        break;
                                                    case 9:
                                                        (e.prev = 9), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 12:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 9]]
                                    );
                                })
                            )();
                        },
                        destroy: function (t, e) {
                            var s = this;
                            this.showConfirm(
                                n(
                                    i.a.mark(function a() {
                                        var r;
                                        return i.a.wrap(
                                            function (a) {
                                                for (;;)
                                                    switch ((a.prev = a.next)) {
                                                        case 0:
                                                            return (a.prev = 0), (a.next = 3), axios.delete(url + "/admin/headers/destroy/" + t);
                                                        case 3:
                                                            (r = a.sent), console.log(e), s.headers.splice(e, 1), s.showSuccess(r.data.message), (a.next = 12);
                                                            break;
                                                        case 9:
                                                            (a.prev = 9), (a.t0 = a.catch(0)), s.showError();
                                                        case 12:
                                                        case "end":
                                                            return a.stop();
                                                    }
                                            },
                                            a,
                                            null,
                                            [[0, 9]]
                                        );
                                    })
                                )
                            );
                        },
                        destroyUseragent: function (t) {
                            var e = this;
                            this.showConfirm(
                                n(
                                    i.a.mark(function s() {
                                        var a, r;
                                        return i.a.wrap(
                                            function (s) {
                                                for (;;)
                                                    switch ((s.prev = s.next)) {
                                                        case 0:
                                                            return (s.prev = 0), (s.next = 3), axios.delete(url + "/admin/useragents/destroy/" + t);
                                                        case 3:
                                                            (a = s.sent),
                                                                (r = e.useragents.data.findIndex(function (e) {
                                                                    return e.id === t;
                                                                })),
                                                                e.useragents.data.splice(r, 1),
                                                                e.showSuccess(a.data.message),
                                                                (s.next = 12);
                                                            break;
                                                        case 9:
                                                            (s.prev = 9), (s.t0 = s.catch(0)), e.showError();
                                                        case 12:
                                                        case "end":
                                                            return s.stop();
                                                    }
                                            },
                                            s,
                                            null,
                                            [[0, 9]]
                                        );
                                    })
                                )
                            );
                        },
                        update: function (t, e) {
                            (this.form.name = t.name), (this.edit = !0), (this.editing.header = t), (this.editing.index = e);
                        },
                        updateUseragent: function (t, e) {
                            (this.formuseragent.name = t.name), (this.edituseragent = !0), (this.editinguseragent.useragent = t), (this.editinguseragent.index = e);
                        },
                        updateSubmit: function () {
                            var t = this;
                            return n(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (e.prev = 0), (t.form.id = t.editing.header.id), (e.next = 4), axios.put(url + "/admin/headers/update/" + t.editing.header.id, t.form);
                                                    case 4:
                                                        (s = e.sent),
                                                            (t.headers[t.editing.index] = s.data.body),
                                                            (t.paginate.headers.list[t.editing.index] = s.data.body),
                                                            (t.form.name = ""),
                                                            (t.edit = !1),
                                                            t.showSuccess(s.data.message),
                                                            (e.next = 15);
                                                        break;
                                                    case 12:
                                                        (e.prev = 12), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 15:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 12]]
                                    );
                                })
                            )();
                        },
                        updateSubmitUserAgent: function () {
                            var t = this;
                            return n(
                                i.a.mark(function e() {
                                    var s;
                                    return i.a.wrap(
                                        function (e) {
                                            for (;;)
                                                switch ((e.prev = e.next)) {
                                                    case 0:
                                                        return (
                                                            (e.prev = 0), (t.formuseragent.id = t.editinguseragent.useragent.id), (e.next = 4), axios.put(url + "/admin/useragents/update/" + t.editinguseragent.useragent.id, t.formuseragent)
                                                        );
                                                    case 4:
                                                        (s = e.sent),
                                                            axios.get(url + "/admin/useragents/datausersagent?page=1").then(function (e) {
                                                                t.useragents = e.data;
                                                            }),
                                                            (t.formuseragent.name = ""),
                                                            (t.edituseragent = !1),
                                                            t.showSuccess(s.data.message),
                                                            (e.next = 14);
                                                        break;
                                                    case 11:
                                                        (e.prev = 11), (e.t0 = e.catch(0)), t.showError(e.t0.response);
                                                    case 14:
                                                    case "end":
                                                        return e.stop();
                                                }
                                        },
                                        e,
                                        null,
                                        [[0, 11]]
                                    );
                                })
                            )();
                        },
                        cancel: function () {
                            (this.edit = !1), (this.form.name = "");
                        },
                        cancelUseragent: function () {
                            (this.edituseragent = !1), (this.formuseragent.name = "");
                        },
                    },
                    mixins: [s(3).a],
                },
                l = s(4),
                c = Object(l.a)(
                    o,
                    function () {
                        var t = this,
                            e = t.$createElement,
                            s = t._self._c || e;
                        return s("div", { staticClass: "row" }, [
                            s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                s("div", { staticClass: "card" }, [
                                    s("div", { staticClass: "card-body" }, [
                                        s("div", { staticClass: "row" }, [
                                            s("div", { staticClass: "col-12" }, [
                                                s("div", { staticClass: "form-group" }, [
                                                    s("p", { staticClass: "card-title" }, [t._v("Headers")]),
                                                    t._v(" "),
                                                    s("input", {
                                                        directives: [{ name: "model", rawName: "v-model", value: t.form.name, expression: "form.name" }],
                                                        staticClass: "form-control",
                                                        attrs: { placeholder: "Server name", type: "text" },
                                                        domProps: { value: t.form.name },
                                                        on: {
                                                            input: function (e) {
                                                                e.target.composing || t.$set(t.form, "name", e.target.value);
                                                            },
                                                        },
                                                    }),
                                                ]),
                                                t._v(" "),
                                                t.edit
                                                    ? t._e()
                                                    : s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-info",
                                                              attrs: { disabled: !t.form.name, type: "submit" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.store();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Add")]
                                                      ),
                                                t._v(" "),
                                                t.edit
                                                    ? s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-info",
                                                              attrs: { disabled: !t.form.name, type: "button" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.updateSubmit();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Update")]
                                                      )
                                                    : t._e(),
                                                t._v(" "),
                                                t.edit
                                                    ? s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-light",
                                                              attrs: { type: "button" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.cancel();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Cancel")]
                                                      )
                                                    : t._e(),
                                            ]),
                                        ]),
                                        t._v(" "),
                                        s(
                                            "div",
                                            { staticClass: "table-responsive" },
                                            [
                                                s(
                                                    "table",
                                                    { staticClass: "table", attrs: { "aria-describedby": "Streaming Links Table" } },
                                                    [
                                                        t._m(0),
                                                        t._v(" "),
                                                        s(
                                                            "tbody",
                                                            t._l(t.paginated("headers"), function (e, a) {
                                                                return s("tr", { key: a }, [
                                                                    s("td", [t._v(t._s(e.name))]),
                                                                    t._v(" "),
                                                                    s("td", [
                                                                        s("div", { staticClass: "list-icons" }, [
                                                                            s(
                                                                                "a",
                                                                                {
                                                                                    staticClass: "list-icons-item mr-2",
                                                                                    attrs: { "data-original-title": "Edit", rel: "tooltip", title: "" },
                                                                                    on: {
                                                                                        click: function (s) {
                                                                                            return t.update(e, a);
                                                                                        },
                                                                                    },
                                                                                },
                                                                                [s("em", { staticClass: "mdi mdi-pencil fa-lg", staticStyle: { color: "#4d83ff" } })]
                                                                            ),
                                                                            t._v(" "),
                                                                            s(
                                                                                "a",
                                                                                {
                                                                                    staticClass: "list-icons-item text-warning",
                                                                                    attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                    on: {
                                                                                        click: function (s) {
                                                                                            return t.destroy(e.id, a);
                                                                                        },
                                                                                    },
                                                                                },
                                                                                [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                            ),
                                                                        ]),
                                                                    ]),
                                                                ]);
                                                            }),
                                                            0
                                                        ),
                                                        t._v(" "),
                                                        t.headers && t.headers.length ? s("paginate", { attrs: { list: t.headers, per: 5, name: "headers", tag: "tbody" } }) : t._e(),
                                                    ],
                                                    1
                                                ),
                                                t._v(" "),
                                                s("paginate-links", {
                                                    staticClass: "float-right",
                                                    attrs: {
                                                        async: !0,
                                                        classes: { ul: "pagination", li: "page-item", a: "page-link", ".next > a": "next-link", ".prev > a": "prev-link" },
                                                        "hide-single-page": !0,
                                                        limit: 5,
                                                        "show-step-links": !0,
                                                        for: "headers",
                                                    },
                                                }),
                                            ],
                                            1
                                        ),
                                    ]),
                                ]),
                            ]),
                            t._v(" "),
                            s("div", { staticClass: "col-lg-12 grid-margin stretch-card" }, [
                                s("div", { staticClass: "card" }, [
                                    s("div", { staticClass: "card-body" }, [
                                        s("div", { staticClass: "row" }, [
                                            s("div", { staticClass: "col-12" }, [
                                                s("div", { staticClass: "form-group" }, [
                                                    s("p", { staticClass: "card-title" }, [t._v("User Agents")]),
                                                    t._v(" "),
                                                    s("input", {
                                                        directives: [{ name: "model", rawName: "v-model", value: t.formuseragent.name, expression: "formuseragent.name" }],
                                                        staticClass: "form-control",
                                                        attrs: { placeholder: "Server name", type: "text" },
                                                        domProps: { value: t.formuseragent.name },
                                                        on: {
                                                            input: function (e) {
                                                                e.target.composing || t.$set(t.formuseragent, "name", e.target.value);
                                                            },
                                                        },
                                                    }),
                                                ]),
                                                t._v(" "),
                                                t.edituseragent
                                                    ? t._e()
                                                    : s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-info",
                                                              attrs: { disabled: !t.formuseragent.name, type: "submit" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.useragentsstore();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Add")]
                                                      ),
                                                t._v(" "),
                                                t.edituseragent
                                                    ? s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-info",
                                                              attrs: { disabled: !t.formuseragent.name, type: "button" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.updateSubmitUserAgent();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Update")]
                                                      )
                                                    : t._e(),
                                                t._v(" "),
                                                t.edituseragent
                                                    ? s(
                                                          "button",
                                                          {
                                                              staticClass: "btn btn-light",
                                                              attrs: { type: "button" },
                                                              on: {
                                                                  click: function (e) {
                                                                      return t.cancelUseragent();
                                                                  },
                                                              },
                                                          },
                                                          [t._v("Cancel")]
                                                      )
                                                    : t._e(),
                                            ]),
                                        ]),
                                        t._v(" "),
                                        s(
                                            "div",
                                            { staticClass: "table-responsive" },
                                            [
                                                s("table", { staticClass: "table", attrs: { "aria-describedby": "Streaming Links Table" } }, [
                                                    t._m(1),
                                                    t._v(" "),
                                                    s(
                                                        "tbody",
                                                        t._l(t.useragents.data, function (e) {
                                                            return s("tr", { key: e.id }, [
                                                                s("td", [t._v(t._s(e.name))]),
                                                                t._v(" "),
                                                                s("td", [
                                                                    s("div", { staticClass: "list-icons" }, [
                                                                        s(
                                                                            "a",
                                                                            {
                                                                                staticClass: "list-icons-item mr-2",
                                                                                attrs: { "data-original-title": "Edit", rel: "tooltip", title: "" },
                                                                                on: {
                                                                                    click: function (s) {
                                                                                        return t.updateUseragent(e, t.index);
                                                                                    },
                                                                                },
                                                                            },
                                                                            [s("em", { staticClass: "mdi mdi-pencil fa-lg", staticStyle: { color: "#4d83ff" } })]
                                                                        ),
                                                                        t._v(" "),
                                                                        s(
                                                                            "a",
                                                                            {
                                                                                staticClass: "list-icons-item text-warning",
                                                                                attrs: { "data-original-title": "Delete", rel: "tooltip", title: "" },
                                                                                on: {
                                                                                    click: function (s) {
                                                                                        return t.destroyUseragent(e.id, t.index);
                                                                                    },
                                                                                },
                                                                            },
                                                                            [s("em", { staticClass: "mdi mdi-delete fa-lg", staticStyle: { color: "red" } })]
                                                                        ),
                                                                    ]),
                                                                ]),
                                                            ]);
                                                        }),
                                                        0
                                                    ),
                                                ]),
                                                t._v(" "),
                                                s("pagination", {
                                                    staticClass: "pagination flex-wrap pagination-flat pagination-success",
                                                    attrs: { data: t.useragents, "show-disabled": !1, limit: 5, size: t.size, align: t.align },
                                                    on: { "pagination-change-page": t.getUserAgentResults },
                                                }),
                                            ],
                                            1
                                        ),
                                    ]),
                                ]),
                            ]),
                        ]);
                    },
                    [
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("thead", [e("tr", [e("th", { attrs: { id: "actions" } }, [this._v("Name")]), this._v(" "), e("th", { attrs: { id: "names" } }, [this._v("Actions")])])]);
                        },
                        function () {
                            var t = this.$createElement,
                                e = this._self._c || t;
                            return e("thead", [e("tr", [e("th", { attrs: { id: "actions" } }, [this._v("Name")]), this._v(" "), e("th", { attrs: { id: "names" } }, [this._v("Actions")])])]);
                        },
                    ],
                    !1,
                    null,
                    "01543446",
                    null
                );
            e.default = c.exports;
        },
        6: function (t, e, s) {
            "use strict";
            s.d(e, "a", function () {
                return n;
            });
            var a = s(0),
                i = s.n(a);
            function r(t, e, s, a, i, r, n) {
                try {
                    var o = t[r](n),
                        l = o.value;
                } catch (t) {
                    return void s(t);
                }
                o.done ? e(l) : Promise.resolve(l).then(a, i);
            }
            var n = {
                data: function () {
                    return { settings: {}, langs: [], lang: "", langsubs: [], langsub: "", langdownload: "", substitles_langs: [] };
                },
                mounted: function () {
                    var t,
                        e = this;
                    return ((t = i.a.mark(function t() {
                        var s;
                        return i.a.wrap(function (t) {
                            for (;;)
                                switch ((t.prev = t.next)) {
                                    case 0:
                                        return (t.next = 2), axios.get(url + "/admin/settings/data");
                                    case 2:
                                        return (s = t.sent), (e.settings = s.data), (t.next = 6), http.get("https://api.themoviedb.org/3/configuration/languages?api_key=" + e.settings.tmdb_api_key);
                                    case 6:
                                        return (
                                            (s = t.sent),
                                            (e.langs = s.data),
                                            e.langs.push(
                                                ((r = "pt-br"),
                                                (i = "iso_639_1") in (a = { iso_639_1: "pt-br", english_name: "Portuguese (Brazil)" }) ? Object.defineProperty(a, i, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : (a[i] = r),
                                                a)
                                            ),
                                            (t.next = 11),
                                            http.get("https://api.themoviedb.org/3/configuration/languages?api_key=" + e.settings.tmdb_api_key)
                                        );
                                    case 11:
                                        (s = t.sent), (e.langsubs = s.data);
                                    case 13:
                                    case "end":
                                        return t.stop();
                                }
                            var a, i, r;
                        }, t);
                    })),
                    function () {
                        var e = this,
                            s = arguments;
                        return new Promise(function (a, i) {
                            var n = t.apply(e, s);
                            function o(t) {
                                r(n, a, i, o, l, "next", t);
                            }
                            function l(t) {
                                r(n, a, i, o, l, "throw", t);
                            }
                            o(void 0);
                        });
                    })();
                },
            };
        },
    },
    [[241, 1, 2]],
]);
